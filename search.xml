<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CF886E Maximum Element</title>
      <link href="/2019/08/02/CF886E/"/>
      <url>/2019/08/02/CF886E/</url>
      
        <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>​    有一个排列 $a_1, a_2,\cdots, a_n$。已知一种求最大值的方式：遍历一遍序列，如果一个数比他后面的 $k$ 个值都要大，则直接返回该值。求有多少个排列使得这种方式返回的答案是错误的。</p><p>​    $n, k \leq 10^6$ 。</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>​    考虑如何求正确的排列个数。可以发现，如果一个序列在求最大值时还没有遍历到 $n$ 就中途退出了，那么他返回的一定不会是正确的值。</p><p>​    于是可以设计出 $dp$ 状态：$dp_i$ 表示遍历完前 $i$ 个数依然没有返回的 $1,2,\cdots, i$ 的排列个数 。</p><p>​    注意，这里只考虑 $1, 2, \cdots, i$ 的排列个数，即他们的相对大小关系。</p><p>​    转移时，我们可以枚举前 $i - 1$ 个数的最大值所在的位置 $j$。显然有几个性质。一是 $j$ 要在 $[i - k + 1, i]$ 内，否则就会退出；二是在遍历到这个最大值之前不能退出；三是这个最大值之后的 $i - j$ 个位置可以随便交换位置，原因是他们不会对退出这件事造成任何影响。</p><p>​    于是，我们可以列出转移方程：</p><script type="math/tex; mode=display">dp_i = \sum\limits_{j=i-k+1}^{i} \binom{i-1}{j-1} \cdot dp_{j-1} \cdot (i-j)!</script><p>​    暴力 dp 是 $O(n^2)$ 的，考虑把组合数拆开，简单推导可得：</p><script type="math/tex; mode=display">dp_i = (i-1)!\cdot \sum\limits_{j=i-k}^{i-1} \frac{dp_j}{j!}</script><p>​    直接维护 $\sum\limits_{j=i-k}^{i-1} \frac{dp_j}{j!}$ 即可。</p><p>​    最后的答案如何计算？考虑最大值的位置 $i​$ ，有： </p><script type="math/tex; mode=display">\begin{aligned}ans &= n!- \sum\limits_{i=1}^{n} dp_{i-1} \cdot \binom{n-1}{i-1} \cdot (n-i)! \\&= n!-(n-1)!\cdot \sum\limits_{i=1}^{n} \frac{dp_{i-1}}{(i-1)!}\end{aligned}</script><p>​    时间复杂度 $O(n)$。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><p>代码中可以考虑直接维护 $\frac{dp_i}{i!}$ </p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = (<span class="hljs-keyword">int</span>)<span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>; </span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1000000007</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> n, k, f[N], g[N], dp[N]; </span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> (x += y) &gt;= mod ? x - mod : x; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fpw</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> k, <span class="hljs-keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">int</span> ret = <span class="hljs-number">1</span>; </span><br><span class="line">  <span class="hljs-keyword">while</span>(k) &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(k &amp; <span class="hljs-number">1</span>) ret = <span class="hljs-number">1l</span>l * ret * x % p; </span><br><span class="line">    x = <span class="hljs-number">1l</span>l * x * x % p; k &gt;&gt;= <span class="hljs-number">1</span>; </span><br><span class="line">  &#125; <span class="hljs-keyword">return</span> ret; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>, &amp;n, &amp;k); </span><br><span class="line">  f[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>; </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) </span><br><span class="line">    f[i] = <span class="hljs-number">1l</span>l * f[i - <span class="hljs-number">1</span>] * i % mod; </span><br><span class="line">  g[n] = fpw(f[n], mod - <span class="hljs-number">2</span>, mod);</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) </span><br><span class="line">    g[i] = <span class="hljs-number">1l</span>l * g[i + <span class="hljs-number">1</span>] * (i + <span class="hljs-number">1</span>) % mod;  </span><br><span class="line">  <span class="hljs-keyword">int</span> s = <span class="hljs-number">0</span>; dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>; </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    s = add(s, dp[i - <span class="hljs-number">1</span>]); </span><br><span class="line">    <span class="hljs-keyword">if</span>(i &gt; k) s = add(s, mod - dp[i - k - <span class="hljs-number">1</span>]);</span><br><span class="line">    dp[i] = <span class="hljs-number">1l</span>l * g[i] * f[i - <span class="hljs-number">1</span>] % mod * s % mod;  </span><br><span class="line">  &#125; s = <span class="hljs-number">0</span>; </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) s = add(s, dp[i - <span class="hljs-number">1</span>]); </span><br><span class="line">  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>, <span class="hljs-number">1l</span>l * f[n - <span class="hljs-number">1</span>] * add(n, mod - s) % mod); </span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF848C Goodbye Souvenir</title>
      <link href="/2019/07/07/CF848C/"/>
      <url>/2019/07/07/CF848C/</url>
      
        <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>给出一个长度为 $n$ 的序列 $a_i$，$1 \le a_i \le n$ 。有 $m$ 个操作，每次操作输入三个数 $o,x,y$ 表示</p><ul><li>$o=1$ ，此时表示令 $a_x=y$ </li><li>$o=2$ ，此时表示询问 $\sum_{i=1}^n v(i)$ 。其中 $v(i)$ 是数字 $i$ 在 $[x,y]$ 中最后一次出现的位置减去第一次出现的位置。如果没有出现，则 $v(i) = 0$ </li></ul><p>$n, m \leq 10^5$ </p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>我们令 $pre_i$ 表示最大的 $j$ 满足 $j &lt; i$ 且 $a_j = a_i$ （若不存在这样的 $j$ 则 $j = 0$）</p><p>同样的 $nxt_i$ 表示最小的 $j$ 满足 $j &gt; i$ 且 $a_j = a_i$ （若不存在这样的 $j$ 则 $j = n+1$）</p><p>如果没有修改操作，那么我们把每一个 $(i, pre_i)$ 这样的二元组看成坐标上的一个点，他的值为 $i - pre_i$ ，那么每次询问 $[l, r]$ 的答案就是一个左下角为 $(l,l)$ 右上角为 $(r,r)$ 的矩（正方）形内的所有点值之和（包括边）。</p><p>这样做的原因在于，对于一个值，如果他最后一次出现在 $e$ 这个位置，第一次出现在 $s$ 这个位置，那么他对答案的贡献就是 $s-e = (s - pre_s) + (pre_s - pre_{pre_s})+ \cdots+(nxt_s - s)$ 即把 $[s, e]$ 这个区间拆分成若干个 $[pre_i, i]$ 的区间。如果把 $(i, pre_i)$  看成一个坐标系上的点，那么他的两个维度都满足在 $[l, r]$ 中，那么他会对答案产生贡献；反之，$[l, r]$ 内的答案也是由这些点的贡献所组成的。</p><p>有了修改操作，直接用 $n$ 个 set 维护一下 $nxt$ 和 $pre$ 。对于每一个 $a[x] = y$ 修改，会减少 $(x, pre_{a_x}), (nxt_{a_x}, x), (nxt_y, pre_y)$ 三个点，增加了 $(nxt_{a_x}, pre_{a_x}), (x, pre_y), (nxt_y, x)$ 三个点。（注意这里的 $nxt_a, pre_a$ 表示的是对于 $a$ 这个值在 $x$ 这个位置之前/之后第一次出现的位置）。于是问题转化成一个加点删点求矩形内部值之和，可以以时间为第一维，$i$ 为第二维，$pre_i$ 为第三维用CDQ分治做三维偏序就做完了。（询问矩阵再用一个差分）</p><p>时间复杂度：$O(n \log^2 n)$ （由于点数可能很多所以参与 CDQ 分治的点有大概 $6n$ 个所以很慢）</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Author: AcFunction</span></span><br><span class="line"><span class="hljs-comment"> * Date:   2019-07-06 17:01:34</span></span><br><span class="line"><span class="hljs-comment"> * Email:  3486942970@qq.com</span></span><br><span class="line"><span class="hljs-comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">500500</span>; </span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> n, m, a[N], nxt[N], pre[N], po[N]; </span><br><span class="line"><span class="hljs-keyword">int</span> tot, fla[N]; </span><br><span class="line">ll ans[N], c[N]; </span><br><span class="line"><span class="hljs-built_in">set</span> &lt;<span class="hljs-keyword">int</span>&gt; s[<span class="hljs-number">100001</span>]; </span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Query</span> &#123;</span></span><br><span class="line">  <span class="hljs-keyword">int</span> op, y, z, v, id; </span><br><span class="line">&#125; Q[N * <span class="hljs-number">2</span>]; </span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mk</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> op, <span class="hljs-keyword">int</span> y, <span class="hljs-keyword">int</span> z, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">  Q[++tot].y = y, Q[tot].z = z; </span><br><span class="line">  Q[tot].id = id; Q[tot].op = op; Q[tot].v = v; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lb</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> x &amp; (-x); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = x; i &lt;= <span class="hljs-number">100005</span>; i += lb(i))</span><br><span class="line">    c[i] += d; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function">ll <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  ll ret = <span class="hljs-number">0</span>; </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = x; i; i -= lb(i)) </span><br><span class="line">    ret += c[i]; </span><br><span class="line">  <span class="hljs-keyword">return</span> ret; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(Query x, Query y)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> x.y &lt; y.y; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CDQ</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">if</span>(l == r) <span class="hljs-keyword">return</span> ; </span><br><span class="line">  <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>; </span><br><span class="line">  CDQ(l, mid); CDQ(mid + <span class="hljs-number">1</span>, r); </span><br><span class="line">  sort(Q + l, Q + mid + <span class="hljs-number">1</span>, cmp); </span><br><span class="line">  sort(Q + mid + <span class="hljs-number">1</span>, Q + r + <span class="hljs-number">1</span>, cmp); </span><br><span class="line">  <span class="hljs-keyword">int</span> pos = l; </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = mid + <span class="hljs-number">1</span>; i &lt;= r; i++) &#123;</span><br><span class="line">    <span class="hljs-keyword">while</span>(pos &lt;= mid &amp;&amp; Q[pos].y &lt;= Q[i].y) &#123;</span><br><span class="line">      <span class="hljs-keyword">if</span>(Q[pos].op == <span class="hljs-number">0</span>)</span><br><span class="line">        add(Q[pos].z + <span class="hljs-number">1</span>, Q[pos].v); </span><br><span class="line">      pos++; </span><br><span class="line">    &#125; <span class="hljs-keyword">if</span>(Q[i].op == <span class="hljs-number">1</span>) &#123;</span><br><span class="line">      ans[Q[i].id] += sum(Q[i].z + <span class="hljs-number">1</span>); </span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = l; i &lt; pos; i++) &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(Q[i].op == <span class="hljs-number">0</span>) </span><br><span class="line">      add(Q[i].z + <span class="hljs-number">1</span>, -(Q[i].v)); </span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>, &amp;n, &amp;m); </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    s[i].insert(<span class="hljs-number">0</span>), s[i].insert(n + <span class="hljs-number">1</span>); </span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;a[i]); </span><br><span class="line">    pre[i] = po[a[i]]; </span><br><span class="line">    po[a[i]] = i; </span><br><span class="line">    mk(<span class="hljs-number">0</span>, i, pre[i], i - pre[i], <span class="hljs-number">0</span>); </span><br><span class="line">    s[a[i]].insert(i); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) </span><br><span class="line">    po[i] = n + <span class="hljs-number">1</span>; </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = n; i &gt;= <span class="hljs-number">1</span>; i--) &#123;</span><br><span class="line">    nxt[i] = po[a[i]]; </span><br><span class="line">    po[a[i]] = i; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> op, x, y; </span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d %d"</span>, &amp;op, &amp;x, &amp;y);</span><br><span class="line">    <span class="hljs-keyword">if</span>(op == <span class="hljs-number">1</span>) &#123;</span><br><span class="line">      <span class="hljs-keyword">if</span>(a[x] == y) <span class="hljs-keyword">continue</span> ;</span><br><span class="line">      mk(<span class="hljs-number">0</span>, x, pre[x], pre[x] - x, <span class="hljs-number">0</span>); </span><br><span class="line">      mk(<span class="hljs-number">0</span>, nxt[x], x, x - nxt[x], <span class="hljs-number">0</span>); </span><br><span class="line">      mk(<span class="hljs-number">0</span>, nxt[x], pre[x], nxt[x] - pre[x], <span class="hljs-number">0</span>);   </span><br><span class="line">      nxt[pre[x]] = nxt[x]; </span><br><span class="line">      pre[nxt[x]] = pre[x]; </span><br><span class="line">      s[a[x]].erase(x);</span><br><span class="line">      a[x] = y; </span><br><span class="line">      s[y].insert(x);</span><br><span class="line">      <span class="hljs-built_in">set</span> &lt; <span class="hljs-keyword">int</span> &gt; :: iterator Nw = s[y].find(x); </span><br><span class="line">      <span class="hljs-keyword">int</span> Pr = *(--Nw), Nx = *(++(++(Nw))); </span><br><span class="line">      mk(<span class="hljs-number">0</span>, Nx, Pr, Pr - Nx, <span class="hljs-number">0</span>); </span><br><span class="line">      mk(<span class="hljs-number">0</span>, x, Pr, x - Pr, <span class="hljs-number">0</span>); </span><br><span class="line">      mk(<span class="hljs-number">0</span>, Nx, x, Nx - x, <span class="hljs-number">0</span>); </span><br><span class="line">      pre[Nx] = nxt[Pr] = x; </span><br><span class="line">      pre[x] = Pr, nxt[x] = Nx; </span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">      mk(<span class="hljs-number">1</span>, x - <span class="hljs-number">1</span>, x - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, i * <span class="hljs-number">4</span> - <span class="hljs-number">3</span>); </span><br><span class="line">      mk(<span class="hljs-number">1</span>, x - <span class="hljs-number">1</span>, y, <span class="hljs-number">0</span>, i * <span class="hljs-number">4</span> - <span class="hljs-number">2</span>); </span><br><span class="line">      mk(<span class="hljs-number">1</span>, y, x - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, i * <span class="hljs-number">4</span> - <span class="hljs-number">1</span>); </span><br><span class="line">      mk(<span class="hljs-number">1</span>, y, y, <span class="hljs-number">0</span>, i * <span class="hljs-number">4</span>); </span><br><span class="line">      fla[i] = <span class="hljs-number">1</span>; </span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">  CDQ(<span class="hljs-number">1</span>, tot);</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(fla[i]) &#123;</span><br><span class="line">      <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>, ans[i * <span class="hljs-number">4</span> - <span class="hljs-number">3</span>] - ans[i * <span class="hljs-number">4</span> - <span class="hljs-number">2</span>] - ans[i * <span class="hljs-number">4</span> - <span class="hljs-number">1</span>] + ans[i * <span class="hljs-number">4</span>]); </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDQ分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BZOJ4828 「HNOI2017」大佬</title>
      <link href="/2019/06/21/BZOJ4828/"/>
      <url>/2019/06/21/BZOJ4828/</url>
      
        <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>你现在要怼 $m$ 个大佬，第 $i$ 个大佬的自信值是 $C_i$ 。每次怼大佬之前，你的自信值是 $mc$，等级 $L=0$，嘲讽值 $F = 1$。对于每一个大佬，你都有 $n$ 天时间来怼大佬。无论哪个大佬，他们都会在第 $i$ 天使你的的自信值下降 $a_i$ 如果你的自信值为负数，那么你失败了。在第 $i$ 天，你可以干一下事情中的恰好一件：</p><ol><li>使得大佬自信值下降 $1$</li><li>使得自己的自信值增加 $w_i$ </li><li>把自己的等级 $+1$ </li><li>把自己的 $F$ 乘上 $L$</li><li>怼大佬，使得大佬的自信值下降 $F$，之后$L=0$  ，$F=1$</li></ol><p>如果中途大佬自信值为负数，你失败了。若大佬自信值恰好为 $0​$ ，则你成功了。</p><p>对于每个大佬求你能否成功。</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>首先，可以发现，怼大佬和活下来两件事是互相独立的。并且怼大佬只与天数相关。显然天数越多越有可能。</p><p>所以先用一遍简单 dp 得出最多能剩下多少天来怼大佬并且保证自己活下来。设最多天数是 $D$ 。</p><p>然后用一遍 BFS 的出所有二元组 $(d, f)$ 表示用了 $d(&lt;D)$  天并且此时 $F = f$ 。注意去重。</p><p>你能怼死大佬有三种情况：</p><ol><li>不怼大佬。只执行 $1$ 操作。此时需要满足 $C_i \leq D$ </li><li>只怼一次大佬。这时能怼死大佬需要满足存在一个二元组 $(d’,f’)$ 使得 $f’ \leq C_i$ 并且 $f’+D - d \ge C_i$ （一次不能怼死，用 $1$ 操作耗死）</li><li>怼两次。可以发现，若两次分别是 $(d_1,f_1), (d_2, f_2)$ 则类似于第二种情况，有 $f_1+f_2\leq C_i$ 并且 $f_1+f_2+(D-d_1-d_2) \ge C_i$ 。显然，对于一个 $f_i$ ，只有最小的那个 $d_i$ 才是最优的。所以我们对每个 $f$  只保存最小的 $d$ ，并且按照 $f$ 排序。由于需要满足$f_1+f_2\leq C_i$， 就可以直接用双指针扫一遍，中途判断是否存在 $f_1+f_2+(D-d_1-d_2) \ge C_i$ 即可。</li></ol><p>由于 $f$ 增长的很快，导致二元组不会特别多，于是可以通过此题。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Author: AcFunction</span></span><br><span class="line"><span class="hljs-comment"> * Date:   2019-06-21 14:35:24</span></span><br><span class="line"><span class="hljs-comment"> * Email:  3486942970@qq.com</span></span><br><span class="line"><span class="hljs-comment">**/</span></span><br><span class="line"> </span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PII pair <span class="hljs-meta-string">&lt;int, int&gt; </span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fi first </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> se second </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MP make_pair</span></span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">105</span>; </span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> NN = (<span class="hljs-keyword">int</span>)<span class="hljs-number">3e6</span> + <span class="hljs-number">10</span>; </span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = (<span class="hljs-keyword">int</span>)<span class="hljs-number">1e9</span>; </span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">int</span> n, m, mc, mxc, cnt, tot; </span><br><span class="line"><span class="hljs-keyword">int</span> a[N], w[N], dp[N][N], D, C[<span class="hljs-number">22</span>]; </span><br><span class="line"> </span><br><span class="line">pair &lt;<span class="hljs-keyword">int</span>, PII&gt; Q[NN]; </span><br><span class="line">PII A[NN], B[NN]; </span><br><span class="line"><span class="hljs-built_in">map</span> &lt;PII, <span class="hljs-keyword">int</span>&gt; mp; </span><br><span class="line"><span class="hljs-built_in">map</span> &lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; mmp; </span><br><span class="line"> </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getday</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = a[i]; j &lt;= mc; j++) &#123;</span><br><span class="line">      dp[i][j - a[i]] = max(dp[i][j - a[i]], dp[i - <span class="hljs-number">1</span>][j] + <span class="hljs-number">1</span>); </span><br><span class="line">      <span class="hljs-keyword">int</span> t = min(j - a[i] + w[i], mc); </span><br><span class="line">      dp[i][t] = max(dp[i][t], dp[i - <span class="hljs-number">1</span>][j]); </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) </span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= mc; j++)</span><br><span class="line">      D = max(D, dp[i][j]); </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getst</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">int</span> h = <span class="hljs-number">1</span>, t = <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-comment">// fi : day</span></span><br><span class="line">  <span class="hljs-comment">// se.fi : level</span></span><br><span class="line">  <span class="hljs-comment">// se.se : att</span></span><br><span class="line">  Q[++t] = MP(<span class="hljs-number">1</span>, MP(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)); </span><br><span class="line">  mp[MP(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)] = <span class="hljs-number">1</span>; </span><br><span class="line">  <span class="hljs-keyword">while</span>(h &lt;= t) &#123;</span><br><span class="line">    pair &lt;<span class="hljs-keyword">int</span>, PII&gt; tmp = Q[h++]; </span><br><span class="line">    <span class="hljs-keyword">if</span>(tmp.fi &gt;= D) <span class="hljs-keyword">continue</span> ; </span><br><span class="line">    <span class="hljs-keyword">int</span> d = tmp.fi, l = tmp.se.fi, f = tmp.se.se;</span><br><span class="line">    Q[++t] = MP(d + <span class="hljs-number">1</span>, MP(l + <span class="hljs-number">1</span>, f)); </span><br><span class="line">    mp[MP(d + <span class="hljs-number">1</span>, f)] = <span class="hljs-number">1</span>; </span><br><span class="line">    <span class="hljs-keyword">if</span>(l &gt; <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-number">1l</span>l * l * f &lt;= mxc &amp;&amp; !mp[MP(d + <span class="hljs-number">1</span>, l * f)]) &#123;</span><br><span class="line">      <span class="hljs-keyword">int</span> nf = l * f; </span><br><span class="line">      Q[++t] = MP(d + <span class="hljs-number">1</span>, MP(l, nf)); </span><br><span class="line">      mp[MP(d + <span class="hljs-number">1</span>, nf)] = <span class="hljs-number">1</span>; A[++cnt] = MP(d + <span class="hljs-number">1</span>, nf); </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(PII a, PII b)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> a.se == b.se ? a.fi &lt; b.fi : a.se &lt; b.se; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d %d"</span>, &amp;n, &amp;m, &amp;mc); </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;a[i]); </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;w[i]); </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;C[i]); </span><br><span class="line">    mxc = max(mxc, C[i]); </span><br><span class="line">  &#125;</span><br><span class="line">  getday(); </span><br><span class="line">  getst(); </span><br><span class="line">  sort(A + <span class="hljs-number">1</span>, A + cnt + <span class="hljs-number">1</span>, cmp); </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= cnt; i++) &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(!mmp[A[i].se]) &#123;</span><br><span class="line">      mmp[A[i].se] = <span class="hljs-number">1</span>; </span><br><span class="line">      B[++tot] = A[i]; </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> _ = <span class="hljs-number">1</span>; _ &lt;= m; _++) &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(C[_] &lt;= D) &#123;</span><br><span class="line">      <span class="hljs-built_in">puts</span>(<span class="hljs-string">"1"</span>); </span><br><span class="line">      <span class="hljs-keyword">continue</span> ; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">int</span> ok = <span class="hljs-number">0</span>, pos = <span class="hljs-number">1</span>; </span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = tot; i &gt;= <span class="hljs-number">1</span>; i--) &#123;</span><br><span class="line">      <span class="hljs-keyword">int</span> d = B[i].fi, f = B[i].se;</span><br><span class="line">      <span class="hljs-keyword">if</span>(f &lt;= C[_] &amp;&amp; D - d + f &gt;= C[_]) &#123;</span><br><span class="line">        ok = <span class="hljs-number">1</span>; <span class="hljs-keyword">break</span> ; </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="hljs-keyword">int</span> mx = -INF; </span><br><span class="line">      <span class="hljs-keyword">while</span>(pos &lt;= tot &amp;&amp; f + B[pos].se &lt;= C[_]) &#123;</span><br><span class="line">        mx = max(mx, B[pos].se - B[pos].fi); pos++; </span><br><span class="line">      &#125; </span><br><span class="line">      <span class="hljs-keyword">if</span>(f - d + mx &gt;= C[_] - D) &#123;</span><br><span class="line">        ok = <span class="hljs-number">1</span>; <span class="hljs-keyword">break</span> ; </span><br><span class="line">      &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, ok); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> BFS </tag>
            
            <tag> two pointers </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BZOJ4784 「ZJOI2017」仙人掌</title>
      <link href="/2019/06/21/BZOJ4784/"/>
      <url>/2019/06/21/BZOJ4784/</url>
      
        <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>给定一张 $n$ 个点 $m$ 条边的无向简单连通图，问有多少种加边方法使其是一颗仙人掌。</p><p>$n \leq 5\cdot 10^5, m \leq \min\{\frac{n\cdot(n+1)}{2}, 10^6\}$  </p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>若原图不是一颗仙人掌，直接输出 $0​$ 即可。</p><p>若其是一颗仙人掌，其中的环对答案没有贡献（既不能在其中加边，也不能向外连边），可以直接把与这个环相关的边删掉。剩下的即是一颗森林。求出每棵树的方案数将其直接累乘即可。</p><p>如果图是树的情况下怎么做？发现如果在一颗树找出若干个不相交的链，每个链的首尾连一条边，那么这个图一定是仙人掌；反之，最后加完边的图，加上的每一条边都对应一条链，每一条边也只会属于至多一个环即至多属于一个树链加上加上的边。所以问题转化成在一棵树中找出若干不相交的链的方案数。 这样还是不是特别好做，如果我们把那些没有在任何一个环的树边看成在他与他自己的环里，那么问题就转化成了 <strong>用若干条不相交的链覆盖整颗树的方案数</strong> 。</p><p>考虑树形dp。令 $dp_u​$ 为 $u​$ 的子树中所有边加上他到父亲的一条边的方案数。令 $f_x​$ 表示一个点的度数为 $x​$，把所有与它相连的边用长度不超过 $2​$ 的链全部覆盖的方案数，则 $dp_u = f_{deg_u}\Pi _vdp_{v}​$ 。其中 $v​$ 是 $u​$ 的子节点，$deg_u​$ 是 $u​$ 的度数。</p><p>$f$ 考虑用递推求。每次新加入一条边，他可以自己是一条链，也可以与之前的一条匹配成一条链。易得 $f_n = f_{n-1}+(n-1)\cdot f_{n-2}$ 并且 $f_0 = f_1= 1$ 。</p><p>复杂度 $O(n+m)$ </p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Author: AcFunction</span></span><br><span class="line"><span class="hljs-comment"> * Date:   2019-05-20 22:37:18</span></span><br><span class="line"><span class="hljs-comment"> * Email:  3486942970@qq.com</span></span><br><span class="line"><span class="hljs-comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">500500</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">1000010</span>;  </span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">998244353</span>; </span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> T;</span><br><span class="line"><span class="hljs-keyword">int</span> n, m;</span><br><span class="line"><span class="hljs-keyword">int</span> vis[N], C[N], fa[N], dep[N];</span><br><span class="line"><span class="hljs-keyword">int</span> dp[N], x[N];  </span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span> &#123;</span></span><br><span class="line">  <span class="hljs-keyword">int</span> u, v; </span><br><span class="line">&#125; E[M]; </span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span> &#123;</span></span><br><span class="line">  <span class="hljs-keyword">int</span> v; edge *next; </span><br><span class="line">&#125; pool[M * <span class="hljs-number">2</span>], *h1[N], *h2[N], *h3[N], *cur = pool; </span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// h1 : pre ; h2 : tree</span></span><br><span class="line"><span class="hljs-comment">// h3 : delete circle</span></span><br><span class="line"><span class="hljs-comment">// </span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> (x += y) &gt;= mod ? x - mod : x; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">prework</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  x[<span class="hljs-number">0</span>] = x[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>; </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= <span class="hljs-number">500000</span>; i++) </span><br><span class="line">    x[i] = add(x[i - <span class="hljs-number">1</span>], <span class="hljs-number">1l</span>l * (i - <span class="hljs-number">1</span>) * x[i - <span class="hljs-number">2</span>] % mod); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ade1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">  edge *p = cur++; p-&gt;v = v; </span><br><span class="line">  p-&gt;next = h1[u], h1[u] = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ade2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">  edge *p = cur++; p-&gt;v = v; </span><br><span class="line">  p-&gt;next = h2[u], h2[u] = p; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ade3</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">  edge *p = cur++; p-&gt;v = v; </span><br><span class="line">  p-&gt;next = h3[u], h3[u] = p; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">GetTree</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> pre)</span> </span>&#123;</span><br><span class="line">  vis[u] = <span class="hljs-number">1</span>; </span><br><span class="line">  <span class="hljs-keyword">for</span>(edge *p = h1[u]; p; p = p-&gt;next) &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> v = p-&gt;v; <span class="hljs-keyword">if</span>(v == pre) <span class="hljs-keyword">continue</span> ; </span><br><span class="line">    <span class="hljs-keyword">if</span>(vis[v]) <span class="hljs-keyword">continue</span> ; </span><br><span class="line">    fa[v] = u; dep[v] = dep[u] + <span class="hljs-number">1</span>; </span><br><span class="line">    GetTree(v, u); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">GetC</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> pre)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">for</span>(edge *p = h2[u]; p; p = p-&gt;next) &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> v = p-&gt;v; <span class="hljs-keyword">if</span>(v == pre) <span class="hljs-keyword">continue</span> ;</span><br><span class="line">    GetC(v, u); C[u] += C[v];  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> pre)</span> </span>&#123;</span><br><span class="line">  vis[u] = <span class="hljs-number">1</span>; dp[u] = <span class="hljs-number">1</span>; <span class="hljs-keyword">int</span> cl = <span class="hljs-number">0</span>; </span><br><span class="line">  <span class="hljs-keyword">for</span>(edge *p = h3[u]; p; p = p-&gt;next) &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> v = p-&gt;v; <span class="hljs-keyword">if</span>(v == pre) <span class="hljs-keyword">continue</span> ; </span><br><span class="line">    <span class="hljs-keyword">if</span>(vis[v]) <span class="hljs-keyword">continue</span> ; </span><br><span class="line">    solve(v, u); </span><br><span class="line">    dp[u] = <span class="hljs-number">1l</span>l * dp[u] * dp[v] % mod; ++cl; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">if</span>(u == pre) dp[u] = <span class="hljs-number">1l</span>l * dp[u] * x[cl] % mod;</span><br><span class="line">  <span class="hljs-keyword">else</span> dp[u] = <span class="hljs-number">1l</span>l * dp[u] * x[cl + <span class="hljs-number">1</span>] % mod;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  prework(); </span><br><span class="line">  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;T); </span><br><span class="line">  <span class="hljs-keyword">while</span>(T--) &#123;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>, &amp;n, &amp;m); </span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      vis[i] = C[i] = dp[i] = dep[i] = <span class="hljs-number">0</span>; </span><br><span class="line">      h1[i] = h2[i] = h3[i] = <span class="hljs-number">0</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    cur = pool; </span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">      <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>, &amp;E[i].u, &amp;E[i].v);</span><br><span class="line">      ade1(E[i].u, E[i].v), ade1(E[i].v, E[i].u);  </span><br><span class="line">    &#125;</span><br><span class="line">    dep[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>; </span><br><span class="line">    GetTree(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>); </span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">      <span class="hljs-keyword">if</span>(dep[E[i].u] &lt; dep[E[i].v]) </span><br><span class="line">        swap(E[i].u, E[i].v); </span><br><span class="line">      <span class="hljs-keyword">int</span> u = E[i].u, v = E[i].v; </span><br><span class="line">      <span class="hljs-keyword">if</span>(fa[u] == v || fa[v] == u) &#123;</span><br><span class="line">        ade2(u, v), ade2(v, u); </span><br><span class="line">      &#125; </span><br><span class="line">      <span class="hljs-keyword">else</span> C[u]++, C[v]--; </span><br><span class="line">    &#125;</span><br><span class="line">    GetC(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>); </span><br><span class="line">    <span class="hljs-keyword">bool</span> isc = <span class="hljs-number">1</span>; </span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) </span><br><span class="line">      <span class="hljs-keyword">if</span>(C[i] &gt;= <span class="hljs-number">2</span>) &#123;</span><br><span class="line">        isc = <span class="hljs-number">0</span>; <span class="hljs-keyword">break</span> ; </span><br><span class="line">      &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span>(isc == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">      <span class="hljs-built_in">puts</span>(<span class="hljs-string">"0"</span>); <span class="hljs-keyword">continue</span> ; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)</span><br><span class="line">      vis[i] = <span class="hljs-number">0</span>; </span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">      <span class="hljs-keyword">int</span> u = E[i].u, v = E[i].v; </span><br><span class="line">      <span class="hljs-keyword">if</span>(fa[u] == v || fa[v] == u)</span><br><span class="line">        <span class="hljs-keyword">if</span>(!C[u]) ade3(u, v), ade3(v, u); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">1</span>; </span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      <span class="hljs-keyword">if</span>(!vis[i]) &#123;</span><br><span class="line">        solve(i, i); </span><br><span class="line">        ans = <span class="hljs-number">1l</span>l * ans * dp[i] % mod; </span><br><span class="line">      &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, ans); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 仙人掌 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU6061 RXD and functions</title>
      <link href="/2019/05/27/hdu6061/"/>
      <url>/2019/05/27/hdu6061/</url>
      
        <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>已知 $f(x) = \sum\limits_{i=0}^{n}c_ix^i$ ，求 $g(x) = f(x+a) = \sum\limits_{i=0}^{n} c_i(x+a)^i$ 的各项系数。</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p><img src="https://i.loli.net/2019/05/28/5ced3ad24549514149.png" alt="hdu6061"></p><p>（写了半天的公式忘保存还好我留了一张图片）</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = (<span class="hljs-keyword">int</span>)<span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>; </span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">998244353</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> G = <span class="hljs-number">3</span>;  </span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> n, c[N], rev[<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">21</span>], fac[N]; </span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fpw</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> k, <span class="hljs-keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">int</span> ret = <span class="hljs-number">1</span>; </span><br><span class="line">  <span class="hljs-keyword">while</span>(k) &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(k &amp; <span class="hljs-number">1</span>) ret = <span class="hljs-number">1l</span>l * ret * x % p;</span><br><span class="line">    x = <span class="hljs-number">1l</span>l * x * x % p; k &gt;&gt;= <span class="hljs-number">1</span>;  </span><br><span class="line">  &#125; <span class="hljs-keyword">return</span> ret; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> (x += y) &gt;= mod ? x - mod : x; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">NTT</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a, <span class="hljs-keyword">int</span> L, <span class="hljs-keyword">int</span> op)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; L; i++) </span><br><span class="line">    <span class="hljs-keyword">if</span>(i &lt; rev[i]) swap(a[i], a[rev[i]]); </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, l = <span class="hljs-number">0</span>; i &lt; L; i &lt;&lt;= <span class="hljs-number">1</span>, l++) &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> w = fpw(G, (mod - <span class="hljs-number">1</span>) &gt;&gt; (l + <span class="hljs-number">1</span>), mod); </span><br><span class="line">    <span class="hljs-keyword">if</span>(op == <span class="hljs-number">-1</span>) w = fpw(w, mod - <span class="hljs-number">2</span>, mod); </span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; L; j += (i &lt;&lt; <span class="hljs-number">1</span>)) &#123;</span><br><span class="line">      <span class="hljs-keyword">int</span> wn = <span class="hljs-number">1</span>; </span><br><span class="line">      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = j; k &lt; i + j; k++) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> t = (<span class="hljs-number">1l</span>l * wn * a[i + k] % mod); </span><br><span class="line">        a[i + k] = add(a[k], mod - t); </span><br><span class="line">        a[k] = add(a[k], t); </span><br><span class="line">        wn = (<span class="hljs-number">1l</span>l * wn * w) % mod;  </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">if</span>(op == <span class="hljs-number">-1</span>) &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> invL = fpw(L, mod - <span class="hljs-number">2</span>, mod); </span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; L; i++) </span><br><span class="line">      a[i] = (<span class="hljs-number">1l</span>l * a[i] * invL % mod); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> f[<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">21</span>], g[<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">21</span>]; </span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  fac[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= (<span class="hljs-keyword">int</span>)<span class="hljs-number">1e5</span>; i++) </span><br><span class="line">    fac[i] = <span class="hljs-number">1l</span>l * fac[i - <span class="hljs-number">1</span>] * i % mod; </span><br><span class="line">  <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;n) != EOF) &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> A = <span class="hljs-number">0</span>; </span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i++) </span><br><span class="line">      <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;c[i]); </span><br><span class="line">    <span class="hljs-keyword">int</span> L = <span class="hljs-number">1</span>, l = <span class="hljs-number">0</span>; </span><br><span class="line">    <span class="hljs-keyword">while</span>(L &lt;= <span class="hljs-number">2</span> * (n + <span class="hljs-number">1</span>)) L &lt;&lt;= <span class="hljs-number">1</span>, l++; </span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; L; i++)</span><br><span class="line">      rev[i] = ((rev[i &gt;&gt; <span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">1</span>) | (i &amp; <span class="hljs-number">1</span>) &lt;&lt; (l - <span class="hljs-number">1</span>)); </span><br><span class="line">    <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>) * L); </span><br><span class="line">    <span class="hljs-built_in">memset</span>(g, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>) * L); </span><br><span class="line">    <span class="hljs-keyword">int</span> m; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;m); </span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">      <span class="hljs-keyword">int</span> t; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;t); A -= t; A %= mod; </span><br><span class="line">    &#125; A = (A + mod) % mod; </span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i++) </span><br><span class="line">      f[i] = <span class="hljs-number">1l</span>l * c[i] * fac[i] % mod, </span><br><span class="line">      g[n - i] = <span class="hljs-number">1l</span>l * fpw(A, i, mod) * fpw(fac[i], mod - <span class="hljs-number">2</span>, mod) % mod;</span><br><span class="line">    NTT(f, L, <span class="hljs-number">1</span>), NTT(g, L, <span class="hljs-number">1</span>); </span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; L; i++)</span><br><span class="line">      f[i] = <span class="hljs-number">1l</span>l * f[i] * g[i] % mod; </span><br><span class="line">    NTT(f, L, <span class="hljs-number">-1</span>); </span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = n; i &lt;= <span class="hljs-number">2</span> * n; i++) &#123;</span><br><span class="line">      <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>, <span class="hljs-number">1l</span>l * f[i] * fpw(fac[i - n], mod - <span class="hljs-number">2</span>, mod) % mod); </span><br><span class="line">    &#125; <span class="hljs-built_in">putchar</span>(<span class="hljs-string">'\n'</span>); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NTT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些 dp 的优化方式</title>
      <link href="/2019/05/14/%E4%B8%80%E4%BA%9B-dp-%E7%9A%84%E4%BC%98%E5%8C%96%E6%96%B9%E5%BC%8F/"/>
      <url>/2019/05/14/%E4%B8%80%E4%BA%9B-dp-%E7%9A%84%E4%BC%98%E5%8C%96%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>简单总结了一下</p><a id="more"></a><h1 id="决策单调性"><a href="#决策单调性" class="headerlink" title="决策单调性"></a>决策单调性</h1><p>一些时候 dp 转移方程是这个样子 </p><script type="math/tex; mode=display">dp_i = \min\limits_{0 \leq j \leq i - 1} (dp_j + w(i, j))</script><p>这个时候暴力是 $O(n^2)$ 的。如果 $w(i, j)$ 满足一些特殊的性质，那么就可以优化他了。</p><p><strong>决策单调性：</strong></p><p> 对于 $i$ ，他的决策 $opt(i)$ 就是所有的 $j$ 中使得转移式子达到最值的那个 $j$ 。</p><p>如果对于任意的 $i, j$ 使得 $i \leq j$ 都有 $opt(i) \leq opt(j)$ 那么就有决策单调性。 它的用处放到后面。</p><p><strong>四边形不等式：</strong> 如果对于任意的 $1 \leq a \leq b \leq c \leq d \leq n$ 都有 $w(a, c) + w(b, d) \leq w(a, d) + w(b, c)$ ，那么 $w$ 就满足四边形不等式。</p><p>一个重要的事情是：<strong>如果 $w$ 满足四边形不等式，那么就有决策单调性</strong> </p><p>一个好理解的证明方式：如果没有决策单调性，那么我们可以找到不降的四个数 $a, b, c, d$ ，这四个点满足 $a = opt(d), b = opt(c)$ 即 $a, b$ 分别是 $c, d$ 的决策点。由于不满足决策单调性所以肯定能找到。此时 $dp_c + dp_d = dp_i + dp_j + w(a, d) + w(b, c)$ 。如果我们把决策点互换，即让 $b = opt(d), a = opt(c)$ ，此时 $dp_c + dp_d = dp_i + dp_j + w(a, c) + w(b, d)$ 。由于满足四边形不等式，下面的总和根据定义一定 $ \leq $ 上面的总和。就能推出决策点交换后 $c, d$ 至少有一个要更优。所以他是满足决策单调性的。（不是很严谨）</p><p>如果看到一个题，dp式子长成上面那个样子，没有什么很好的办法搞，就要考虑决策单调性。一般都是满足四边形不等式，不放心就证一下。</p><p>有了决策单调性，然后该如何优化？</p><p>再先看一个问题：给定一个 $n * n$ 表格，告诉你每行的最小值所在的列是单调不减的，找出每行每列的最小值及其所在的位置。</p><p>对于这个问题，我们可以利用<strong>分治</strong>来解决。用 <code>solve(l, r, L, R)</code> 来求解行在 $[l, r]$ 中列在 $[L, R]$ 中的子问题。每次我找到最中间的行 $mid$，暴力从 L 到 R for 找出最小值的列 $pos$，然后由于最小值位置不减，分成 <code>solve(l, mid - 1, L, pos)</code> 和 <code>solve(mid + 1, r, pos, R)</code> 继续求解。这样做的复杂度是 $O(n \log n)$ 。</p><p>所以这和决策单调性有什么关系？如果你把最小值所在的列看成决策点所在的位置，那么是否就成功的转化成了这个问题？所以我们找出了一种 $O(n \log n)$ 的方法。代码也十分好写。</p><p>另外一种处理决策单调性的方法在例题2中出现。</p><p><strong>[例题1] CF 321E </strong> <a href="https://www.luogu.org/problemnew/show/CF321E" target="_blank" rel="noopener">题面</a> </p><p>设 $dp[i][k]$ 表示前 $i$ 个人分了 $k$ 段的最小值。</p><p>先可以写出状态转移方程</p><script type="math/tex; mode=display">dp[i][k] = \min\limits_{0 \leq j \leq i - 1} (dp[j][k - 1] + w(i, j))</script><p>其中 $w(i, j)$ 表示把 $[j + 1, i]$ 中所有人分成一组的代价。就是一个矩阵的元素和。</p><p>由于它是矩阵的元素和，所以很显然满足四边形不等式。于是就有决策单调性。</p><p>但是有一个 $k$  的限制。这又应该如何处理？这里可以 <strong>按层分治</strong> 。可以发现，如果有了所有的 $dp[i][k]$ ，那么通过上面的方法就可以求出所有的 $dp[i][k + 1]$。于是，预处理 $k = 1$ 的情况，然后枚举 $k$，每次分治求出下一层的信息。 复杂度 $O(n k \log n)$ 。</p><p><strong>[例题2] NOI2009 诗人小G</strong> <a href="https://www.luogu.org/problemnew/show/P1912" target="_blank" rel="noopener">题面</a> </p><p>方程很显然。设 $dp_i$ 表示前 $i$ 句诗的最小代价。</p><script type="math/tex; mode=display">dp_i = \min\limits_{0 \leq j \leq i - 1} (dp_j + w(i, j))</script><p>$w(i, j) = (sum_i - sum_j - L - 1) ^ P$ (这里的 $sum_i$ 是带上空格之后的，最后的减一是末位不能加空格)。</p><p>可以证明 $w$ 满足四边形不等式。分治的做法在这里行不通了。为什么之前可以？因为他是按<strong>层</strong>分治，而这里没有这个条件，你就没法及时的得到信息了。你在找最小值的时候这个地方的数可能根本没有填上。我们考虑寻找另外的方法。</p><p>当我们一个 dp 值都没有的时候，考虑目前的 $opt(i)$ 一定是：</p><p><code>00000000000000000000000000000000000000000000000000000000000000000000</code> </p><p>当我们有了第一个 $dp$ 值，那么可能有一些 opt 产生变化。由于决策单调性，所以一定变化了一个后缀比如：</p><p><code>00000000000000000000011111111111111111111111111111111111111111111111</code> </p><p>然后有了第二个 $dp$ 值，会有一些 opt 变成 2 。比如</p><p><code>00000000000000000000011111111111111111111111111111111222222222222222</code>   </p><p>如此类推，我们试图从中找出一些性质。显然，每个决策形成一个区间。</p><p>我们考虑用一个栈来维护决策。用 $l_i$ 和 $r_i$ 来表示 $i$ 这个决策所形成的的区间的左右端点。</p><p>每次加入一个新的决策 $i$，与栈顶的决策点 $t$ 比较。有两种情况：</p><ol><li>如果在 $l_t$ 处 $t$ 的转移没有 $i$ 的优，那么这个决策整个就没有用了。即 $i$ 会把 $t$ 这一整段区间都覆盖住。此时把栈顶弹掉，继续。</li><li>不满足上述情况，那么 $i$ 的覆盖终止于 $t$ 。此时由于决策单调性，直接二分转折点 $pos$（即这个区间在转折点前是 $t$ ，后半部分是  $i$ ）。让 $r[t] = pos - 1, l[i] = pos, r[i] = n$ </li></ol><p>这样做的复杂度是 $O(n \log n)$</p><p>这一部分的代码还有一些细节问题，我直接贴出</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 注意这里的 w(i, j) 表示的是 dp[j] + 文中的 w(i, j) </span></span><br><span class="line"><span class="hljs-keyword">int</span> h = <span class="hljs-number">1</span>, t = <span class="hljs-number">0</span>; l[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>, r[<span class="hljs-number">0</span>] = n;</span><br><span class="line">Q[++t] = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 要把 0 先放进去 </span></span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">  <span class="hljs-keyword">while</span>(h &lt;= t &amp;&amp; r[Q[h]] &lt; i) h++; <span class="hljs-comment">// 把栈底的没用的元素弹掉。</span></span><br><span class="line">  dp[i] = w(i, Q[h]); pre[i] = Q[h]; <span class="hljs-comment">// 更新 dp 以及 i 处的决策点</span></span><br><span class="line">  <span class="hljs-keyword">if</span>(w(n, Q[t]) &lt; w(n, i)) <span class="hljs-keyword">continue</span> ; <span class="hljs-comment">// 根本不会覆盖住任何一个区间直接弹掉</span></span><br><span class="line">  <span class="hljs-keyword">while</span>(h &lt;= t &amp;&amp; w(l[Q[t]], Q[t]) &gt; w(l[Q[t]], i)) t--; <span class="hljs-comment">// 弹掉没用的</span></span><br><span class="line">  <span class="hljs-keyword">int</span> lp = l[Q[t]], rp = n, pos = n; </span><br><span class="line">  <span class="hljs-keyword">while</span>(lp &lt;= rp) &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> mid = (lp + rp) &gt;&gt; <span class="hljs-number">1</span>; </span><br><span class="line">    <span class="hljs-keyword">if</span>(w(mid, Q[t]) &gt; w(mid, i)) &#123;</span><br><span class="line">      pos = mid, rp = mid - <span class="hljs-number">1</span>; </span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> lp = mid + <span class="hljs-number">1</span>; </span><br><span class="line">  &#125; <span class="hljs-comment">// 二分 pos </span></span><br><span class="line">  l[i] = pos; r[i] = n; </span><br><span class="line">  r[Q[t]] = pos - <span class="hljs-number">1</span>; Q[++t] = i; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="斜率优化"><a href="#斜率优化" class="headerlink" title="斜率优化"></a>斜率优化</h1><p>转移方程形如 $dp_i = \min(a[j] + b[j] + c[i] \cdot d[j])$ 。$a[i]$ 表示和 $i$ 相关的部分，其他类似。 </p><p>直接用题目讲</p><p><strong>[例题3] HNOI2008 玩具装箱TOY </strong> <a href="https://www.luogu.org/problemnew/show/P3195" target="_blank" rel="noopener">题面</a></p><p>令$dp[i]$为前$i$个装箱的最小花费。<br>转移方程如下：</p><script type="math/tex; mode=display">dp[i]=\min\limits_{0 \leq j < i} \{ dp[j]+( \sum \limits_{k = j + 1}^{i}{C_k} + i - j - 1 - L) ^ 2\}</script><p>用$sum[i]$表示前$i$个容器的长度之和（即$C$的前缀和），方程简化为：</p><script type="math/tex; mode=display">dp[i]=\min\limits_{0 \leq j < i} \{ dp[j]+( sum[i]-sum[j] + i - j - 1 - L) ^ 2\}</script><p>又令$f[i]$为$sum[i]+i$，继续简化方程为：</p><script type="math/tex; mode=display">dp[i]=\min\limits_{0 \leq j < i} \{ dp[j]+( f[i]-f[j] - 1 - L) ^ 2\}</script><p>暴力dp是$O(n^2)$，考虑优化。如何优化，就是用前面所提到的<strong>斜率优化</strong>。这玩意到底是什么？我们先来继续对状态转移方程进行进一步的推导。</p><p>对于每个$dp[i]$可以知道都是由一个$j_0$推过来的。这个$j_0$对于当前的$i$是最优的决策。假设现在有两个决策$j_1,j_2 (1 \leq j_1 &lt; j_2 &lt; i)$，且决策$j_2$优于$j_1$，则有：</p><script type="math/tex; mode=display">dp[j_1]+( f[i]-f[j_1] - 1 - L) ^ 2 \geq dp[j_2]+( f[i]-f[j_2] - 1 - L) ^ 2</script><p>拆开可得：</p><script type="math/tex; mode=display">dp[j_1]+f[i]^2-2f[i](f[j_1]+1+L)+(f[j_1]+L+1)^2 \geq dp[j_2]+f[i]^2-2f[i](f[j_2]+1+L)+(f[j_2]+L+1)^2</script><p>化简可得：</p><script type="math/tex; mode=display">2f[i](f[j_2] + 1 + L)-2f[i](f[j_1] + 1 + L) \geq dp[j_2]+(f[j_2]+1+L)^2 - (dp[j_1]+(f[j_1]+1+L)^2)</script><p>即：</p><script type="math/tex; mode=display">2f[i] \geq \frac{dp[j_2]+(f[j_2]+1+L)^2 - (dp[j_1]+(f[j_1]+1+L)^2)}{f[j_2]-f[j_1]}</script><p>令$g[i] = (f[i]+L+1)^2$，可得：</p><script type="math/tex; mode=display">2f[i] \geq \frac{dp[j_2]+g[j_2] - (dp[j_1]+g[j_1])}{f[j_2]-f[j_1]}</script><p>也就是说，若$j1,j2$满足上面这个式子，那么$j2$一定比$j1$优。</p><p>为什么叫斜率优化？因为上面这个式子可以把看作$dp[i]+g[i]$看做纵坐标，$f[i]$看做横坐标，上面的等式右侧就相当于 $\frac{\Delta y}{\Delta x}=k$ 也就是一个一次函数的斜率。当这个斜率$k \leq 2f[i]$则$j_2$优于$j_1$。</p><p>假如我们有三个决策$j_1,j_2,j_3$（如下图）<br><img src="https://cdn.luogu.org/upload/pic/20775.png" alt=""></p><p>容易证明：$j_2$不可能是最优的。<br>这样一来，每两个决策间的斜率便是<strong>单调上升的</strong>。</p><p>所以有两种做法：</p><ul><li>对于$dp[i]$，有了斜率单调上升这个条件，就可以去二分最优的决策点（也就是斜率小于$2f[i]$的）。复杂度$O(n \log n)$。</li><li>又因为$f[i]$是单调递增的，可以用单调队列来维护。具体实现就是，把决策放进一个单调队列里，如果队首和当前的$i$间的斜率 $&lt;f[i]$，就把队首删掉（即h++）。对于队尾，就每次把加入$i$后不满足斜率单调上升的队尾全部删掉（即t—），最后把$i$放进单调队列就好了。</li></ul><h1 id="带权二分"><a href="#带权二分" class="headerlink" title="带权二分"></a>带权二分</h1><p>先挖个坑。</p>]]></content>
      
      
      <categories>
          
          <category> 算法笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 决策单调性 </tag>
            
            <tag> 斜率优化 </tag>
            
            <tag> 带权二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BZOJ4199 「NOI2015」品酒大会</title>
      <link href="/2019/05/03/BZOJ4199/"/>
      <url>/2019/05/03/BZOJ4199/</url>
      
        <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>给定字符串 $s$ ，和每个位置上的权值 $a_i$。对于每一个 $i \in [0, n)$ 求出有多少对 $(i, j)$  满足 $LCP(sa_i, sa_j) \ge i$ 以及在这些 $(i, j)$ 中 $a_i \times a_j$  最大是多少。$sa_i$ 表示从 $i$ 开始的后缀。</p><a id="more"></a> <h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>将原串反过来建 SAM 求得后缀树。考虑后缀树上一个节点 $u$ ，这个节点代表的子串是他的任意后代的后缀 。所以每两个在其子树中的点都会对第一问的答案造成贡献。只需要维护 right 集合的大小即可。</p><p>对于第二问，乘积最大有两种可能：一个是最大的两个相乘，一个是最小的两个相乘（负负得正）。所以只需要在 dfs 的时候顺便维护子树中的最大值和最小值，与子树合并的时候维护处答案。</p><p>最后再从后往前更新一遍答案。因为小的肯定包含在大的中，对第一问做加法，第二问取 max</p><p>具体看代码</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Author: AcFunction</span></span><br><span class="line"><span class="hljs-comment"> * Date:   2019-05-02 09:10:52</span></span><br><span class="line"><span class="hljs-comment"> * Email:  3486942970@qq.com</span></span><br><span class="line"><span class="hljs-comment">**/</span></span><br><span class="line"> </span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span></span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = (<span class="hljs-keyword">int</span>)<span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>; </span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = (<span class="hljs-keyword">int</span>)<span class="hljs-number">1e9</span>; </span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">int</span> n, siz[N], o[N], w[N], mx[N], mn[N], dep[N]; </span><br><span class="line"><span class="hljs-keyword">char</span> s[N];</span><br><span class="line">ll ans1[N], ans2[N]; </span><br><span class="line"> </span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sam</span> &#123;</span></span><br><span class="line">  <span class="hljs-keyword">int</span> ch[<span class="hljs-number">26</span>], len, fa; </span><br><span class="line">&#125; a[N]; </span><br><span class="line"> </span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span> &#123;</span></span><br><span class="line">  <span class="hljs-keyword">int</span> v; edge *next; </span><br><span class="line">&#125; pool[N * <span class="hljs-number">2</span>], *h[N], *cur = pool; </span><br><span class="line"> </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">  edge *p = cur++; p-&gt;v = v; </span><br><span class="line">  p-&gt;next = h[u], h[u] = p; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">int</span> last = <span class="hljs-number">1</span>, tot = <span class="hljs-number">1</span>; </span><br><span class="line"> </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> c, <span class="hljs-keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">int</span> p = last, tp = ++tot; last = tp; w[tp] = o[x]; </span><br><span class="line">  a[tp].len = a[p].len + <span class="hljs-number">1</span>; siz[tot] = <span class="hljs-number">1</span>; </span><br><span class="line">  <span class="hljs-keyword">for</span>(; p &amp;&amp; !a[p].ch[c]; p = a[p].fa) </span><br><span class="line">    a[p].ch[c] = tp; </span><br><span class="line">  <span class="hljs-keyword">if</span>(!p) &#123;</span><br><span class="line">    a[tp].fa = <span class="hljs-number">1</span>; </span><br><span class="line">  &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> q = a[p].ch[c]; </span><br><span class="line">    <span class="hljs-keyword">if</span>(a[q].len == a[p].len + <span class="hljs-number">1</span>) &#123;</span><br><span class="line">      a[tp].fa = q; </span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">int</span> cl = ++tot; a[cl] = a[q]; </span><br><span class="line">      a[cl].len = a[p].len + <span class="hljs-number">1</span>; </span><br><span class="line">      a[q].fa = a[tp].fa = cl; </span><br><span class="line">      <span class="hljs-keyword">for</span>(; p &amp;&amp; a[p].ch[c] == q; p = a[p].fa)</span><br><span class="line">        a[p].ch[c] = cl; </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> pre)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">if</span>(siz[u] == <span class="hljs-number">1</span>) &#123;</span><br><span class="line">    mx[u] = mn[u] = w[u]; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">for</span>(edge *p = h[u]; p; p = p-&gt;next) &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> v = p-&gt;v; <span class="hljs-keyword">if</span>(v == pre) <span class="hljs-keyword">continue</span> ; </span><br><span class="line">    dep[v] = dep[u] + <span class="hljs-number">1</span>; </span><br><span class="line">    dfs(v, u); </span><br><span class="line">    <span class="hljs-keyword">if</span>(mx[u] != INF &amp;&amp; mn[u] != INF)</span><br><span class="line">      ans2[a[u].len] = max(ans2[a[u].len], max(<span class="hljs-number">1l</span>l * mx[u] * mx[v], <span class="hljs-number">1l</span>l * mn[u] * mn[v])); </span><br><span class="line">    ans1[a[u].len] += <span class="hljs-number">1l</span>l * siz[u] * siz[v]; </span><br><span class="line">    siz[u] += siz[v]; </span><br><span class="line">    mx[u] = max(mx[u], mx[v]); </span><br><span class="line">    mn[u] = min(mn[u], mn[v]); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;n); <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>, s + <span class="hljs-number">1</span>); </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i++) ans1[i] = <span class="hljs-number">0</span>, ans2[i] = -(ll)<span class="hljs-number">9e18</span>; </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;o[i]); </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = n; i &gt;= <span class="hljs-number">1</span>; i--) add(s[i] - <span class="hljs-string">'a'</span>, i); </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= tot; i++) </span><br><span class="line">    mx[i] = -INF, mn[i] = INF; </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= tot; i++) addedge(a[i].fa, i); </span><br><span class="line">  dep[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>, dfs(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) </span><br><span class="line">    ans1[i] += ans1[i + <span class="hljs-number">1</span>], </span><br><span class="line">    ans2[i] = max(ans2[i], ans2[i + <span class="hljs-number">1</span>]); </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(ans1[i] == <span class="hljs-number">0</span>) ans2[i] = <span class="hljs-number">0</span>; </span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld %lld\n"</span>, ans1[i], ans2[i]); </span><br><span class="line">  &#125; </span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后缀自动机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Do geese see god?</title>
      <link href="/2019/04/30/Do-geese-see-god/"/>
      <url>/2019/04/30/Do-geese-see-god/</url>
      
        <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>给一个字符串 $s$ 和一个整数 $k$ 。求所有最短的满足 $s$ 是他的一个子序列并且是一个回文串的字符串中字典序第 $k$ 大的。</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>令 $f[i][j]$ 表示 $s$ 中 $i$ 到 $j$ 所构成的字符串至少还要再添加几个字符使得其变成回文串。</p><p>令 $g[i][j]$ 表示满足最短的条件的前提下的添加字符的方案数。</p><p>这两个数组都可以通过简单的 $O(n^2)$ 的 dp 完成。</p><p>接下来便是求第 $k$ 大的字符串。如果 $k &gt; g[1][n]$ 直接输出无解。接下来处理有解的情况。</p><p>用 <code>solve(l, r, k)</code> 表示从 $s_l$ 到 $s_r$ 构成的字符串满足添加字符最少的前提下所构成的字典序第 $k$  大的回文串。</p><ul><li><p>$l=r$  时，直接返回 $s_l$ </p></li><li><p>$s_l = s_r$ 时，返回 <code>s[l] + solve(l + 1, r - 1, k) + s[r]</code> （这里加法 = 按顺序拼接 = string 加法）</p></li><li><p>$s_l \not= s_r$ 时，我们有两种方法</p><ol><li>把字符串变成  <code>s[l] + solve(l + 1, r) + s[l]</code>  即在后面添加一个 $s_l$ 并且把中间变成回文</li><li>把字符串变成  <code>s[r] + solve(l, r - 1) + s[r]</code>  即在前面添加一个 $s_r$ 并且把中间变成回文</li></ol><p>此时，我们显然会贪心的走字典序小的那一边，这取决于 $s_l$ 和 $s_r$ 的大小。</p><p>不妨设 $s_l &lt; s_r$ 那么如果 $g[l+1][r] &gt;= k$ 我们就直接往第一种情况递归。否则把  $k$ 减掉 $g[l+1][r]$ 放到第二种情况递归。对于 $s_l &gt; s_r$   也是同理。  </p></li></ul><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">2005</span>; </span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = (<span class="hljs-keyword">int</span>)<span class="hljs-number">1e9</span>; </span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> n; ll k; </span><br><span class="line"><span class="hljs-keyword">char</span> s[N]; <span class="hljs-keyword">int</span> f[N][N]; ll g[N][N];  </span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, ll k)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">if</span>(l &gt; r) <span class="hljs-keyword">return</span> <span class="hljs-string">""</span>; </span><br><span class="line">  <span class="hljs-keyword">if</span>(l == r) &#123; <span class="hljs-built_in">string</span> t = <span class="hljs-string">""</span>; t += s[l]; <span class="hljs-keyword">return</span> t; &#125;</span><br><span class="line">  <span class="hljs-keyword">if</span>(s[l] == s[r]) </span><br><span class="line">    <span class="hljs-keyword">return</span> s[l] + solve(l + <span class="hljs-number">1</span>, r - <span class="hljs-number">1</span>, k) + s[r]; </span><br><span class="line">  <span class="hljs-keyword">if</span>(f[l + <span class="hljs-number">1</span>][r] &lt; f[l][r - <span class="hljs-number">1</span>]) <span class="hljs-keyword">return</span> s[l] + solve(l + <span class="hljs-number">1</span>, r, k) + s[l]; </span><br><span class="line">  <span class="hljs-keyword">if</span>(f[l + <span class="hljs-number">1</span>][r] &gt; f[l][r - <span class="hljs-number">1</span>]) <span class="hljs-keyword">return</span> s[r] + solve(l, r - <span class="hljs-number">1</span>, k) + s[r]; </span><br><span class="line">  <span class="hljs-keyword">if</span>(s[l] &lt; s[r]) &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(g[l + <span class="hljs-number">1</span>][r] &gt;= k) </span><br><span class="line">      <span class="hljs-keyword">return</span> s[l] + solve(l + <span class="hljs-number">1</span>, r, k) + s[l];</span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> s[r] + solve(l, r - <span class="hljs-number">1</span>, k - g[l + <span class="hljs-number">1</span>][r]) + s[r]; </span><br><span class="line">  &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(g[l][r - <span class="hljs-number">1</span>] &gt;= k) </span><br><span class="line">      <span class="hljs-keyword">return</span> s[r] + solve(l, r - <span class="hljs-number">1</span>, k) + s[r]; </span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> s[l] + solve(l + <span class="hljs-number">1</span>, r, k - g[l][r - <span class="hljs-number">1</span>]) + s[l]; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s %lld"</span>, s + <span class="hljs-number">1</span>, &amp;k); n = <span class="hljs-built_in">strlen</span>(s + <span class="hljs-number">1</span>);</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) f[i][i] = <span class="hljs-number">0</span>, g[i][i] = <span class="hljs-number">1</span>; </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> l = <span class="hljs-number">2</span>; l &lt;= n; l++) &#123;</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - l + <span class="hljs-number">1</span>; i++) &#123;</span><br><span class="line">      <span class="hljs-keyword">if</span>(l == <span class="hljs-number">2</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(s[i] == s[i + <span class="hljs-number">1</span>]) &#123; f[i][i + <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>, g[i][i + <span class="hljs-number">1</span>] = <span class="hljs-number">1</span>; &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> &#123; f[i][i + <span class="hljs-number">1</span>] = <span class="hljs-number">1</span>; g[i][i + <span class="hljs-number">1</span>] = <span class="hljs-number">2</span>; &#125;</span><br><span class="line">        <span class="hljs-keyword">continue</span> ; </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="hljs-keyword">int</span> L = i, R = (i + l - <span class="hljs-number">1</span>); </span><br><span class="line">      <span class="hljs-keyword">int</span> mn = INF; </span><br><span class="line">      <span class="hljs-keyword">if</span>(s[L] == s[R]) &#123;</span><br><span class="line">        f[L][R] = f[L + <span class="hljs-number">1</span>][R - <span class="hljs-number">1</span>];</span><br><span class="line">        g[L][R] = g[L + <span class="hljs-number">1</span>][R - <span class="hljs-number">1</span>]; </span><br><span class="line">        <span class="hljs-keyword">continue</span> ; </span><br><span class="line">      &#125;</span><br><span class="line">      mn = min(mn, <span class="hljs-number">1</span> + min(f[L][R - <span class="hljs-number">1</span>], f[L + <span class="hljs-number">1</span>][R])); </span><br><span class="line">      f[L][R] = mn; </span><br><span class="line">      <span class="hljs-keyword">if</span>(mn == f[L + <span class="hljs-number">1</span>][R] + <span class="hljs-number">1</span>) &#123;</span><br><span class="line">        g[L][R] += g[L + <span class="hljs-number">1</span>][R]; </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="hljs-keyword">if</span>(mn == f[L][R - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>) &#123;</span><br><span class="line">        g[L][R] += g[L][R - <span class="hljs-number">1</span>]; </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="hljs-keyword">if</span>(g[L][R] &gt; k) g[L][R] = k + <span class="hljs-number">1</span>; </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="hljs-keyword">if</span>(k &gt; g[<span class="hljs-number">1</span>][n]) &#123; <span class="hljs-built_in">puts</span>(<span class="hljs-string">"NONE"</span>); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; &#125;</span><br><span class="line">  <span class="hljs-built_in">cout</span> &lt;&lt; solve(<span class="hljs-number">1</span>, n, k) &lt;&lt; <span class="hljs-built_in">endl</span>; </span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CodeChef RIN</title>
      <link href="/2019/04/30/CodeChef-RIN/"/>
      <url>/2019/04/30/CodeChef-RIN/</url>
      
        <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>你有  $m$ 个学期来完成 $n$ 个课程，每个学期能上任意多课程，每个课程恰好被学一遍。有些课程有前置条件，必须先学 $a$ 课程才能学 $b$ 课程。在第 $i$ 个学期完成第 $j$ 这个课程能够获得 $A[i][j]$ 的分数（$A[i][j]=-1$ 说明 $i$ 学期不教授 $j$ 课程）。求最大的平均分数。</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>类似于切糕的建图方式，把每个课程拆成 $m + 1$ 个点。令第 $i$个课程拆出来的第 $j$ 个点事 $(i, j)$</p><p>对于一个课程 $i$ ，有以下的建图方式：</p><ul><li>$(i, j) \to (i,j+1)$ 连流量 $100 - A[i][j]$ 的边</li><li>$S \to (i,1)$ 和  $(i,m+1) \to T$ 都连一条流量为 INF 的边</li><li>如果已知两个课程 $a,b$ 必须使得 $a$ 是 $b$  的前置课程，那么对于 $1 \leq i \leq m-1$ 连一条 $(a,i) \to (b,i+1)$ 的流量为  INF 的边</li></ul><p>然后跑出最大流，再用 $100 - \frac{\text{最大流}}{n}$ </p><p>为什么这是对的呢？首先，总分最大就是使得减分最小，所以把每个分数用最大值($\leq 100$) 减一下跑出最小割然后用总和减掉。此时 $A[i][j]$ 就变成了 $i$ 课程在 $j$ 学期的扣分。</p><p>对于每一条学期，我们必须上一次课，在最小割中体现就是对这个学期建立一条链，割了第 $j$ 个点和第 $j+1$ 个点之间的边表示在 $j$ 这个学期上了这个课。每条链显然只会恰好割一次。</p><p>对于前置条件的限制，在最小割中的体现便是 $a$ 学期的割边在 $b$ 学期之前。那么按照第三种连边使得如果不在 $b$ 前面那么必然会有一条通路（画图理解）。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">10010000</span>; </span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = (<span class="hljs-keyword">int</span>)<span class="hljs-number">2e9</span>; </span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> n, m, k; </span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> S, T, vis[N]; </span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span> &#123;</span></span><br><span class="line">  <span class="hljs-keyword">int</span> v, f; edge *next, *rev; </span><br><span class="line">&#125; pool[N * <span class="hljs-number">2</span>], *h[N], *cu = pool, *cur[N]; </span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">  edge *p = cu++, *q = cu++; </span><br><span class="line">  p-&gt;v = v, p-&gt;next = h[u], h[u] = p, p-&gt;f = f, p-&gt;rev = q; </span><br><span class="line">  q-&gt;v = u, q-&gt;next = h[v], h[v] = q, q-&gt;f = <span class="hljs-number">0</span>, q-&gt;rev = p; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> dep[N], Q[N];</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = S; i &lt;= T; i++) </span><br><span class="line">    cur[i] = h[i], dep[i] = <span class="hljs-number">0</span>; </span><br><span class="line">  <span class="hljs-keyword">int</span> s = <span class="hljs-number">1</span>, t = <span class="hljs-number">0</span>; dep[S] = <span class="hljs-number">1</span>, Q[++t] = S; </span><br><span class="line">  <span class="hljs-keyword">while</span>(s &lt;= t) &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> u = Q[s++]; </span><br><span class="line">    <span class="hljs-keyword">for</span>(edge *p = h[u]; p; p = p-&gt;next) &#123;</span><br><span class="line">      <span class="hljs-keyword">int</span> v = p-&gt;v; <span class="hljs-keyword">if</span>(p-&gt;f &amp;&amp; !dep[v]) &#123;</span><br><span class="line">        Q[++t] = v, dep[v] = dep[u] + <span class="hljs-number">1</span>; </span><br><span class="line">        <span class="hljs-keyword">if</span>(v == T) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> lim)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">if</span>(u == T || !lim) <span class="hljs-keyword">return</span> lim; <span class="hljs-keyword">int</span> ret = <span class="hljs-number">0</span>; </span><br><span class="line">  <span class="hljs-keyword">for</span>(edge *p = cur[u]; p; p = p-&gt;next) &#123; cur[u] = p; </span><br><span class="line">    <span class="hljs-keyword">int</span> v = p-&gt;v; <span class="hljs-keyword">if</span>(p-&gt;f &amp;&amp; dep[v] == dep[u] + <span class="hljs-number">1</span>) &#123;</span><br><span class="line">      <span class="hljs-keyword">int</span> tmp = dfs(v, min(lim, p-&gt;f)); </span><br><span class="line">      p-&gt;f -= tmp, p-&gt;rev-&gt;f += tmp; </span><br><span class="line">      ret += tmp, lim -= tmp; </span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="hljs-keyword">if</span>(!ret) dep[u] = <span class="hljs-number">-1</span>; </span><br><span class="line">  <span class="hljs-keyword">return</span> ret; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dinic</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">int</span> ret = <span class="hljs-number">0</span>; </span><br><span class="line">  <span class="hljs-keyword">while</span>(bfs()) ret += dfs(S, INF); </span><br><span class="line">  <span class="hljs-keyword">return</span> ret; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> a[<span class="hljs-number">1005</span>][<span class="hljs-number">1005</span>]; </span><br><span class="line"><span class="hljs-keyword">int</span> dx[<span class="hljs-number">8</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-2</span>&#125;; </span><br><span class="line"><span class="hljs-keyword">int</span> dy[<span class="hljs-number">8</span>] = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>&#125;; </span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">id</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> (x - <span class="hljs-number">1</span>) * (m + <span class="hljs-number">1</span>) + y; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k; </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) </span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++) </span><br><span class="line">      <span class="hljs-built_in">cin</span> &gt;&gt; a[i][j];  </span><br><span class="line">  S = <span class="hljs-number">0</span>; T = n * (m + <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>; </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    addedge(S, id(i, <span class="hljs-number">1</span>), INF); </span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">      <span class="hljs-keyword">if</span>(a[i][j] != <span class="hljs-number">-1</span>) addedge(id(i, j), id(i, j + <span class="hljs-number">1</span>), <span class="hljs-number">100</span> - a[i][j]); </span><br><span class="line">      <span class="hljs-keyword">else</span> addedge(id(i, j), id(i, j + <span class="hljs-number">1</span>), INF); </span><br><span class="line">    &#125; addedge(id(i, m + <span class="hljs-number">1</span>), T, INF); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> x, y; <span class="hljs-built_in">cin</span> &gt;&gt; x &gt;&gt; y; </span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++) </span><br><span class="line">      addedge(id(x, j), id(y, j + <span class="hljs-number">1</span>), INF); </span><br><span class="line">  &#125; </span><br><span class="line">  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%.2lf\n"</span>, <span class="hljs-number">1.0</span> * <span class="hljs-number">100</span> - <span class="hljs-number">1.0</span> * dinic() / (<span class="hljs-number">1.0</span> * n)); </span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BZOJ4585 「APIO2016」烟火表演</title>
      <link href="/2019/04/05/BZOJ4585/"/>
      <url>/2019/04/05/BZOJ4585/</url>
      
        <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>给定一棵以 $1$ 为根的 $n$ 个节点的树，每条边有一个边权。有 $m$ 个叶子。将一条边的边权从 $x$ 修改至 $y$ 需要的代价是 $|x-y|$  。求将所有叶子到根节点的距离修改成相同的最小代价。</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>神仙题。参考：<a href="https://blog.csdn.net/u014609452/article/details/52347062；洛谷题解第一篇。" target="_blank" rel="noopener">https://blog.csdn.net/u014609452/article/details/52347062；洛谷题解第一篇。</a></p><p>定义 $f_x(y)$ 表示将以 $x$ 为根的子树中所有叶子结点到 $x$ 节点的距离都修改成 $y$ 所需要的代价。我们得到的结论是：<strong>$f_x$ 是个分段函数，每一段为一个一次函数，并且下凸（即一个凸壳）</strong>。</p><p>这个结论的证明要用到数学归纳法，不多赘述。</p><p>考虑维护这个凸壳。即现在已知每个儿子的凸壳，应该如何合并出这个节点的凸壳。</p><p>儿子节点的凸壳首先需要往其中加入父亲到他的这一条边。可以证明有了这一条边后依然是一个凸壳。</p><p>对每个儿子都这么做，得到的所有凸壳相加即为父亲节点的凸壳。</p><p>于是问题变为如何维护 ”往上增加一条边“ 后凸壳的变化。</p><p>设增加这条边的边权是 $w$ ，要增加的这个函数是 $f$ ，新的函数是 $g$ ，最小值在 $L$ 到 $R$ 取到。</p><ol><li>对于 $x \leq L$ ，此时要把新加的这条边减成 $0$ ，代价 $w$ 即 $g(x) = f(x) + w$</li><li>对于 $L \leq x \leq L + w$ ，此时先将原来的子树里的每个叶子到根的距离修改成 $L$ ，加上 $w$ 后要再修改成 $x$ 需要 $L + w - x$ 的代价 （先把 $w$ 的边干掉然后用 $L - x$ 的代价从 $L$ 到 $x$ ）。即 $g(x) = f(x) + w + L -x$</li><li>对于 $L + w \leq x \leq R + w$ ，此时 $g(x) = f(x - w)$ 。又因为 $x - w \in [L, R]$ 都是最小值，所以 $g(x) = f(L)$ </li><li>对于 $R+w \leq x$ ，此时先将原来的子树里的每个叶子到根的距离修改成 $R$ ，加上 $w$ 再修改成 $x$ 需要 $|R + w - x| = x - w - R$ （其实和 2 差不多只是正负的问题）。即 $g(x) = f(x) + x - w - R$ </li></ol><p>容易看出，$g$ 的最小值在 $[L + w, R + w]$ 取到。</p><p>得到这些性质后，<del>我已经自闭了…</del> 我们可以分析它的几何意义。</p><p>第一段（$x \leq L$） 相当于是往上做了一个平移。</p><p>第二段（$L \leq x \leq L + w$）你会发现，$g(x) = f(x) + w - L - x$ 中有一个 $-x$ 。这说明这一段的斜率是 $-1$ </p><p>第三段（$L + w \leq x \leq R + w$）这一段其实就是一段平的（这也是为啥它是新函数取到最小值的段），斜率维 $0$</p><p>第四段（$R + w \leq x$ ）你会发现，$g(x) = f(x) + x - w - R$ 有一个 $+x$ 。这说明这一段的斜率是 $1$ </p><p>这样我们就知道了新凸壳与原来的凸壳的区别：<strong>将 $L$ 左边一段向上平移，删除右边，新增两个拐点 $L+w, R+w$ 并且 $L$  到 $L+w$ 的斜率为 $-1$ ，$L+w$ 到 $R + w$ 的斜率是 $0$，$R + w$ 往右的斜率是 $1$ </strong>。</p><p>有了这个结论，然后的做法其实还不是很显然（至少对我来说）。</p><p>这个凸壳还有一个可以证明的性质：（从左到右）每当<strong>经过一个拐点</strong>，那么<strong>斜率会增加 $1$ </strong></p><p>我们可以对每个点存放凸壳的拐点（的横坐标）。</p><p>每次将儿子节点的凸壳弹出后面的（从大到小）拐点，然后加入两个新拐点。然后将儿子节点的拐点合并到该节点的凸壳中。</p><p>这个过程中，需要支持：删除（横坐标）最大的拐点；合并。自然想到<strong>可并堆</strong>。</p><p>还剩下几个小问题：</p><ol><li><strong>实现时，如何弹出拐点直到最小值的那一段</strong>？最右边的那一段的斜率是儿子数量。（因为每合并一次右端斜率 ++） 所以弹出儿子数量个拐点即可。</li><li><strong>最后的答案如何计算？或：最小值那一段该如何计算？</strong> $f_1(0)$ 很好计算，为所有边权的和。我们又知道，每一个拐点使得斜率++。于是可以先把右边的点弹掉（儿子个），然后计算即可</li></ol><p>还有一个很骚的操作，即一种快乐的可并堆：</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">if</span>(!x || !y) <span class="hljs-keyword">return</span> x + y; </span><br><span class="line">  <span class="hljs-keyword">if</span>(vx[x] &lt; vx[y]) swap(x, y); </span><br><span class="line">  <span class="hljs-keyword">int</span> d = rand() % <span class="hljs-number">2</span>; </span><br><span class="line">  ch[x][d] = merge(ch[x][d], y); </span><br><span class="line">  <span class="hljs-keyword">return</span> x; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>懒人专用，复杂度很对（426ms）。会证明复杂度的可以私信我，我太菜了不会证…</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Author: AcFunction</span></span><br><span class="line"><span class="hljs-comment"> * Date:   2019-03-19 21:45:47</span></span><br><span class="line"><span class="hljs-comment"> * Email:  3486942970@qq.com</span></span><br><span class="line"><span class="hljs-comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> db double</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PII pair <span class="hljs-meta-string">&lt;int, int&gt; </span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Fi first</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Se second </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> RG register </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, l, r) for(RG int i = l; i &lt;= r; i++) </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> per(i, r, l) for(RG int i = r; i &gt;= l; i--)</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">INIT</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  ios :: sync_with_stdio(<span class="hljs-literal">false</span>); <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">template</span> &lt; <span class="hljs-keyword">typename</span> T &gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sc</span><span class="hljs-params">(T&amp; t)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">char</span> c = getchar(); T x = <span class="hljs-number">1</span>; t = <span class="hljs-number">0</span>; <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c)) &#123;<span class="hljs-keyword">if</span>(c == <span class="hljs-string">'-'</span>) x = <span class="hljs-number">-1</span>; c = getchar();&#125;</span><br><span class="line">  <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c)) t = t * <span class="hljs-number">10</span> + c - <span class="hljs-string">'0'</span> , c = getchar();t *= x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">template</span> &lt; <span class="hljs-keyword">typename</span> T , <span class="hljs-keyword">typename</span>... Args &gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sc</span><span class="hljs-params">(T&amp; t , Args&amp;... args)</span> </span>&#123;sc(t); sc(args...);&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">600300</span>; </span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> n, m, fa[N], son[N];</span><br><span class="line">ll w[N], ans, vx[N];  </span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> cnt, ch[N][<span class="hljs-number">2</span>], rt[N];  </span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">New</span><span class="hljs-params">(ll x)</span> </span>&#123;</span><br><span class="line">  vx[++cnt] = x; ch[cnt][<span class="hljs-number">0</span>] = ch[cnt][<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>; <span class="hljs-keyword">return</span> cnt; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">if</span>(!x || !y) <span class="hljs-keyword">return</span> x + y; </span><br><span class="line">  <span class="hljs-keyword">if</span>(vx[x] &lt; vx[y]) swap(x, y); </span><br><span class="line">  <span class="hljs-keyword">int</span> d = rand() % <span class="hljs-number">2</span>; </span><br><span class="line">  ch[x][d] = merge(ch[x][d], y); </span><br><span class="line">  <span class="hljs-keyword">return</span> x; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// INIT(); </span></span><br><span class="line">  srand((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>)<span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>); </span><br><span class="line">  sc(n, m); </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n + m; i++) &#123;</span><br><span class="line">    sc(fa[i], w[i]); ans += w[i]; son[fa[i]]++; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = n + m; i &gt;= <span class="hljs-number">2</span>; i--) &#123;</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= son[i] - <span class="hljs-number">1</span>; j++)</span><br><span class="line">      rt[i] = merge(ch[rt[i]][<span class="hljs-number">0</span>], ch[rt[i]][<span class="hljs-number">1</span>]); </span><br><span class="line">    ll R = vx[rt[i]]; rt[i] = merge(ch[rt[i]][<span class="hljs-number">0</span>], ch[rt[i]][<span class="hljs-number">1</span>]); </span><br><span class="line">    ll L = vx[rt[i]]; rt[i] = merge(ch[rt[i]][<span class="hljs-number">0</span>], ch[rt[i]][<span class="hljs-number">1</span>]); </span><br><span class="line">    rt[i] = merge(rt[i], merge(New(L + w[i]), New(R + w[i])));  </span><br><span class="line">    rt[fa[i]] = merge(rt[fa[i]], rt[i]); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= son[<span class="hljs-number">1</span>]; j++) </span><br><span class="line">    rt[<span class="hljs-number">1</span>] = merge(ch[rt[<span class="hljs-number">1</span>]][<span class="hljs-number">0</span>], ch[rt[<span class="hljs-number">1</span>]][<span class="hljs-number">1</span>]); </span><br><span class="line">  <span class="hljs-keyword">while</span>(rt[<span class="hljs-number">1</span>]) &#123;</span><br><span class="line">    ans -= vx[rt[<span class="hljs-number">1</span>]]; </span><br><span class="line">    rt[<span class="hljs-number">1</span>] = merge(ch[rt[<span class="hljs-number">1</span>]][<span class="hljs-number">0</span>], ch[rt[<span class="hljs-number">1</span>]][<span class="hljs-number">1</span>]); </span><br><span class="line">  &#125; <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>, ans); </span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 可并堆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU6203 ping ping ping</title>
      <link href="/2019/04/05/HDU6203/"/>
      <url>/2019/04/05/HDU6203/</url>
      
        <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>给你一颗以 $0$ 为根的有根树。现在有些节点坏掉了，与周围无法联通。已知 $m$ 对 $(u,v)​$ 无法联通，求最少坏了几个节点。</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>对于一对无法联通的节点 $(u,v)$，一般是贪心地删掉 $u, v$ 的 LCA。但如果这条链在之前删除其他链的 LCA 时已经不联通了，那么就可以直接跳过。</p><p>所以得到一个做法：求出每对 $(u,v)$ 的 LCA ，按照深度从大到小排序。依次处理。如果当前的链上已经有点被删除了，直接跳过；否则 ans++，将 LCA 打个标记表示已被删除。可以用树链剖分维护。</p><p>考虑更简单的做法。因为已经将 LCA 的深度从大到小排过序了，所以每次删除 LCA 可以直接把 LCA 这个子树里的所有点打上标记（加上1）与只打 LCA 一个标记是等价的。这个过程直接用树状数组维护 dfs 序就可以了。</p><p>时间复杂度 $O(m \log n)$ </p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100010</span>; </span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> n, m, tot, dep[N], fa[N][<span class="hljs-number">19</span>], dfn[N], siz[N]; </span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span> &#123;</span></span><br><span class="line">  <span class="hljs-keyword">int</span> v; edge *next;              </span><br><span class="line">&#125; pool[N * <span class="hljs-number">2</span>], *head[N], *cur = pool;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">  edge *p = cur++, *q = cur++; </span><br><span class="line">  p-&gt;v = v, p-&gt;next = head[u], head[u] = p; </span><br><span class="line">  q-&gt;v = u, q-&gt;next = head[v], head[v] = q; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> pre)</span> </span>&#123;</span><br><span class="line">  siz[u] = <span class="hljs-number">1</span>; dfn[u] = ++tot; </span><br><span class="line">  <span class="hljs-keyword">for</span>(edge *p = head[u]; p; p = p-&gt;next) &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> v = p-&gt;v; <span class="hljs-keyword">if</span>(v == pre) <span class="hljs-keyword">continue</span> ; </span><br><span class="line">    dep[v] = dep[u] + <span class="hljs-number">1</span>; fa[v][<span class="hljs-number">0</span>] = u; </span><br><span class="line">    dfs(v, u); siz[u] += siz[v]; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span></span><br><span class="line">  <span class="hljs-keyword">int</span> u, v, lca; </span><br><span class="line">&#125;E[N];</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">LCA</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">if</span>(dep[u] &lt; dep[v]) swap(u, v); </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">16</span>; i &gt;= <span class="hljs-number">0</span>; i--)  </span><br><span class="line">    <span class="hljs-keyword">if</span>(dep[fa[u][i]] &gt;= dep[v]) </span><br><span class="line">      u = fa[u][i]; </span><br><span class="line">  <span class="hljs-keyword">if</span>(u == v) <span class="hljs-keyword">return</span> u; </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">16</span>; i &gt;= <span class="hljs-number">0</span>; i--) </span><br><span class="line">    <span class="hljs-keyword">if</span>(fa[u][i] != fa[v][i]) </span><br><span class="line">      u = fa[u][i], v = fa[v][i]; </span><br><span class="line">  <span class="hljs-keyword">return</span> fa[u][<span class="hljs-number">0</span>]; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(node x, node y)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> dep[x.lca] &gt; dep[y.lca]; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> c[N]; </span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lb</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> x &amp; (-x); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = x; i &lt;= n + <span class="hljs-number">1</span>; i += lb(i)) </span><br><span class="line">    c[i] += d; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">int</span> ret = <span class="hljs-number">0</span>; </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = x; i; i -= lb(i))</span><br><span class="line">    ret += c[i]; </span><br><span class="line">  <span class="hljs-keyword">return</span> ret; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">A</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">  add(l, <span class="hljs-number">1</span>), add(r + <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;n) != EOF) &#123;</span><br><span class="line">    n++;</span><br><span class="line">    <span class="hljs-built_in">memset</span>(dep, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(dep)); </span><br><span class="line">    <span class="hljs-built_in">memset</span>(fa, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(fa)); </span><br><span class="line">    <span class="hljs-built_in">memset</span>(dfn, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(dfn)); </span><br><span class="line">    <span class="hljs-built_in">memset</span>(c, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(c)); </span><br><span class="line">    tot = <span class="hljs-number">0</span>; </span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) </span><br><span class="line">      head[i] = <span class="hljs-literal">NULL</span>; </span><br><span class="line">    cur = pool; </span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="hljs-keyword">int</span> u, v; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>, &amp;u, &amp;v); </span><br><span class="line">      u++, v++; addedge(u, v); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;m); </span><br><span class="line">    dfs(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>); </span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; (<span class="hljs-number">1</span> &lt;&lt; j) &lt;= n; j++) </span><br><span class="line">      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) </span><br><span class="line">        fa[i][j] = fa[fa[i][j - <span class="hljs-number">1</span>]][j - <span class="hljs-number">1</span>]; </span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">      <span class="hljs-keyword">int</span> u, v; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>, &amp;u, &amp;v); u++, v++; </span><br><span class="line">      E[i].u = u, E[i].v = v, E[i].lca = LCA(u, v); </span><br><span class="line">    &#125; sort(E + <span class="hljs-number">1</span>, E + m + <span class="hljs-number">1</span>, cmp);</span><br><span class="line">    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>; </span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">      <span class="hljs-keyword">int</span> u = E[i].u, v = E[i].v, lca = E[i].lca; </span><br><span class="line">      <span class="hljs-keyword">if</span>(!sum(dfn[u]) &amp;&amp; !sum(dfn[v])) </span><br><span class="line">        ans++, A(dfn[lca], dfn[lca] + siz[lca] - <span class="hljs-number">1</span>); </span><br><span class="line">    &#125; <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, ans); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BJOI2019 游记</title>
      <link href="/2019/03/31/BJOI2019-%E6%B8%B8%E8%AE%B0/"/>
      <url>/2019/03/31/BJOI2019-%E6%B8%B8%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>提前占坑。记录第一次省（bao）选（ling）</p><a id="more"></a><hr><h1 id="Day-n"><a href="#Day-n" class="headerlink" title="Day -n"></a>Day -n</h1><p>颓废</p><h1 id="Day-m"><a href="#Day-m" class="headerlink" title="Day -m"></a>Day -m</h1><p>模拟赛（集训）爆零（严肃）</p><p><a href="https://lim817.github.io/2019/04/06/BJOI2019-%E6%B8%B8%E8%AE%B0/" target="_blank" rel="noopener">AK大佬点这里</a></p><h1 id="Day-0"><a href="#Day-0" class="headerlink" title="Day 0"></a>Day 0</h1><p>复习期中</p><p>打了些板子</p><p>准备迎接退役（雾</p><h1 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h1><p>密码输错了几次..开题</p><p>T1 什么鬼…字符串匹配？…几何平均值？？</p><p>T2 emm感觉很可做</p><p>T3 什么鬼…看了下标题和题面长度，然后就几乎没看过…现在都不知道题意是啥（事实证明这决策非常对</p><p>T1 想了一会感觉这个15分很好拿，先放着，20min写得完。感觉下面可以搞个dp但是输出方案不好弄写起来性价比有点低放了去看 T2</p><p>T2 显然这个 2*n 就是求区间 C_{斐波数列}^{k} 的和。把组合数拆一下发现可以直接预处理出几次方的系数。然后问题转化成前缀和减一下。貌似能直接矩阵快速幂，写起来不算特别麻烦。算了下复杂度勉强能过  k &lt;= 50 突然发现 l, r 比较小的可以直接跑如果 k 太大反而不能用矩阵快速幂。于是就写写写。写了2个小时(3个小时?我还是太弱了码力不够)过了第一个样例（中间差点心态崩了）。最后写了一坨奇怪的代码</p><p>3*n 有点卡住，时间只剩 2h 了吧（记不清了）。然后回去写了一发 T2 的暴力。然后还剩 1.5h-。回去想 T2。手花了几种方格图发现是由这个 3 乘 奇数多一块 或者 3 乘偶数少一块递推而来的。设了个方程解出来是 4乘前面一项减去前面两项的数。也是一个二阶线性递推。还剩 1h+ 赶紧把前面的代码复制粘贴魔改了一番系数然后调了半天还剩 20min 的时候调出来了。过了两个样例心情舒坦。最后还发现 T3 有个无解输出个 -1 。检查了一番文件名就结束了。</p><p>中午（看大佬）颓废。等分真是漫长。</p><p>出分了。 15 + 65 + 0 丢了 5 分还行。rk16(17?)?!出人意料…</p><p>讲题，T1貌似听上去很套路？取个 log 变成平均数，然后二分，然后 AC自动机上dp？反正肯定是不会的。</p><p>T2正解要用什么奇怪的扩展整数域，听得很懵。。</p><p>T3全程掉线，我题意都不知道是啥（我还是太菜了</p><p>晚上还是要复习万恶的期中（（（</p><p>Day2 爆零预备</p>]]></content>
      
      
      <categories>
          
          <category> 游记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 省选游记 </tag>
            
            <tag> 爆零 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BZOJ3143 「HNOI2013」游走</title>
      <link href="/2019/03/22/BZOJ3143/"/>
      <url>/2019/03/22/BZOJ3143/</url>
      
        <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>$n$ 个点 $m$ 条边的无向连通图，在上面从 $1$ 号点开始随机游走。现在你可以给每条边从 $1$ 到 $m$ 编号作为分数（经过就得分）。求如何编号使得总分的期望最小。输出这个最小值即可。</p><p>$n \leq 500$ </p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>如果知道了每条边被经过的期望次数，那么根据排序不等式显然是逆序分配最小。</p><p>设 $f_u$ 是 $u$ 点被经过的期望次数，$deg_u$ 表示 $u$ 的度数。那么边 $(u, v)$ 被经过的期望次数是 </p><script type="math/tex; mode=display">\frac{f_u}{deg_u}+\frac{f_v}{deg_v}</script><p>$f$ 的求法比较简单，即 </p><script type="math/tex; mode=display">f_u = \sum\limits_{(u,v) \in E} \frac{f_v}{deg_v}</script><p>高斯消元一波再排个序就做完了。时间复杂度 $O(n^3)$</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Author: AcFunction</span></span><br><span class="line"><span class="hljs-comment"> * Date:   2019-03-18 22:13:03</span></span><br><span class="line"><span class="hljs-comment"> * Email:  3486942970@qq.com</span></span><br><span class="line"><span class="hljs-comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> db double</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PII pair <span class="hljs-meta-string">&lt;int, int&gt; </span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Fi first</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Se second </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> RG register </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, l, r) for(RG int i = l; i &lt;= r; i++) </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> per(i, r, l) for(RG int i = r; i &gt;= l; i--)</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">INIT</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  ios :: sync_with_stdio(<span class="hljs-literal">false</span>); <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">505</span>; </span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> n, m, deg[N]; </span><br><span class="line">PII E[N * N]; </span><br><span class="line">db a[N][N], t[N]; </span><br><span class="line">db A[N * N], ans; </span><br><span class="line"><span class="hljs-built_in">vector</span> &lt;<span class="hljs-keyword">int</span>&gt; g[N]; </span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  rep(u, <span class="hljs-number">1</span>, n) &#123;</span><br><span class="line">    a[u][u] = <span class="hljs-number">1.0</span>; </span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> v : g[u]) </span><br><span class="line">      <span class="hljs-keyword">if</span>(v != n)</span><br><span class="line">        a[u][v] -= <span class="hljs-number">1.0</span> / deg[v];  </span><br><span class="line">  &#125; a[<span class="hljs-number">1</span>][n + <span class="hljs-number">1</span>] = <span class="hljs-number">1.0</span>; </span><br><span class="line">  a[n][n + <span class="hljs-number">1</span>] = <span class="hljs-number">-1.0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">gauss</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  rep(i, <span class="hljs-number">1</span>, n) &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> p = i;</span><br><span class="line">    rep(j, i + <span class="hljs-number">1</span>, n) </span><br><span class="line">      <span class="hljs-keyword">if</span>(<span class="hljs-built_in">fabs</span>(a[j][i]) &gt; <span class="hljs-built_in">fabs</span>(a[p][i] + <span class="hljs-number">1e-13</span>))</span><br><span class="line">        p = j; </span><br><span class="line">    rep(j, i + <span class="hljs-number">1</span>, n) &#123;</span><br><span class="line">      <span class="hljs-keyword">if</span>(<span class="hljs-built_in">fabs</span>(a[j][i]) &lt; <span class="hljs-number">1e-13</span>) <span class="hljs-keyword">continue</span> ; </span><br><span class="line">      db cof = a[j][i] / a[i][i]; </span><br><span class="line">      rep(k, i, n + <span class="hljs-number">1</span>) </span><br><span class="line">        a[j][k] -= a[i][k] * cof; </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  per(i, n, <span class="hljs-number">1</span>) &#123;</span><br><span class="line">    rep(j, i + <span class="hljs-number">1</span>, n) </span><br><span class="line">      a[i][n + <span class="hljs-number">1</span>] -= a[i][j] * t[j];</span><br><span class="line">    t[i] = a[i][n + <span class="hljs-number">1</span>] / a[i][i]; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  INIT(); </span><br><span class="line">  <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m; </span><br><span class="line">  rep(i, <span class="hljs-number">1</span>, m) &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> u, v; <span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; v; </span><br><span class="line">    E[i] = MP(u, v); </span><br><span class="line">    deg[u]++, deg[v]++;</span><br><span class="line">    g[u].pb(v), g[v].pb(u); </span><br><span class="line">  &#125; build(n), gauss(n); </span><br><span class="line">  rep(i, <span class="hljs-number">1</span>, m) </span><br><span class="line">    A[i] = <span class="hljs-number">1.0</span> * t[E[i].Fi] / deg[E[i].Fi] + </span><br><span class="line">           <span class="hljs-number">1.0</span> * t[E[i].Se] / deg[E[i].Se]; </span><br><span class="line">  sort(A + <span class="hljs-number">1</span>, A + m + <span class="hljs-number">1</span>);</span><br><span class="line">  rep(i, <span class="hljs-number">1</span>, m) ans += A[i] * (m - i + <span class="hljs-number">1</span>); </span><br><span class="line">  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%.3lf\n"</span>, ans);</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 概率期望 </tag>
            
            <tag> 高斯消元 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BZOJ4008 「HNOI2015」亚瑟王</title>
      <link href="/2019/03/22/BZOJ4008/"/>
      <url>/2019/03/22/BZOJ4008/</url>
      
        <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>有 $n$ 张卡牌，$r$ 局游戏，每张卡牌有 $p_i$ 的概率发动技能，如果发动会造成 $d_i​$ 的伤害。每局游戏从第一张卡牌开始开始一个个遍历，如果发动过技能则忽略继续；否则如果这张卡牌现在发动了，则结束回合；没有发动则继续。求造成的总伤害的期望。</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>可以想象成把 $r$ 个机会分配给每一张卡牌。$dp[i][j]$ 表示前 $i$ 张还剩 $j$ 个机会的答案 </p><script type="math/tex; mode=display">dp[i][j] = dp[i-1][j] \cdot (1-p[i])^j+dp[i-1][j+1]\cdot (1-(1-p[i])^{j+1})</script><p>前半部分可以理解成在 $j$ 轮没有一次触发，后半部分就是至少一次触发。并且后半部分因为出触发了所以对答案有贡献，所以在 dp 的时候顺便把 ans 加上后半部分 * $d_i$ </p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Author: AcFunction</span></span><br><span class="line"><span class="hljs-comment"> * Date:   2019-03-17 15:45:54</span></span><br><span class="line"><span class="hljs-comment"> * Email:  3486942970@qq.com</span></span><br><span class="line"><span class="hljs-comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> db double</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PII pair <span class="hljs-meta-string">&lt;int, int&gt; </span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Fi first</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Se second </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> RG register </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, l, r) for(RG int i = l; i &lt;= r; i++) </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> per(i, r, l) for(RG int i = r; i &gt;= l; i--)</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">INIT</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  ios :: sync_with_stdio(<span class="hljs-literal">false</span>); <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">250</span>; </span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> T, n, r, d[N]; </span><br><span class="line">db f[N][N], p[N]; </span><br><span class="line"></span><br><span class="line"><span class="hljs-function">db <span class="hljs-title">fpw</span><span class="hljs-params">(db x, <span class="hljs-keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  db ret = <span class="hljs-number">1.0</span>;</span><br><span class="line">  <span class="hljs-keyword">while</span>(k) &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(k &amp; <span class="hljs-number">1</span>) ret = ret * x;</span><br><span class="line">    x = x * x; k &gt;&gt;= <span class="hljs-number">1</span>; </span><br><span class="line">  &#125; <span class="hljs-keyword">return</span> ret; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  INIT(); </span><br><span class="line">  <span class="hljs-built_in">cin</span> &gt;&gt; T; </span><br><span class="line">  <span class="hljs-keyword">while</span>(T--) &#123;</span><br><span class="line">    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; r; </span><br><span class="line">    <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(f)); </span><br><span class="line">    rep(i, <span class="hljs-number">1</span>, n) <span class="hljs-built_in">cin</span> &gt;&gt; p[i] &gt;&gt; d[i]; </span><br><span class="line">    f[<span class="hljs-number">0</span>][r] = <span class="hljs-number">1</span>; db ans = <span class="hljs-number">0</span>; </span><br><span class="line">    rep(i, <span class="hljs-number">1</span>, n) </span><br><span class="line">      per(j, r, <span class="hljs-number">0</span>) </span><br><span class="line">        f[i][j] = f[i - <span class="hljs-number">1</span>][j] * fpw(<span class="hljs-number">1</span> - p[i], j) + f[i - <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>] * (<span class="hljs-number">1</span> - fpw(<span class="hljs-number">1</span> - p[i], j + <span class="hljs-number">1</span>)), </span><br><span class="line">        ans += d[i] * f[i - <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>] * (<span class="hljs-number">1</span> - fpw(<span class="hljs-number">1</span> - p[i], j + <span class="hljs-number">1</span>)); </span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%.6lf\n"</span>, ans); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 概率期望 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BZOJ2134 单选错位</title>
      <link href="/2019/03/22/BZOJ2134/"/>
      <url>/2019/03/22/BZOJ2134/</url>
      
        <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>$n$ 道题，第 $i$ 道题有 $a_i$ 个选项。求将正确答案全部右移一位（第 $n$ 题移到第 $1$ 题）之后期望对的题数</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>答案 = 期望多少个 $i$ 满足 $ans_i = ans_{i+1}$ 也 = sum $ans_i = ans_{i+1}$ 的期望也就是 $\sum \frac{\min\{a_i, a_{i+1}\}}{a_ia_{i+1}}=\sum\frac{1}{\max\{a_i,a_{i+1}\}}$ （为了方便设 $a_{n+1}=a_1$）</p><p>做完了</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Author: AcFunction</span></span><br><span class="line"><span class="hljs-comment"> * Date:   2019-03-20 14:41:06</span></span><br><span class="line"><span class="hljs-comment"> * Email:  3486942970@qq.com</span></span><br><span class="line"><span class="hljs-comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> n, A, B, C, a[<span class="hljs-number">10000002</span>]; </span><br><span class="line"><span class="hljs-keyword">double</span> ans; </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d%d%d"</span>,&amp;n,&amp;A,&amp;B,&amp;C,a+<span class="hljs-number">1</span>); </span><br><span class="line">  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) </span><br><span class="line">    a[i] = ((<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>)a[i - <span class="hljs-number">1</span>] * A + B) % <span class="hljs-number">100000001</span>; </span><br><span class="line">  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) </span><br><span class="line">    a[i] = a[i] % C + <span class="hljs-number">1</span>; </span><br><span class="line">  a[n + <span class="hljs-number">1</span>] = a[<span class="hljs-number">1</span>];</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) ans += <span class="hljs-number">1.0</span> / max(a[i], a[i + <span class="hljs-number">1</span>]); </span><br><span class="line">  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%.3lf\n"</span>, ans); </span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概率期望 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BZOJ4665 小w的喜糖</title>
      <link href="/2019/03/17/BZOJ4665/"/>
      <url>/2019/03/17/BZOJ4665/</url>
      
        <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>$n$ 颗糖发给了 $n$ 个人，每颗糖有一个种类。$n$ 个人相互交换手中的糖那么有多少种方案使得每个人手中的糖的种类都与原来不同。</p><p>两个方案不同当且仅当，存在一个人，他手中的糖的种类在两个方案中不一样。</p><p>答案对 $10^9 + 9$ 取模</p><a id="more"></a> <p>答案对 $10^9 + 9$ 取模！！！！！ $10^9 + 9$  ！！！！ $10^9 + 9$ ！！！！！ $10^9 + 9$ ！！！！！</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>可以暂时不考虑相同种类糖之间的关系，把它们当成不同的最后把答案乘上 $\frac{1}{\Pi_{i} a_i!}$ . $a_i$ 表示种类 $i$ 的糖数</p><p>设 $dp[i][j]$ 表示前 $i$ 种糖至少有 $j$ 个人不合法（即手中拿的糖和原来一样。那么有</p><script type="math/tex; mode=display">dp[i][j] = \sum\limits_{k=0}^{\min(a_i,j)} \binom{a_i}{k} \cdot dp[i-1][j-k] \cdot a_i(a_i-1)\cdots(a_i - k + 1)</script><p>然后对于答案就可以直接容斥得到 </p><script type="math/tex; mode=display">ans = \sum\limits_{i=0}^{n} (-1)^{i}dp[n][i]\cdot(n-i)!</script><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Author: AcFunction</span></span><br><span class="line"><span class="hljs-comment"> * Date:   2019-03-04 21:07:09</span></span><br><span class="line"><span class="hljs-comment"> * Email:  3486942970@qq.com</span></span><br><span class="line"><span class="hljs-comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> RG register </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, l, r) for(RG int i = l; i &lt;= r; i++) </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> per(i, r, l) for(RG int i = r; i &gt;= l; i--)</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">INIT</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  ios :: sync_with_stdio(<span class="hljs-literal">false</span>); <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">2005</span>; </span><br><span class="line"><span class="hljs-keyword">const</span> ll mod = (ll)<span class="hljs-number">1e9</span> + <span class="hljs-number">9</span>; </span><br><span class="line"></span><br><span class="line"><span class="hljs-function">ll <span class="hljs-title">fpw</span><span class="hljs-params">(ll x, ll k, ll p)</span> </span>&#123;</span><br><span class="line">  ll ret = <span class="hljs-number">1</span>; </span><br><span class="line">  <span class="hljs-keyword">while</span>(k) &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(k &amp; <span class="hljs-number">1</span>) ret = ret * x % p; </span><br><span class="line">    x = x * x % p; k &gt;&gt;= <span class="hljs-number">1</span>; </span><br><span class="line">  &#125; <span class="hljs-keyword">return</span> ret; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> n, a[N]; </span><br><span class="line">ll dp[N][N], inv[N], invf[N], fac[N]; </span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">prework</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  inv[<span class="hljs-number">1</span>] = fac[<span class="hljs-number">0</span>] = fac[<span class="hljs-number">1</span>] = invf[<span class="hljs-number">0</span>] = invf[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>; </span><br><span class="line">  rep(i, <span class="hljs-number">2</span>, n) </span><br><span class="line">    inv[i] = (mod - mod / i) * inv[mod % i] % mod, </span><br><span class="line">    fac[i] = fac[i - <span class="hljs-number">1</span>] * i % mod, </span><br><span class="line">    invf[i] = invf[i - <span class="hljs-number">1</span>] * inv[i] % mod; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function">ll <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">if</span>(n &lt; m) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">  <span class="hljs-keyword">return</span> fac[n] * invf[m] % mod * invf[n - m] % mod; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  INIT(); </span><br><span class="line">  <span class="hljs-built_in">cin</span> &gt;&gt; n; </span><br><span class="line">  prework(); </span><br><span class="line">  rep(i, <span class="hljs-number">1</span>, n) &#123; <span class="hljs-keyword">int</span> t; <span class="hljs-built_in">cin</span> &gt;&gt; t; a[t]++; &#125; </span><br><span class="line">  ll ans = <span class="hljs-number">0</span>; dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>; </span><br><span class="line">  rep(i, <span class="hljs-number">1</span>, n) rep(j, <span class="hljs-number">0</span>, n)</span><br><span class="line">    rep(k, <span class="hljs-number">0</span>, min(a[i], j)) </span><br><span class="line">      dp[i][j] += <span class="hljs-number">1l</span>l * dp[i - <span class="hljs-number">1</span>][j - k] * C(a[i], k) % mod * fac[a[i]] % mod * invf[a[i] - k] % mod, </span><br><span class="line">      dp[i][j] %= mod; </span><br><span class="line">  <span class="hljs-comment">// rep(i, 0, n) cout &lt;&lt; dp[n][i] &lt;&lt; " "; </span></span><br><span class="line">  rep(i, <span class="hljs-number">0</span>, n) ans += <span class="hljs-number">1l</span>l * ((i &amp; <span class="hljs-number">1</span>) ? <span class="hljs-number">-1</span> : <span class="hljs-number">1</span>) * dp[n][i] % mod * fac[n - i] % mod, ans %= mod, ans += mod, ans %= mod; </span><br><span class="line">  rep(i, <span class="hljs-number">1</span>, n) ans *= invf[a[i]], ans %= mod; </span><br><span class="line">  <span class="hljs-built_in">cout</span> &lt;&lt; ((ans % mod + mod) % mod);  </span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容斥 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BZOJ4361 isn</title>
      <link href="/2019/03/17/BZOJ4361/"/>
      <url>/2019/03/17/BZOJ4361/</url>
      
        <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>给出一个长度为 $n$ 的序列 $A(A_1,A_2 \cdot A_n)$。如果序列 $A$ 不是非降的，你必须从中删去一个数这一操作，直到 $A$ 非降为止。求有多少种不同的操作方案，答案模 $10^9+7$ 。</p><a id="more"></a> <h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>设 $dp[i][j]$ 表示以 $i$ 这个点结尾，长度恰好为 $j$ 的非降子序列的个数 </p><p>求法要用树状数组维护（还要离散化）</p><p>考虑怎么求出答案 令 $g[i]$ 为有多少个长度为 $i$ 的非降子序列即</p><script type="math/tex; mode=display">g[i] = \sum\limits_{j=1}^{n} dp[j][i]</script><p>那么有：将原序列删除到长度为 $i$ 的子序列的方案数是</p><script type="math/tex; mode=display">g[i] \cdot (n-i)!</script><p>乍看很对，仔细一想其实这不是对的：<strong>因为并没有考虑在 (i+1) 的时候已经达到状态就不会再继续进行操作</strong></p><p>如果当前不合法那么这个序列只有可能是从 $i+1$ 的状态选择了一个数删掉得到的。所以有</p><script type="math/tex; mode=display">ans = \sum\limits_{i = 1} ^ {n} g[i] \cdot (n - i)! - (i + 1) \cdot g[i + 1] \cdot (n - i - 1)!</script><p>时间复杂度：$O(n^2 \log n)$ </p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Author: AcFunction</span></span><br><span class="line"><span class="hljs-comment"> * Date:   2019-03-04 19:04:32</span></span><br><span class="line"><span class="hljs-comment"> * Email:  3486942970@qq.com</span></span><br><span class="line"><span class="hljs-comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> RG register </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, l, r) for(RG int i = l; i &lt;= r; i++) </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> per(i, r, l) for(RG int i = r; i &gt;= l; i--)</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">INIT</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  ios :: sync_with_stdio(<span class="hljs-literal">false</span>); <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">2005</span>; </span><br><span class="line"><span class="hljs-keyword">const</span> ll mod = (ll)<span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>; </span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> n, a[N], f[N][N];</span><br><span class="line"></span><br><span class="line">ll fac[N], g[N];  </span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lb</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123; <span class="hljs-keyword">return</span> x &amp; (-x); &#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BIT</span> &#123;</span></span><br><span class="line">  <span class="hljs-keyword">int</span> c[N]; </span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = x; i &lt;= N; i += lb(i))</span><br><span class="line">      c[i] += d, c[i] %= mod; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> ret = <span class="hljs-number">0</span>; </span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = x; i; i -= lb(i)) </span><br><span class="line">      ret += c[i], ret %= mod; </span><br><span class="line">    <span class="hljs-keyword">return</span> ret;  </span><br><span class="line">  &#125;</span><br><span class="line">&#125; b[N]; </span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> aa[N]; </span><br><span class="line"><span class="hljs-built_in">map</span> &lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; mp; <span class="hljs-keyword">int</span> cnt; </span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  INIT(); </span><br><span class="line">  <span class="hljs-built_in">cin</span> &gt;&gt; n; rep(i, <span class="hljs-number">1</span>, n) <span class="hljs-built_in">cin</span> &gt;&gt; aa[i], a[i] = aa[i]; </span><br><span class="line">  sort(aa + <span class="hljs-number">1</span>, aa + n + <span class="hljs-number">1</span>); </span><br><span class="line">  rep(i, <span class="hljs-number">1</span>, n) &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(!mp[aa[i]]) mp[aa[i]] = ++cnt; </span><br><span class="line">  &#125;</span><br><span class="line">  rep(i, <span class="hljs-number">1</span>, n) a[i] = mp[a[i]]; </span><br><span class="line">  rep(i, <span class="hljs-number">1</span>, n) f[i][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>; </span><br><span class="line">  rep(j, <span class="hljs-number">2</span>, n) &#123;</span><br><span class="line">    rep(i, <span class="hljs-number">1</span>, n) &#123;</span><br><span class="line">      f[i][j] = b[j - <span class="hljs-number">1</span>].sum(a[i]); </span><br><span class="line">      b[j - <span class="hljs-number">1</span>].add(a[i], f[i][j - <span class="hljs-number">1</span>]); </span><br><span class="line">    &#125;</span><br><span class="line">  &#125; fac[<span class="hljs-number">0</span>] = fac[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>; </span><br><span class="line">  ll ans = <span class="hljs-number">0</span>; </span><br><span class="line">  rep(i, <span class="hljs-number">2</span>, n) fac[i] = fac[i - <span class="hljs-number">1</span>] * i % mod; </span><br><span class="line">  rep(i, <span class="hljs-number">1</span>, n) </span><br><span class="line">    rep(j, <span class="hljs-number">1</span>, n) </span><br><span class="line">      g[i] += f[j][i], g[i] %= mod; </span><br><span class="line">  rep(i, <span class="hljs-number">1</span>, n) &#123;</span><br><span class="line">    ans += ((g[i] * fac[n - i] % mod) - ((i + <span class="hljs-number">1</span>) * g[i + <span class="hljs-number">1</span>] % mod * fac[n - i - <span class="hljs-number">1</span>]) % mod) % mod;</span><br><span class="line">    ans %= mod;  </span><br><span class="line">  &#125; <span class="hljs-built_in">cout</span> &lt;&lt; (ans + mod) % mod &lt;&lt; <span class="hljs-built_in">endl</span>; </span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容斥 </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BZOJ2839 集合计数</title>
      <link href="/2019/03/17/BZOJ2839/"/>
      <url>/2019/03/17/BZOJ2839/</url>
      
        <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>从大小为 $n$ 的集合中取出若干子集（至少一个），使得它们的交集的元素个数为 $K$ ，求取法的方案数，答案模$1000000007$</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>$ans$ = 先选出这 $k$ 个元素是哪些  * 让剩下的交集为空</p><p>让剩下的交集为空 =(容斥) 随便选 - 交集至少一个元素 + 交集至少两个元素 …  </p><p>交集至少为 $i$ 的方案数是 $\binom{n-k}{i} \cdot (2^{2^{n-k-i}}-1)$ (从剩下的 $n - k$ 里选 $i$ 个 * (有这些元素的子集随便选 - 啥都不选的一组)</p><script type="math/tex; mode=display">ans = \binom{n}{k}\sum\limits_{i=0}^{n-k}(-1)^i \binom{n-k}{i}\cdot (2^{2^{n-k-i}}-1)</script><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Author: AcFunction</span></span><br><span class="line"><span class="hljs-comment"> * Date:   2019-03-04 17:33:39</span></span><br><span class="line"><span class="hljs-comment"> * Email:  3486942970@qq.com</span></span><br><span class="line"><span class="hljs-comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> RG register </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, l, r) for(RG int i = l; i &lt;= r; i++) </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> per(i, r, l) for(RG int i = r; i &gt;= l; i--)</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">INIT</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  ios :: sync_with_stdio(<span class="hljs-literal">false</span>); <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1000005</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> ll mod = (ll)<span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;  </span><br><span class="line"></span><br><span class="line">ll fac[N], ans; </span><br><span class="line"></span><br><span class="line"><span class="hljs-function">ll <span class="hljs-title">fpw</span><span class="hljs-params">(ll x, ll k, ll p)</span> </span>&#123;</span><br><span class="line">  ll ret = <span class="hljs-number">1l</span>l; </span><br><span class="line">  <span class="hljs-keyword">while</span>(k) &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(k &amp; <span class="hljs-number">1</span>) ret = ret * x % p; </span><br><span class="line">    x = x * x % p; k &gt;&gt;= <span class="hljs-number">1</span>; </span><br><span class="line">  &#125; <span class="hljs-keyword">return</span> ret; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">prework</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  fac[<span class="hljs-number">0</span>] = fac[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>; </span><br><span class="line">  rep(i, <span class="hljs-number">2</span>, n) fac[i] = fac[i - <span class="hljs-number">1</span>] * i % mod; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function">ll <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">if</span>(m &gt; n) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">  <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> fac[n] * fpw(fac[n - m], mod - <span class="hljs-number">2</span>, mod) % mod * </span><br><span class="line">              fpw(fac[m], mod - <span class="hljs-number">2</span>, mod) % mod; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  INIT(); </span><br><span class="line">  <span class="hljs-keyword">int</span> n, k; <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; k; prework(n); </span><br><span class="line">  ll pw1 = ((n - k) &amp; <span class="hljs-number">1</span>) ? <span class="hljs-number">-1</span> : <span class="hljs-number">1</span>, pw2 = <span class="hljs-number">2</span>; </span><br><span class="line">  per(i, n - k, <span class="hljs-number">0</span>) &#123;</span><br><span class="line">    ans += pw1 * (pw2 - <span class="hljs-number">1</span>) % mod * C(n - k, i) % mod;</span><br><span class="line">    ans %= mod; pw1 *= <span class="hljs-number">-1</span>; pw2 *= pw2; pw2 %= mod;  </span><br><span class="line">  &#125; ans = ans * C(n, k) % mod; ans = (ans + mod) % mod; </span><br><span class="line">  <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;  </span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容斥 </tag>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BZOJ1042 「HNOI2008」硬币购物</title>
      <link href="/2019/03/09/BZOJ1042/"/>
      <url>/2019/03/09/BZOJ1042/</url>
      
        <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>一共有 $4$ 种硬币。面值分别为 $c_1,c_2,c_3,c_4$ 。某人去商店买东西，去了 $tot$ 次。每次带 $d_i$ 枚 $c_i$ 硬币，买 $s$ 的价值的东西。请问每次有多少种付款方法。</p><a id="more"></a> <h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>考虑没有 $d$ 的限制，直接完全背包。$dp_i$ 表示 $i$ 这个面值用 $c_1…c_4$ 凑有多少种方法</p><p>加上限制就容斥枚举 $16$ 种情况表示哪几种面值的性质没有被满足。</p><p>然后可以观察到，如果对于 $i$ 不满足限制，方案数就是 $dp_{s-(d_i+1)c_i}$ </p><p>所以归纳一下就是 </p><script type="math/tex; mode=display">ans = \sum\limits_{S \subseteq {1,2,3,4}}(-1)^{|S|}dp_{(s-\sum\limits_{x \in S} (d_x+1)c_x)}</script><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Author: AcFunction</span></span><br><span class="line"><span class="hljs-comment"> * Date:   2019-03-04 17:57:01</span></span><br><span class="line"><span class="hljs-comment"> * Email:  3486942970@qq.com</span></span><br><span class="line"><span class="hljs-comment">**/</span></span><br><span class="line"> </span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> RG register </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, l, r) for(RG int i = l; i &lt;= r; i++) </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> per(i, r, l) for(RG int i = r; i &gt;= l; i--)</span></span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">INIT</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  ios :: sync_with_stdio(<span class="hljs-literal">false</span>); <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>); </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100100</span>; </span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">int</span> n, c[<span class="hljs-number">5</span>], d[<span class="hljs-number">5</span>]; <span class="hljs-keyword">int</span> dp[N]; </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  INIT(); dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>; </span><br><span class="line">  rep(i, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>) <span class="hljs-built_in">cin</span> &gt;&gt; c[i]; <span class="hljs-built_in">cin</span> &gt;&gt; n; </span><br><span class="line">  rep(j, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>) rep(i, <span class="hljs-number">0</span>, <span class="hljs-number">100000</span>)</span><br><span class="line">      <span class="hljs-keyword">if</span>(i + c[j] &lt;= <span class="hljs-number">100000</span>) </span><br><span class="line">        dp[i + c[j]] += dp[i]; </span><br><span class="line">  rep(i, <span class="hljs-number">1</span>, n) &#123; <span class="hljs-keyword">int</span> s; <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>; </span><br><span class="line">    rep(j, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>) <span class="hljs-built_in">cin</span> &gt;&gt; d[j]; <span class="hljs-built_in">cin</span> &gt;&gt; s;  </span><br><span class="line">    rep(j, <span class="hljs-number">0</span>, <span class="hljs-number">15</span>) &#123;</span><br><span class="line">      <span class="hljs-keyword">int</span> s1 = <span class="hljs-number">0</span>, s2 = s; </span><br><span class="line">      rep(t, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>) </span><br><span class="line">        <span class="hljs-keyword">if</span>(j &amp; (<span class="hljs-number">1</span> &lt;&lt; (t - <span class="hljs-number">1</span>))) &#123;</span><br><span class="line">          s1++; s2 -= (d[t] + <span class="hljs-number">1</span>) * c[t]; </span><br><span class="line">        &#125;</span><br><span class="line">      ans += ((s1 &amp; <span class="hljs-number">1</span>) ? <span class="hljs-number">-1</span> : <span class="hljs-number">1</span>) * (s2 &gt;= <span class="hljs-number">0</span> ? dp[s2] : <span class="hljs-number">0</span>); </span><br><span class="line">    &#125;  <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容斥 </tag>
            
            <tag> 组合数学 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类欧几里得算法学习笔记</title>
      <link href="/2019/03/03/%E7%B1%BB%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/03/03/%E7%B1%BB%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>类欧几里得算法用来求诸如此类问题：</p><script type="math/tex; mode=display">f(a,b,c,n)=\sum\limits_{i=0}^{n} \lfloor\frac{ai + b}{c}\rfloor</script><a id="more"></a> <p><strong>分类讨论</strong></p><p><strong>第一种情况</strong>：$a=0​$ 。那么 </p><script type="math/tex; mode=display">f(a,b,c,n)= \sum\limits_{i=0}^{n} \lfloor \frac{b}{c} \rfloor=(n+1)\lfloor \frac{b}{c} \rfloor</script><p><strong>第二种情况</strong>：$a,b$ 中有一个大于等于 $c$ 。那么</p><script type="math/tex; mode=display">\begin{aligned}f(a,b,c,n) &= \sum\limits_{i=0}^{n} \lfloor\frac{ai + b}{c}\rfloor \\\&= \sum\limits_{i = 0}^{n}(\lfloor\frac{a\bmod c\cdot i + b \bmod c}{c}\rfloor+i\lfloor\frac{a}{c} \rfloor+\lfloor \frac{b}{c} \rfloor) \\\&= \sum\limits_{i = 0}^{n}\lfloor\frac{a\bmod c\cdot i + b \bmod c}{c}\rfloor +\frac{n(n+1)}{2} \cdot \lfloor\frac{a}{c} \rfloor + (n+1)\lfloor \frac{b}{c} \rfloor \\\&= f(a\bmod c, b \bmod c , c, n) + \frac{n(n+1)}{2} \cdot \lfloor\frac{a}{c} \rfloor + (n+1)\lfloor \frac{b}{c} \rfloor\end{aligned}</script><p><strong>第三种情况</strong>：$a&lt;c$ 且 $b &lt; c$ 。那么 </p><script type="math/tex; mode=display">\begin{aligned}f(a,b,c,n) &= \sum\limits_{i=0}^{n} \lfloor\frac{ai + b}{c}\rfloor \\\&= \sum\limits_{i=0}^{n} \sum\limits_{j=0}^{\lfloor\frac{an + b}{c}\rfloor-1} [j+1 \leq \lfloor\frac{ai + b}{c}\rfloor] \\\&= \sum\limits_{j=0}^{\lfloor\frac{an + b}{c}\rfloor-1}\sum\limits_{i=0}^{n} [c(j+1) <ai + b + 1] \\\&= \sum\limits_{j=0}^{\lfloor\frac{an + b}{c}\rfloor-1}\sum\limits_{i=0}^{n} [i > \frac{cj+c-b-1}{a}] \\\&= \sum\limits_{j=0}^{\lfloor\frac{an + b}{c}\rfloor-1}(n - \lfloor \frac{cj+c-b-1}{a} \rfloor) \\\&= n \cdot \lfloor\frac{an + b}{c}\rfloor - \sum\limits_{j=0}^{\lfloor\frac{an + b}{c}\rfloor-1}\lfloor \frac{cj+c-b-1}{a} \rfloor \\\&= n \cdot \lfloor\frac{an + b}{c}\rfloor - f(c, c - b - 1, a, \lfloor\frac{an + b}{c}\rfloor-1)\end{aligned}</script><p>递归计算即可 复杂度一个 $\log$ </p>]]></content>
      
      
      <categories>
          
          <category> 算法笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 类欧几里得算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杜教筛学习笔记</title>
      <link href="/2019/03/01/%E6%9D%9C%E6%95%99%E7%AD%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/03/01/%E6%9D%9C%E6%95%99%E7%AD%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>设现在要求积性函数 $f$ 的前缀和， 设  $\sum \limits_{i=1}^{n} f(i) = S(n)$。</p><p>再找一个积性函数 $g$ ，则考虑它们的狄利克雷卷积的前缀和</p><script type="math/tex; mode=display">\begin{aligned} \sum\limits_{i=1}^{n}(f*g)(i)&= \sum\limits_{i=1}^{n} \sum \limits _{d|i} f(d)g(\frac{i}{d}) \\\ &= \sum \limits _{d=1}^{n} g(d)\sum\limits _{i=1}^{\lfloor \frac{n}{d}\rfloor } f(i) \\\&= \sum \limits _{d=1}^{n} g(d) S(\lfloor \frac{n}{d} \rfloor)     \end{aligned}</script><p>其中得到第一行是根据狄利克雷卷积的定义。</p><p>得到第二行则是先枚举 $d$ 提出 $g$ 。</p><p>得到第三行则是把 $\sum\limits _{i=1}^{\lfloor \frac{n}{d}\rfloor } f(i) $ 替换为 $S(\lfloor \frac{n}{d} \rfloor) $</p><p>接着考虑 $g(1)S(n)$ 等于什么。</p><p>可以发现，他就等于 </p><script type="math/tex; mode=display">\sum \limits _{i=1}^{n} g(i) S(\lfloor \frac{n}{i} \rfloor) - \sum \limits _{i=2}^{n} g(i) S(\lfloor \frac{n}{i} \rfloor)</script><p>（可以理解成从1开始的前缀和减去从2开始的前缀和就是第一项）</p><p>前面这个式子 $\sum \limits _{i=1}^{n} g(i) S(\lfloor \frac{n}{i} \rfloor)$  </p><p>根据刚才的推导，他就等于 $\sum\limits_{i=1}^{n}(f*g)(i)$</p><p>所以得到杜教筛的核心式子：</p><script type="math/tex; mode=display">g(1)S(n)=\sum\limits_{i=1}^{n}(f*g)(i) - \sum \limits _{i=2}^{n} g(i) S(\lfloor \frac{n}{i} \rfloor)</script><p>得到这个式子之后有什么用呢？</p><p>现在如果可以找到一个合适的积性函数 $g$ ，使得可以快速算出 $\sum\limits_{i=1}^{n}(f*g)(i)$ 和 $g$ 的前缀和，便可以用数论分块递归地求解。</p><p>代码按照理解大概可以写成这样（默认 <code>ll</code> 为 <code>long long</code>）<br>（可以理解成一个伪代码。。就是一个思路的框架）<br><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function">ll <span class="hljs-title">GetSum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123; <span class="hljs-comment">// 算 f 前缀和的函数</span></span><br><span class="line">  ll ans = f_g_sum(n); <span class="hljs-comment">// 算 f * g 的前缀和</span></span><br><span class="line">  <span class="hljs-comment">// 以下这个 for 循环是数论分块</span></span><br><span class="line">  <span class="hljs-keyword">for</span>(ll l = <span class="hljs-number">2</span>, r; l &lt;= n; l = r + <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// 注意从 2 开始</span></span><br><span class="line">    r = (n / (n / l)); </span><br><span class="line">    ans -= (g_sum(r) - g_sum(l - <span class="hljs-number">1</span>)) * GetSum(n / l);</span><br><span class="line">    <span class="hljs-comment">// g_sum 是 g 的前缀和</span></span><br><span class="line">    <span class="hljs-comment">// 递归 GetSum 求解</span></span><br><span class="line">  &#125; <span class="hljs-keyword">return</span> ans; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个代码的复杂度是 $O(n^{\frac{3}{4}})$，证明如下：</p><p>设求出 $S(n)$ 的复杂度是 $T(n)$ ，要求出 $S(n)$ 需要求出 $\sqrt n$ 个 $S (\lfloor \frac{n}{i} \rfloor)$ 的值，结合数论分块的复杂度 $O(\sqrt n)$ 可得：</p><script type="math/tex; mode=display">T(n) = \sum\limits_{i=1}^{\sqrt n} O(\sqrt i) + O(\sqrt {\frac{n}{i}})=O(n^{\frac{3}{4}})</script><p>还可以进一步优化杜教筛，即先线性筛出前 $m$ 个答案，之后再用杜教筛。这个优化之后的复杂度是：</p><script type="math/tex; mode=display">T(n) = \sum\limits_{i=1}^{\lfloor \frac{n}{m} \rfloor} \sqrt \frac{n}{i} = O({\frac{n}{\sqrt m}})</script><p>当 $m = n ^ {\frac{2}{3}}$ 时，$T(n) = O(n^{\frac{2}{3}})$</p><p>可以使用哈希表来存下已经求过的答案，也可以不用。</p><p>考虑到上面的求和过程中出现的都是 $\lfloor \frac{n}{i} \rfloor $ 。开一个大小为两倍 $\sqrt n$ 的数组 $dp$ 记录答案。如果现在需要求出 <code>GetSum(x)</code> ，若 $x \leq \sqrt n$ ，返回 <code>dp[x]</code> ，否则返回 <code>dp[sqrt n + n / i]</code> 即可。这样可以省去哈希表的复杂度。</p>]]></content>
      
      
      <categories>
          
          <category> 算法笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 杜教筛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BZOJ3160 万径人踪灭</title>
      <link href="/2019/02/28/BZOJ3160/"/>
      <url>/2019/02/28/BZOJ3160/</url>
      
        <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>给定一个字符串由 ‘a’ 或 ‘b’ 组成。求有多少个子序列满足字母和坐标都关于一条对称轴对称并且不是连续的</p><p>字符串长度 $=n \leq 10^5$</p><a id="more"></a> <h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>默认字符串为 $S$ 从 $0$ 开始标号。 </p><p>答案等于所有的满足字母和坐标都关于一条对称轴对称的子序列数量 - 连续的满足这个性质的子序列数量</p><p>后面这个可以直接用 <strong>manacher算法</strong> 直接求出，只需要考虑前面怎么求</p><p>考虑怎么算出关于第 $i$ 个位置对称的子序列个数。设有 $k$ 组 $(x, y)$ 使得 $x + y = 2 i$ 且 $x, y \not= i$ 且 $S_x = S_y$ ，那么方案数就是 $2^{k+1}-1$ （k 组和 $i$ 这个位置选不选减去都不选的一种情况）</p><p>考虑怎么算出关于第 $i$ 到第 $i+1$ 个位置中间这个空隙（可以认为是 $i + \frac{1}{2}$）对称的子序列的个数。设有 $k$ 组 $(x,y)$ 满足 $S_x = S_y$ 且 $x+y = 2(i+\frac{1}{2}) = 2i + 1$ ，那么方案数就是 $2^k - 1$（和上面不一样的原因是自己这个位置不是整数不能被选所以不用考虑）</p><p>令 $ f_i = \sum\limits_{x+y=i} [S_x=S_y] $ ，那么 $f_i$ 和这个 $k$ 的关系是什么呢？</p><p>这里要想清楚。当 $i$ 是偶数的时候，$[S_{\frac{i}{2}}=S_{\frac{i}{2}}]$ 其实也被算了进去，所以应该是 $f_i = 2k + 1$；而 $i$ 是奇数的时候就没有这个问题，直接就是 $f_i = 2k$；综合一下其实就是 $k = \lfloor \frac{f_i}{2} \rfloor$</p><p>然后就是怎么求 $f_i$ 的问题了。这是一个卷积的形式，又显然字母之间是独立的。那么对于每一个字母 $x$，令 $g_i = [S_i = x]$，那么 $f$ 就是由两个 $g$ 卷积得到的。所以最后 f 就是对于两个字母分别做一遍卷积加起来就行。</p><p>具体的，这道题的做法是：</p><ol><li>拿到字符串，跑 manacher 得到 s1 </li><li>令 $f_i = [S_i = a]$，将 $f * f$ 加到多项式 $h$ 中</li><li>令 $g_i = [S_i = b]$，将 $g * g$ 加到多项式 $h$ 中</li><li>答案就相当于 $ \sum\limits_{i=0}^{2n -  2} (2^{\lfloor\frac{h_i}{2}\rfloor + [2|i]}-1)$ （可能有点复杂不过综合上面来看是显然的）</li></ol><p>对于卷积，我用的是 <strong>NTT</strong> (FFT 我也写了，慢了 4 倍嘿嘿)</p><p>时间复杂度 $O(n \log n)$</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Author: AcFunction</span></span><br><span class="line"><span class="hljs-comment"> * Date:   2019-02-26 22:14:41</span></span><br><span class="line"><span class="hljs-comment"> * Email:  3486942970@qq.com</span></span><br><span class="line"><span class="hljs-comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> db double </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> RG register </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, l, r) for(RG int i = l; i &lt;= r; i++) </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> per(i, r, l) for(RG int i = r; i &gt;= l; i--)</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">INIT</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  ios :: sync_with_stdio(<span class="hljs-literal">false</span>); <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1001000</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> ll mod = (ll)<span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>; </span><br><span class="line"><span class="hljs-keyword">const</span> ll MOD = <span class="hljs-number">998244353</span>; </span><br><span class="line"><span class="hljs-keyword">const</span> ll G = <span class="hljs-number">3</span>; </span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> n, len[N], r[N], L; </span><br><span class="line"><span class="hljs-keyword">char</span> S[N]; <span class="hljs-built_in">string</span> s; </span><br><span class="line">ll f[N], g[N], tmp[N], Ans[N], invl;  </span><br><span class="line"></span><br><span class="line"><span class="hljs-function">ll <span class="hljs-title">fpw</span><span class="hljs-params">(ll x, ll k, ll p)</span> </span>&#123;</span><br><span class="line">  ll ret = <span class="hljs-number">1l</span>l; </span><br><span class="line">  <span class="hljs-keyword">while</span>(k) &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(k &amp; <span class="hljs-number">1</span>) ret = ret * x % p; </span><br><span class="line">    x = x * x % p; k &gt;&gt;= <span class="hljs-number">1</span>; </span><br><span class="line">  &#125; <span class="hljs-keyword">return</span> ret; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">NTT</span><span class="hljs-params">(ll *a, <span class="hljs-keyword">int</span> op)</span> </span>&#123;</span><br><span class="line">  rep(i, <span class="hljs-number">0</span>, L - <span class="hljs-number">1</span>) tmp[i] = a[r[i]]; </span><br><span class="line">  rep(i, <span class="hljs-number">0</span>, L - <span class="hljs-number">1</span>) a[i] = tmp[i]; </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; L; i &lt;&lt;= <span class="hljs-number">1</span>) &#123;</span><br><span class="line">    ll w = fpw(G, (MOD - <span class="hljs-number">1</span>) / (i &lt;&lt; <span class="hljs-number">1</span>), MOD);</span><br><span class="line">    <span class="hljs-keyword">if</span>(op == <span class="hljs-number">-1</span>) w = fpw(w, MOD - <span class="hljs-number">2</span>, MOD); </span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; L; j += i &lt;&lt; <span class="hljs-number">1</span>) &#123;</span><br><span class="line">      ll wn = <span class="hljs-number">1l</span>l; </span><br><span class="line">      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = j; k &lt; i + j; k++) &#123;</span><br><span class="line">        ll t = a[i + k] * wn % MOD; </span><br><span class="line">        a[i + k] = (a[k] - t + MOD) % MOD; </span><br><span class="line">        a[k] = (a[k] + t) % MOD; wn = wn * w % MOD; </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">if</span>(op == <span class="hljs-number">-1</span>) &#123;</span><br><span class="line">    rep(i, <span class="hljs-number">0</span>, L - <span class="hljs-number">1</span>) </span><br><span class="line">      a[i] *= invl, a[i] %= MOD; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  INIT(); </span><br><span class="line">  <span class="hljs-built_in">cin</span> &gt;&gt; (S + <span class="hljs-number">1</span>); n = <span class="hljs-built_in">strlen</span>(S + <span class="hljs-number">1</span>);</span><br><span class="line">  s = <span class="hljs-string">"^#"</span>; </span><br><span class="line">  rep(i, <span class="hljs-number">1</span>, n) &#123;</span><br><span class="line">    s += S[i]; s += <span class="hljs-string">'#'</span>; </span><br><span class="line">  &#125; <span class="hljs-keyword">int</span> mx = <span class="hljs-number">0</span>, id = <span class="hljs-number">0</span>; </span><br><span class="line">  rep(i, <span class="hljs-number">1</span>, <span class="hljs-number">2</span> * n + <span class="hljs-number">1</span>) &#123;</span><br><span class="line">    len[i] = mx &gt; i ? min(len[<span class="hljs-number">2</span> * id - i], mx - i) : <span class="hljs-number">1</span>; </span><br><span class="line">    <span class="hljs-keyword">while</span>(s[i - len[i]] == s[i + len[i]]) len[i]++; </span><br><span class="line">    <span class="hljs-keyword">if</span>(mx &lt; i + len[i]) mx = i + len[i], id = i; </span><br><span class="line">  &#125;</span><br><span class="line">  ll ans = <span class="hljs-number">0</span>; </span><br><span class="line">  rep(i, <span class="hljs-number">1</span>, <span class="hljs-number">2</span> * n + <span class="hljs-number">1</span>) ans += len[i] / <span class="hljs-number">2</span>, ans %= mod; </span><br><span class="line">  L = <span class="hljs-number">1</span>; <span class="hljs-keyword">while</span>(L &lt;= <span class="hljs-number">2</span> * n) L &lt;&lt;= <span class="hljs-number">1</span>; </span><br><span class="line">  invl = fpw(L, MOD - <span class="hljs-number">2</span>, MOD); </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; L; i &lt;&lt;= <span class="hljs-number">1</span>)</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++)</span><br><span class="line">      r[i + j] = r[j] + L / (i * <span class="hljs-number">2</span>); </span><br><span class="line">  rep(i, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>) f[i] = (S[i + <span class="hljs-number">1</span>] == <span class="hljs-string">'a'</span>); </span><br><span class="line">  rep(i, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>) g[i] = f[i]; </span><br><span class="line">  NTT(f, <span class="hljs-number">1</span>), NTT(g, <span class="hljs-number">1</span>); </span><br><span class="line">  rep(i, <span class="hljs-number">0</span>, L - <span class="hljs-number">1</span>) Ans[i] = f[i] * g[i] % MOD; </span><br><span class="line">  rep(i, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>) f[i] = (S[i + <span class="hljs-number">1</span>] == <span class="hljs-string">'b'</span>); </span><br><span class="line">  rep(i, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>) g[i] = f[i];  </span><br><span class="line">  rep(i, n, L - <span class="hljs-number">1</span>) f[i] = g[i] = <span class="hljs-number">0</span>; </span><br><span class="line">  NTT(f, <span class="hljs-number">1</span>), NTT(g, <span class="hljs-number">1</span>); </span><br><span class="line">  rep(i, <span class="hljs-number">0</span>, L - <span class="hljs-number">1</span>) Ans[i] += f[i] * g[i] % MOD, Ans[i] %= MOD;</span><br><span class="line">  NTT(Ans, <span class="hljs-number">-1</span>); ll anss = <span class="hljs-number">0</span>;</span><br><span class="line">  rep(i, <span class="hljs-number">0</span>, <span class="hljs-number">2</span> * n - <span class="hljs-number">2</span>) &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> t = Ans[i]; </span><br><span class="line">    t = t / <span class="hljs-number">2</span>; </span><br><span class="line">    <span class="hljs-keyword">if</span>(i &amp; <span class="hljs-number">1</span>) &#123;</span><br><span class="line">      anss += (fpw(<span class="hljs-number">2</span>, t, mod) - <span class="hljs-number">1</span>) % mod; anss %= mod; </span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> anss += (fpw(<span class="hljs-number">2</span>, t + <span class="hljs-number">1</span>, mod) - <span class="hljs-number">1</span>) % mod; anss %= mod; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-built_in">cout</span> &lt;&lt; ((anss - ans) % mod + mod) % mod &lt;&lt; <span class="hljs-built_in">endl</span>; </span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> manacher </tag>
            
            <tag> FFT </tag>
            
            <tag> NTT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BZOJ3091 城市旅行</title>
      <link href="/2019/02/21/BZOJ3091/"/>
      <url>/2019/02/21/BZOJ3091/</url>
      
        <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>给一颗以 $1$ 为根的有根树，维护以下操作</p><ol><li>连接 $(u,v)$ 这条边</li><li>删除 $(u,v)$ 这条边</li><li>给 $u$ 到 $v$ 的链上每个点加上一个数</li><li>求在 $(u,v)$ 上任意选两个点它们之间的权值和的期望</li></ol><p>$n, m \leq 50000, a_i \leq 10^6$</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>前三个操作就是 LCT 板子，考虑如何在 LCT 上维护 4 操作</p><p>为了方便，设这个路径是 $a_1, a_2, a_3, \cdots, a_{siz}$ ，其中 $siz$ 是长度</p><p>考虑每个点的贡献，易得我们要求的期望值 $=\frac{\sum\limits_{i=1}^{siz} i (siz - i + 1)a_i}{\frac{siz(siz+1)}{2}}$ </p><p>显然这个分母很好搞，只需要考虑怎么在 LCT 上维护分子，或者说在平衡树上。</p><p>也就是说，如果知道左子和右子的答案如何更新出这个点的答案</p><p>设左子表示 $a_1, a_2, \cdots, a_p$， 该点的值是 $a_{p+1}$ ，右子表示 $a_{p+2}, \cdots, a_{siz}$ </p><p>可以得到：左子的 $siz_0 = p$，右子的 $siz_1 = siz - p - 1$</p><p>改点要的答案减去左子的答案减去右子的答案便是 </p><p>$\sum\limits_{i=1}^{siz}i(siz - i + 1)a_i - \sum\limits_{i=1}^{p}i(p-i+1)a_i-\sum\limits_{i=p+2}^{siz} (i-p-1)(siz - i + 1)a_i$</p><p>$=\sum\limits_{i=1}^{p} i(siz-p)a_i+a_{p+1}(p+1)(siz-p)+\sum\limits_{i=p+2}^{siz}(p+1)(siz-i+1)a_i$</p><p>根据上面得到的 $siz_0=p,siz_1=siz-p-1$ 简单化简一下可以得到</p><p>$=(siz_1+1)\sum\limits_{i=1}^{siz_0}i\cdot a_i+a_{siz_0+1}(siz_0+1)(siz_1+1)+(siz_0+1)\sum\limits_{i=p+2}^{siz}(siz - i +1)a_i$</p><p>到这里应该你已经知道怎么做了..</p><p>为了清楚，再令 </p><p>$b_1, b_2, \cdots,b_{siz_b}$ 是左子的， $c_1, c_2, \cdots,c_{siz_c}$ 是右子的，$d$ 是这个点本身的值。那么可以化简成简单清楚对称的形式：</p><p>$=(siz_c+1)\sum\limits_{i=1}^{siz_b}i\cdot b_i+d(siz_b+1)(siz_c+1)+(siz_b+1)\sum\limits_{i=1}^{siz_c}(siz_c-i+1)c_i$</p><p>你只需要每个点再维护两个值：</p><p>$ls=\sum\limits_{i=1}^{siz}i\cdot a_i$ 和 $rs=\sum\limits_{i=1}^{siz}(siz - i +1)a_i$ </p><p>就可以从左右两个儿子得到自己的值</p><p>这两个东西维护还是比较简单的..具体的话就是再维护一个 $s$ 为子树里所有数的和然后令 $b,c$ 是左右两个儿子，那么有</p><p>$ls = ls_b+d\cdot(siz_b+1)+ls_c+s_c (siz_b+1)$</p><p>和</p><p>$rs=rs_c+d\cdot(siz_c+1)+rs_b+s_b(siz_c+1)$ </p><p>就这样维护</p><p>以上是如何用左右儿子的信息得到自己，再来考虑链加的问题</p><p>一条链加上一个数 $x$ ，那么会如何影响我们维护的值？</p><ul><li>对于 $s$：$s = s + siz\cdot x$</li><li>对于 $ls$：$ls = ls + \sum\limits_{i=1}^{siz}i \cdot x = ls + \frac{siz(siz+1)}{2}\cdot x$</li><li>对于 $rs$：和 ls 一样 $rs = rs+\frac{siz(siz+1)}{2}\cdot x$</li><li>对于最后的答案 $S$：$S = S + \sum\limits_{i=1}^{siz} i \cdot (siz - i +1)\cdot x$ 通过简单计算可得 $S= S+\frac{siz(siz+1)(siz+2)}{6}\cdot x$</li><li>对于自己的值：直接加上 $x$ （废话）</li></ul><p>然后 LCT 板子套一套就做完了</p><p>注意事项：</p><ul><li>翻转的时候需要 swap(ls, rs)</li><li>两个点之间是联通的时候才执行链加操作（坑死我了）</li></ul><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Author: AcFunction</span></span><br><span class="line"><span class="hljs-comment"> * Date:   2019-02-17 11:17:08</span></span><br><span class="line"><span class="hljs-comment"> * Email:  3486942970@qq.com</span></span><br><span class="line"><span class="hljs-comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">200200</span>; </span><br><span class="line"><span class="hljs-keyword">const</span> ll INF = (ll)<span class="hljs-number">1e18</span>; </span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> n, m;</span><br><span class="line">ll a[N]; </span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">int</span> rev; </span><br><span class="line">  ll d, s, ls, rs, s1, add, siz; </span><br><span class="line">  node *ch[<span class="hljs-number">2</span>], *prt;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">isr</span><span class="hljs-params">()</span> </span>&#123; </span><br><span class="line">    <span class="hljs-keyword">return</span> (!prt) || ( prt-&gt;ch[<span class="hljs-number">0</span>] != (<span class="hljs-keyword">this</span>) &amp;&amp; prt-&gt;ch[<span class="hljs-number">1</span>] != (<span class="hljs-keyword">this</span>) ); </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dir</span><span class="hljs-params">()</span> </span>&#123; </span><br><span class="line">    <span class="hljs-keyword">return</span> prt-&gt;ch[<span class="hljs-number">1</span>] == (<span class="hljs-keyword">this</span>); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setc</span><span class="hljs-params">(node *p, <span class="hljs-keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    (<span class="hljs-keyword">this</span>)-&gt;ch[k] = p; </span><br><span class="line">    <span class="hljs-keyword">if</span>(p) p-&gt;prt = (<span class="hljs-keyword">this</span>); </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setr</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    rev ^= <span class="hljs-number">1</span>; </span><br><span class="line">    swap(ls, rs);</span><br><span class="line">    swap(ch[<span class="hljs-number">0</span>], ch[<span class="hljs-number">1</span>]); </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">seta</span><span class="hljs-params">(ll x)</span> </span>&#123;</span><br><span class="line">    d += x, add += x; s += siz * x; </span><br><span class="line">    ls += siz * (siz + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span> * x; </span><br><span class="line">    rs += siz * (siz + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span> * x; </span><br><span class="line">    s1 += siz * (siz + <span class="hljs-number">1</span>) * (siz + <span class="hljs-number">2</span>) / <span class="hljs-number">6</span> * x; </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">()</span> </span>&#123; </span><br><span class="line">    siz = <span class="hljs-number">1</span>, s = d; </span><br><span class="line">    <span class="hljs-keyword">if</span>(ch[<span class="hljs-number">0</span>]) siz += ch[<span class="hljs-number">0</span>]-&gt;siz, s += ch[<span class="hljs-number">0</span>]-&gt;s; </span><br><span class="line">    <span class="hljs-keyword">if</span>(ch[<span class="hljs-number">1</span>]) siz += ch[<span class="hljs-number">1</span>]-&gt;siz, s += ch[<span class="hljs-number">1</span>]-&gt;s; </span><br><span class="line">    <span class="hljs-keyword">if</span>(ch[<span class="hljs-number">0</span>] &amp;&amp; ch[<span class="hljs-number">1</span>]) &#123;</span><br><span class="line">      ls = ch[<span class="hljs-number">0</span>]-&gt;ls + d * (ch[<span class="hljs-number">0</span>]-&gt;siz + <span class="hljs-number">1</span>) + ch[<span class="hljs-number">1</span>]-&gt;ls + ch[<span class="hljs-number">1</span>]-&gt;s * (ch[<span class="hljs-number">0</span>]-&gt;siz + <span class="hljs-number">1</span>); </span><br><span class="line">      rs = ch[<span class="hljs-number">1</span>]-&gt;rs + d * (ch[<span class="hljs-number">1</span>]-&gt;siz + <span class="hljs-number">1</span>) + ch[<span class="hljs-number">0</span>]-&gt;rs + ch[<span class="hljs-number">0</span>]-&gt;s * (ch[<span class="hljs-number">1</span>]-&gt;siz + <span class="hljs-number">1</span>);</span><br><span class="line">      s1 = ch[<span class="hljs-number">0</span>]-&gt;s1 + ch[<span class="hljs-number">1</span>]-&gt;s1;</span><br><span class="line">      s1 += ch[<span class="hljs-number">0</span>]-&gt;ls * (ch[<span class="hljs-number">1</span>]-&gt;siz + <span class="hljs-number">1</span>);</span><br><span class="line">      s1 += ch[<span class="hljs-number">1</span>]-&gt;rs * (ch[<span class="hljs-number">0</span>]-&gt;siz + <span class="hljs-number">1</span>); </span><br><span class="line">      s1 += d * (ch[<span class="hljs-number">0</span>]-&gt;siz + <span class="hljs-number">1</span>) * (ch[<span class="hljs-number">1</span>]-&gt;siz + <span class="hljs-number">1</span>);  </span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ch[<span class="hljs-number">0</span>]) &#123;</span><br><span class="line">      ls = ch[<span class="hljs-number">0</span>]-&gt;ls + d * (ch[<span class="hljs-number">0</span>]-&gt;siz + <span class="hljs-number">1</span>); </span><br><span class="line">      rs = d + ch[<span class="hljs-number">0</span>]-&gt;rs + ch[<span class="hljs-number">0</span>]-&gt;s; </span><br><span class="line">      s1 = ch[<span class="hljs-number">0</span>]-&gt;s1 + ch[<span class="hljs-number">0</span>]-&gt;ls + d * (ch[<span class="hljs-number">0</span>]-&gt;siz + <span class="hljs-number">1</span>); </span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ch[<span class="hljs-number">1</span>]) &#123;</span><br><span class="line">      ls = d + ch[<span class="hljs-number">1</span>]-&gt;ls + ch[<span class="hljs-number">1</span>]-&gt;s; </span><br><span class="line">      rs = d * (ch[<span class="hljs-number">1</span>]-&gt;siz + <span class="hljs-number">1</span>) + ch[<span class="hljs-number">1</span>]-&gt;rs; </span><br><span class="line">      s1 = ch[<span class="hljs-number">1</span>]-&gt;s1 + ch[<span class="hljs-number">1</span>]-&gt;rs + d * (ch[<span class="hljs-number">1</span>]-&gt;siz + <span class="hljs-number">1</span>); </span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">      ls = rs = s1 = d; </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(rev) &#123;</span><br><span class="line">      <span class="hljs-keyword">if</span>(ch[<span class="hljs-number">0</span>]) ch[<span class="hljs-number">0</span>]-&gt;setr();</span><br><span class="line">      <span class="hljs-keyword">if</span>(ch[<span class="hljs-number">1</span>]) ch[<span class="hljs-number">1</span>]-&gt;setr(); </span><br><span class="line">      rev = <span class="hljs-number">0</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span>(add) &#123;</span><br><span class="line">      <span class="hljs-keyword">if</span>(ch[<span class="hljs-number">0</span>]) ch[<span class="hljs-number">0</span>]-&gt;seta(add);</span><br><span class="line">      <span class="hljs-keyword">if</span>(ch[<span class="hljs-number">1</span>]) ch[<span class="hljs-number">1</span>]-&gt;seta(add); </span><br><span class="line">      add = <span class="hljs-number">0</span>; </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125; pool[N * <span class="hljs-number">2</span>], *P[N], *cur = pool;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function">node *<span class="hljs-title">New</span><span class="hljs-params">(ll d)</span> </span>&#123; </span><br><span class="line">  node *p = cur++; </span><br><span class="line">  p-&gt;d = d, p-&gt;ls = p-&gt;rs = d; </span><br><span class="line">  p-&gt;s = p-&gt;s1 = d; </span><br><span class="line">  p-&gt;prt = p-&gt;ch[<span class="hljs-number">0</span>] = p-&gt;ch[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>; </span><br><span class="line">  p-&gt;siz = <span class="hljs-number">1</span>; </span><br><span class="line">  <span class="hljs-keyword">return</span> p; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">rotate</span><span class="hljs-params">(node *p)</span> </span>&#123;</span><br><span class="line">  node *prt = p-&gt;prt; <span class="hljs-keyword">int</span> k = p-&gt;dir(); </span><br><span class="line">  <span class="hljs-keyword">if</span>(!prt-&gt;isr()) prt-&gt;prt-&gt;setc(p, prt-&gt;dir()); </span><br><span class="line">  <span class="hljs-keyword">else</span> p-&gt;prt = prt-&gt;prt; prt-&gt;setc(p-&gt;ch[!k], k); </span><br><span class="line">  p-&gt;setc(prt, !k); prt-&gt;upd(); p-&gt;upd();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">node *sta[N]; <span class="hljs-keyword">int</span> top; </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">splay</span><span class="hljs-params">(node *p)</span> </span>&#123;</span><br><span class="line">  node *q = p;</span><br><span class="line">  <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) &#123; </span><br><span class="line">    sta[++top] = q; </span><br><span class="line">    <span class="hljs-keyword">if</span>(q-&gt;isr()) <span class="hljs-keyword">break</span> ;  </span><br><span class="line">    q = q-&gt;prt; </span><br><span class="line">  &#125; </span><br><span class="line">  <span class="hljs-keyword">while</span>(top) </span><br><span class="line">    (sta[top--])-&gt;push(); </span><br><span class="line">  <span class="hljs-keyword">while</span>(!p-&gt;isr()) &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(p-&gt;prt-&gt;isr()) rotate(p); </span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(p-&gt;dir() == p-&gt;prt-&gt;dir()) rotate(p-&gt;prt), rotate(p); </span><br><span class="line">    <span class="hljs-keyword">else</span> rotate(p), rotate(p); </span><br><span class="line">  &#125; p-&gt;upd(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function">node *<span class="hljs-title">access</span><span class="hljs-params">(node *p)</span> </span>&#123;</span><br><span class="line">  node *q = <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-keyword">for</span>(; p; p = p-&gt;prt) &#123;</span><br><span class="line">    splay(p); </span><br><span class="line">    p-&gt;ch[<span class="hljs-number">1</span>] = q; </span><br><span class="line">    (q = p)-&gt;upd(); </span><br><span class="line">  &#125; <span class="hljs-keyword">return</span> q; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mkroot</span><span class="hljs-params">(node *p)</span> </span>&#123; access(p); splay(p); p-&gt;setr(); p-&gt;push(); &#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">split</span> <span class="hljs-params">(node *p, node *q)</span> </span>&#123; mkroot(p); access(q); splay(p); &#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">link</span>  <span class="hljs-params">(node *p, node *q)</span> </span>&#123; mkroot(p); mkroot(q); q-&gt;prt = p; &#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">cut</span>   <span class="hljs-params">(node *p, node *q)</span> </span>&#123; split(p, q); p-&gt;ch[<span class="hljs-number">1</span>] = q-&gt;prt = <span class="hljs-number">0</span>; &#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> node *<span class="hljs-title">find</span><span class="hljs-params">(node *p)</span> </span>&#123; access(p); splay(p); <span class="hljs-keyword">while</span>(p-&gt;ch[<span class="hljs-number">0</span>]) p = p-&gt;ch[<span class="hljs-number">0</span>]; <span class="hljs-keyword">return</span> p; &#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">gcd</span><span class="hljs-params">(ll a, ll b)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> !b ? a : gcd(b, a % b); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lld"</span>, &amp;a[i]); </span><br><span class="line">    P[i] = New(a[i]); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> u, v; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>, &amp;u, &amp;v);</span><br><span class="line">    link(P[u], P[v]); </span><br><span class="line">  &#125; </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> op, u, v; ll d;  </span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d %d"</span>, &amp;op, &amp;u, &amp;v); </span><br><span class="line">    <span class="hljs-keyword">if</span>(op == <span class="hljs-number">1</span>) <span class="hljs-keyword">if</span>(find(P[u]) == find(P[v])) cut(P[u], P[v]);</span><br><span class="line">    <span class="hljs-keyword">if</span>(op == <span class="hljs-number">2</span>) <span class="hljs-keyword">if</span>(find(P[u]) != find(P[v])) link(P[u], P[v]); </span><br><span class="line">    <span class="hljs-keyword">if</span>(op == <span class="hljs-number">3</span>) &#123;</span><br><span class="line">      <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lld"</span>, &amp;d); </span><br><span class="line">      <span class="hljs-keyword">if</span>(find(P[u]) != find(P[v])) <span class="hljs-keyword">continue</span> ; <span class="hljs-comment">// important!</span></span><br><span class="line">      split(P[u], P[v]), P[u]-&gt;seta(d); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span>(op == <span class="hljs-number">4</span>) &#123;</span><br><span class="line">      <span class="hljs-keyword">if</span>(find(P[u]) != find(P[v])) &#123;</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"-1\n"</span>); </span><br><span class="line">        <span class="hljs-keyword">continue</span> ; </span><br><span class="line">      &#125;</span><br><span class="line">      split(P[u], P[v]); </span><br><span class="line">      ll ans = P[u]-&gt;s1; </span><br><span class="line">      ll t = P[u]-&gt;siz * (P[u]-&gt;siz + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>; </span><br><span class="line">      ll g = gcd(ans, t); </span><br><span class="line">      <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld/%lld\n"</span>, ans / g, t / g); </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LCT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1110E Magic Stones</title>
      <link href="/2019/02/09/CF1110E/"/>
      <url>/2019/02/09/CF1110E/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>给出一个初始序列 $a$ 和一个目标序列 $b$，你可以对 $a$ 中的除去第一个和最后一个点之外的任意一个点 $i$ ，让 $a_i$ 变成 $a_{i-1}+a_{i+1}-a_i$ 。问是否能够通过若干次操作使得 a 变成 b</p><p>序列长度 $n \leq 10^5$ </p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p><del>我觉得这个题应该放在 A</del> </p><p>考虑一个序列 : a|b|c</p><p>对 b 进行操作：a|a+c-b|c</p><p>他的差分序列原来是：a-b | b-c</p><p>现在变成了：b-c | a-b</p><p>所以一次操作相当于是把差分数组里的相邻两个数给交换了位置</p><p>所以只用判断目标序列的差分数组排序后是否等于初始序列的差分数组</p><p>还有第一个数相不相等（比赛的时候没考虑这个 wa 了一发…）</p><p>时间复杂度瓶颈在排序（或者说判断相同）</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100100</span>; </span><br><span class="line"><span class="hljs-keyword">int</span> n, a[N], b[N]; </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;n); </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;a[i]);</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;b[i]);</span><br><span class="line">  <span class="hljs-keyword">if</span>(a[<span class="hljs-number">1</span>] != b[<span class="hljs-number">1</span>]) &#123; <span class="hljs-built_in">printf</span>(<span class="hljs-string">"No\n"</span>); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; &#125;</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) a[i] = a[i + <span class="hljs-number">1</span>] - a[i];</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) b[i] = b[i + <span class="hljs-number">1</span>] - b[i];</span><br><span class="line">  sort(a + <span class="hljs-number">1</span>, a + n), sort(b + <span class="hljs-number">1</span>, b + n);</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)</span><br><span class="line">    <span class="hljs-keyword">if</span>(a[i] != b[i]) &#123;</span><br><span class="line">      <span class="hljs-built_in">printf</span>(<span class="hljs-string">"No\n"</span>);</span><br><span class="line">      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">    &#125;</span><br><span class="line">  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Yes\n"</span>);</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CF1110F Nearest Leaf</title>
      <link href="/2019/02/09/CF1110F/"/>
      <url>/2019/02/09/CF1110F/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>给你一颗满足编号 = dfs 序的带边权的有根树。$m$ 次询问，每次给出 $v,l,r$ 求编号在 $[l,r]$ 中的叶子到 $v$ 节点的最短距离</p><p>$n,m \leq 5\times10^5,w \leq 10^9$ </p><a id="more"></a> <h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>如果我们知道 $u$ 节点到所有叶子的最短路，如何求出他的某一个儿子 $v$ 到所有叶子的最短路呢？</p><p>不妨设 $(u,v)$ 的边权是 $w$ 。那么在 $v$ 这颗子树内的叶子到 $v$ 的距离较 $u$ 要减少 $w$ ； $v$ 这颗子树外的叶子到 $v$ 的距离较 $u$ 要增加 $w$ 。</p><p>又良心出题人给的树是满足那个性质的，所以子树内的编号是连续的。</p><p>所以最开始 dfs 一遍。求出每个点到根的距离。把询问离线，进行一次先序遍历。</p><p>每次进入到一颗子树，就用线段树把该子树内的叶子减少 w 外面的增加 w</p><p>当回溯的父亲的时候，就用线段树把该子树内的叶子增加 w 外面的减少 w</p><p>然后遍历到一个节点就把和他有关的询问全都用线段树里的信息处理掉就行了</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><p>我的实现貌似有点麻烦…我直接用线段树维护叶子，所以每次给出的左右端点还要在叶子序列里二分一下</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI pair</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Fi first</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Se second</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 1000000000000000000</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">500500</span>; </span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> n, m, siz[N]; ll dis[N], ans[N];</span><br><span class="line"><span class="hljs-built_in">vector</span> &lt;<span class="hljs-keyword">int</span>&gt; lea;  </span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span> &#123;</span></span><br><span class="line">  <span class="hljs-keyword">int</span> v; ll w; </span><br><span class="line">  edge *next; </span><br><span class="line">&#125; pol[N * <span class="hljs-number">2</span>], *head[N], *cu = pol;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, ll w)</span> </span>&#123;</span><br><span class="line">  edge *p = cu++, *q = cu++;</span><br><span class="line">  p-&gt;v = v, p-&gt;w = w, p-&gt;next = head[u], head[u] = p;</span><br><span class="line">  q-&gt;v = u, q-&gt;w = w, q-&gt;next = head[v], head[v] = q; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> pre)</span> </span>&#123;</span><br><span class="line">  siz[u] = <span class="hljs-number">1</span>; <span class="hljs-keyword">bool</span> fla = <span class="hljs-number">1</span>; </span><br><span class="line">  <span class="hljs-keyword">for</span>(edge *p = head[u]; p; p = p-&gt;next) &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> v = p-&gt;v; <span class="hljs-keyword">if</span>(v == pre) <span class="hljs-keyword">continue</span> ; </span><br><span class="line">    fla = <span class="hljs-number">0</span>; dis[v] = dis[u] + p-&gt;w;  </span><br><span class="line">    dfs(v, u); siz[u] += siz[v]; </span><br><span class="line">  &#125; <span class="hljs-keyword">if</span>(fla) lea.push_back(u); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ST</span> &#123;</span></span><br><span class="line">  <span class="hljs-keyword">int</span> l, r; </span><br><span class="line">  ll tag, mn; </span><br><span class="line">  ST *ch[<span class="hljs-number">2</span>]; </span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">seta</span><span class="hljs-params">(ll d)</span> </span>&#123;</span><br><span class="line">    tag += d; mn += d; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    mn = min(ch[<span class="hljs-number">0</span>]-&gt;mn, ch[<span class="hljs-number">1</span>]-&gt;mn); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(tag) &#123;</span><br><span class="line">      <span class="hljs-keyword">if</span>(ch[<span class="hljs-number">0</span>]) ch[<span class="hljs-number">0</span>]-&gt;seta(tag);</span><br><span class="line">      <span class="hljs-keyword">if</span>(ch[<span class="hljs-number">1</span>]) ch[<span class="hljs-number">1</span>]-&gt;seta(tag); </span><br><span class="line">      tag = <span class="hljs-number">0</span>; </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; pool[N * <span class="hljs-number">2</span>], *cur = pool, *rt; </span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(ST *p, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">  p-&gt;l = l, p-&gt;r = r; </span><br><span class="line">  <span class="hljs-keyword">if</span>(l == r) &#123;</span><br><span class="line">    p-&gt;mn = dis[lea[l - <span class="hljs-number">1</span>]]; </span><br><span class="line">    <span class="hljs-keyword">return</span> ; </span><br><span class="line">  &#125;</span><br><span class="line">  ST *ls = cur++, *rs = cur++;</span><br><span class="line">  p-&gt;ch[<span class="hljs-number">0</span>] = ls, p-&gt;ch[<span class="hljs-number">1</span>] = rs;</span><br><span class="line">  <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;  </span><br><span class="line">  build(ls, l, mid);</span><br><span class="line">  build(rs, mid + <span class="hljs-number">1</span>, r); </span><br><span class="line">  p-&gt;upd(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(ST *p, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, ll d)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">if</span>(l &gt; r) <span class="hljs-keyword">return</span> ; </span><br><span class="line">  <span class="hljs-keyword">if</span>(p-&gt;l == l &amp;&amp; p-&gt;r == r) </span><br><span class="line">    <span class="hljs-keyword">return</span> p-&gt;seta(d); </span><br><span class="line">  p-&gt;push(); </span><br><span class="line">  <span class="hljs-keyword">if</span>(p-&gt;ch[<span class="hljs-number">0</span>]-&gt;r &gt;= r) modify(p-&gt;ch[<span class="hljs-number">0</span>], l, r, d);</span><br><span class="line">  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(p-&gt;ch[<span class="hljs-number">1</span>]-&gt;l &lt;= l) modify(p-&gt;ch[<span class="hljs-number">1</span>], l, r, d); </span><br><span class="line">  <span class="hljs-keyword">else</span> modify(p-&gt;ch[<span class="hljs-number">0</span>], l, p-&gt;ch[<span class="hljs-number">0</span>]-&gt;r, d), </span><br><span class="line">       modify(p-&gt;ch[<span class="hljs-number">1</span>], p-&gt;ch[<span class="hljs-number">1</span>]-&gt;l, r, d);</span><br><span class="line">  p-&gt;upd(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">Qmin</span><span class="hljs-params">(ST *p, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">if</span>(l &gt; r) <span class="hljs-keyword">return</span> INF; p-&gt;push(); </span><br><span class="line">  <span class="hljs-keyword">if</span>(p-&gt;l == l &amp;&amp; p-&gt;r == r) </span><br><span class="line">    <span class="hljs-keyword">return</span> p-&gt;mn; </span><br><span class="line">  <span class="hljs-keyword">if</span>(p-&gt;ch[<span class="hljs-number">0</span>]-&gt;r &gt;= r) <span class="hljs-keyword">return</span> Qmin(p-&gt;ch[<span class="hljs-number">0</span>], l, r); </span><br><span class="line">  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(p-&gt;ch[<span class="hljs-number">1</span>]-&gt;l &lt;= l) <span class="hljs-keyword">return</span> Qmin(p-&gt;ch[<span class="hljs-number">1</span>], l, r);</span><br><span class="line">  <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> min(Qmin(p-&gt;ch[<span class="hljs-number">0</span>], l, p-&gt;ch[<span class="hljs-number">0</span>]-&gt;r), </span><br><span class="line">                  Qmin(p-&gt;ch[<span class="hljs-number">1</span>], p-&gt;ch[<span class="hljs-number">1</span>]-&gt;l, r)); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">vector</span> &lt; PI &lt;<span class="hljs-keyword">int</span>, PI &lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; &gt; &gt; Q[N]; </span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// emm 我还不太会用  lower_bound / upper_bound  所以就只能手写了..</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">up</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>, r = n - <span class="hljs-number">1</span>, ret = <span class="hljs-number">0</span>; </span><br><span class="line">  <span class="hljs-keyword">while</span>(l &lt;= r) &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span>(lea[mid] &lt;= x) </span><br><span class="line">      l = mid + <span class="hljs-number">1</span>, ret = mid;</span><br><span class="line">    <span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>; </span><br><span class="line">  &#125; <span class="hljs-keyword">return</span> ret + <span class="hljs-number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lw</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>, r = n - <span class="hljs-number">1</span>, ret = n - <span class="hljs-number">1</span>; </span><br><span class="line">  <span class="hljs-keyword">while</span>(l &lt;= r) &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>; </span><br><span class="line">    <span class="hljs-keyword">if</span>(lea[mid] &gt;= x)</span><br><span class="line">      r = mid - <span class="hljs-number">1</span>, ret = mid; </span><br><span class="line">    <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>; </span><br><span class="line">  &#125; <span class="hljs-keyword">return</span> ret + <span class="hljs-number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> pre)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; Q[u].size(); i++) &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> id = Q[u][i].Fi; </span><br><span class="line">    <span class="hljs-keyword">int</span> l = Q[u][i].Se.Fi;</span><br><span class="line">    <span class="hljs-keyword">int</span> r = Q[u][i].Se.Se; </span><br><span class="line">    <span class="hljs-comment">// printf("***%d %d %d\n", id, up(l), lw(r)); </span></span><br><span class="line">    ans[id] = Qmin(rt, lw(l), up(r));  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">for</span>(edge *p = head[u]; p; p = p-&gt;next) &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> v = p-&gt;v; <span class="hljs-keyword">if</span>(v == pre) <span class="hljs-keyword">continue</span> ; </span><br><span class="line">    <span class="hljs-keyword">int</span> L = lw(v), R = up(v + siz[v] - <span class="hljs-number">1</span>); </span><br><span class="line">    ll w = p-&gt;w; </span><br><span class="line">    <span class="hljs-comment">// printf("%d %d %d\n", v, L, R);</span></span><br><span class="line">    modify(rt, L, R, -w);</span><br><span class="line">    modify(rt, <span class="hljs-number">1</span>, L - <span class="hljs-number">1</span>, w);</span><br><span class="line">    modify(rt, R + <span class="hljs-number">1</span>, n, w); </span><br><span class="line">    solve(v, u); </span><br><span class="line">    modify(rt, L, R, w);</span><br><span class="line">    modify(rt, <span class="hljs-number">1</span>, L - <span class="hljs-number">1</span>, -w); </span><br><span class="line">    modify(rt, R + <span class="hljs-number">1</span>, n, -w); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> p; ll w; </span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %lld"</span>, &amp;p, &amp;w);</span><br><span class="line">    addedge(p, i, w); </span><br><span class="line">  &#125; dfs(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>); n = lea.size(); </span><br><span class="line">  sort(lea.begin(), lea.end()); </span><br><span class="line">  build(rt = cur++, <span class="hljs-number">1</span>, n);</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> v, l, r; </span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d %d"</span>, &amp;v, &amp;l, &amp;r);</span><br><span class="line">    Q[v].push_back(MP(i, MP(l, r))); </span><br><span class="line">  &#125; solve(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>, ans[i]); </span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> dfs序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「云玩家拯救计划」小题单</title>
      <link href="/2019/02/02/Cloud-Player-Rescue-Plan/"/>
      <url>/2019/02/02/Cloud-Player-Rescue-Plan/</url>
      
        <content type="html"><![CDATA[<p>云玩家拯救计划（雾</p><a id="more"></a><hr><h1 id="网络流"><a href="#网络流" class="headerlink" title="网络流"></a>网络流</h1><p><strong>A(CF1009G)</strong>：直接贪心，用二分图里的一个霍尔定理来判断合法性。实现上可以简单一点。</p><p><strong>B(CF808F)</strong>：先二分答案，观察到除了 2 以外所有质数由偶数+奇数得来。于是 check 就可以特判 1 + 1 的情况，建图最小割即可。</p><p><strong>C(CF164C)</strong>：把任务按照开始时间排序，S -&gt; 最小的开始时间 -&gt;  第二个 -&gt; .. -&gt; 第 n 个 -&gt; T 连流量 m 费用 0 ，再对于每个任务连一条从起点到终点加 1，流量 1 费用 -c 的边。然后最小费用最大流就好了。<del>我还是不会输出方案（捂脸</del> </p><p><strong>D(CF277E)</strong>：以前做过…写过<a href="https://acfcacfca.blog.luogu.org/solution-cf277e" target="_blank" rel="noopener">题解</a>…</p><p><strong>E(CF1082G)</strong>：把每个点和每条边算成一个点，边的权值是负的，然后最大权闭合子图</p><p><strong>F(BZOJ3158)</strong>： 考虑 % 4 可以证明奇数方+奇数方不等于完全平方，同时偶数的最大公约数 &gt; 1 所以奇数一边偶数一边建二分图然后就是套路的最小割了<br><strong>G(CF863F)</strong>：可以求出每个点的可行区间，然后那个平方的条件就可以拆边。就是 (1,1), (3,1), (5,1), (7,1) …. 然后最小费用最大流</p><p><strong>H(CF498C)</strong>：显然除质因子答案最大 &amp;&amp; 质因子之间相互独立。对于每一个出现过的质因子跑最大流就行了</p><hr><h1 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h1><p><strong>A(BZOJ2154)</strong> ：不妨设 $n \leq m$ </p><p>$\sum\limits_{i=1}^{n}\sum\limits_{j=1}^{m} lcm(i, j)$</p><p>$=\sum\limits_{i=1}^{n}\sum\limits_{j=1}^{m} \frac{ij}{\gcd(i,j)}$</p><p>$=\sum\limits_{d=1}^{n}\sum\limits_{i’=1}^{\lfloor \frac{n}{d} \rfloor}\sum\limits_{j’=1}^{\lfloor \frac{m}{d} \rfloor} i’j’d [\gcd(i’,j’)=1]$  </p><p>$=\sum\limits_{d=1}^{n}d \sum\limits_{i’=1}^{\lfloor \frac{n}{d} \rfloor} i’ \sum\limits_{j’=1}^{\lfloor \frac{m}{d} \rfloor} j’ [gcd(i’,j’)=1]$  </p><p>$ =\sum\limits_{d=1}^{n} d \sum\limits_{i’=1}^{\lfloor \frac{n}{d} \rfloor} i’ \sum\limits_{j’=1}^{\lfloor \frac{m}{d} \rfloor} j’ \sum\limits_{d’|i’,d’|j’}\mu(d’)$  </p><p>$=\sum\limits_{d=1}^{n}\sum\limits_{d’=1}^{n}\mu(d’)d \sum\limits_{i’=1}^{\lfloor \frac{n}{d’d} \rfloor} i’ \sum\limits_{j’=1}^{\lfloor \frac{m}{d’d} \rfloor} j’ $ </p><p>令 $dd’=T, F(T)=\sum\limits_{d | T}\mu(d)\frac{T}{d}$ 。F 可以线性筛出来，就做完了 ）</p><p>然后这个题连分块都不用（</p><p>好像有需要分块的加强版被权限了（</p><p><strong>B(BZOJ2440)</strong>：<a href="https://acfcacfca.blog.luogu.org/solution-p4318" target="_blank" rel="noopener">题解</a> </p><p><strong>C(BZOJ3529)</strong>：<a href="https://acfunction.github.io/2019/01/14/bzoj3529/" target="_blank" rel="noopener">题解</a></p><p><strong>D(HDU6053)：</strong> 待填坑</p><p><strong>E(BZOJ2956)</strong>：</p><p>$\sum\limits_{i=1}^{n} \sum\limits_{j=1}^{m} <a href="n\%i">i\not= j</a>(m\%j)$</p><p>$=\sum\limits_{i=1}^{n}n\%i\sum\limits_{j=1}^{m}m\%j-\sum\limits_{i=1}^{n}(n\%i)(m\%i)$</p><p>然后把 $n\%i$ 搞成 $n -i \lfloor\frac{n}{i}\rfloor $ ，$m\%i$ 同理，然后推推式子分个块就做完了</p><p><strong>F(HDU4947)</strong>：待填坑</p><p><strong>G(BZOJ2005)</strong>：有点简单懒得写hhh</p><p><strong>H(HDU4473)</strong>：把题目要求转化为有多少个有序对 (a,b,c) 满足 abc = n。然后分三类 a,b,c;a,a,b;a,a,a 讨论下就行了（优秀的暴力…</p><p><strong>I(HDU5942)</strong>：有点难啊…看的 <a href="https://www.cnblogs.com/clrs97/p/6012285.html" target="_blank" rel="noopener">这个题解</a> </p><hr><h1 id="线段树主席树"><a href="#线段树主席树" class="headerlink" title="线段树主席树"></a>线段树主席树</h1><p><strong>A(HDU4578)</strong>：线段树维护加标记乘标记以及三个值分别表示和，平方的和，立方的和。加标记更新就用二项式展开一下倒序更新；乘标记就是和乘上d，平方乘上d^2，立方同理…然后覆盖操作拆成先乘 0 再加 。</p><p><strong>B(BZOJ1818)</strong>：先把题目条件转化成所有由这些点组成的平行于坐标轴的线段之间有几个交点（端点也算）。然后就直接把坐标离散化一下然后扫描线扫过去中间用树状数组维护一下就行了。</p><p><strong>C(COT)</strong>：板子再见</p><p><strong>D(BZOJ3261)</strong>：搞个可持久化 0/1 trie 维护前缀异或和然后就做完了（板子）</p><p><strong>E(CF484E)</strong>：二分答案下，然后对于一个值是否合法只需要把 &gt; 该数的变成 1 ，小于该数的变成 0 然后用线段树维护这个区间内的最长的 1 序列。由于不能开一堆线段树，所以用主席数的思想就行了（我都觉得我说的不清楚…）</p><p><strong>F()</strong>：</p><p>G：线段树合并裸题</p><p>H：kruskal 重构树上主席树</p><p>I：对每一位维护线段树就行了</p><p>J：压个位然后维护区间或就行了</p><p>K：模板题再见</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CF757F Team Rocket Rises Again</title>
      <link href="/2019/02/01/CF757F/"/>
      <url>/2019/02/01/CF757F/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>一个 $n$ 个点 $m$ 条边的无向图，给出起点 $S$ 。求删除掉一个不是 $S$ 的点后最多能改变多少个点到 $S$ 的最短路。输出这个最大值。</p><p>$n \leq 200000, m \leq \min(\frac{n(n-1)}{2},300000)$ </p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>在飞机上写的题解 2333</p><p>定义 $d_u$ 是 $S$ 到 $u$ 的最短路；最短路 DAG 为所有有向边 $(u,v)$ 满足 $d_u+w(u,v)=d_v$ 组成的 DAG .</p><p>那么显然删这个 DAG 上的点才是对答案有贡献的。</p><p>考虑如何求出删完一个点会使得有多少个点的最短路有改变。</p><p>把这个 DAG 的支配树建出来然后对于一个点它在支配树上的子树大小就是答案。</p><p>注：支配树是啥？</p><p>在一个有向图中有一个节点是 $S$ ；对于节点 $u$ 从 $S$ 到 $u$ 上的路径必到的点称之为 $u$ 的支配点</p><p>对于每一个 $u$ ，从离他最近的一个点向他连一条边。这些边组成的便是原图的支配树。其中 $S$ 为根节点</p><p>对于一个 DAG 如何建出他的支配树？即对于一个点怎么求出离他最近的支配点？</p><p>可以考虑用拓扑排序的顺序更新。对于节点 $u$ ，它的所有前驱在支配树上的 LCA便是它在支配树上的父亲；即离他最近的支配点。</p><p>这个过程需要维护的就是 加点 和 维护 LCA 。可以用倍增用 $O(n \log n)$ 的时间复杂度解决</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long <span class="hljs-comment">// don't think I use int ! </span></span></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">300300</span>; </span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = (<span class="hljs-keyword">int</span>)<span class="hljs-number">4e18</span>; </span><br><span class="line"><span class="hljs-keyword">int</span> n, m, S, dis[N], U[N], V[N], W[N], ind[N], fa[N][<span class="hljs-number">25</span>], dep[N], siz[N]; </span><br><span class="line"><span class="hljs-built_in">vector</span> &lt;<span class="hljs-keyword">int</span>&gt; g[N]; </span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span> &#123;</span></span><br><span class="line">  <span class="hljs-keyword">int</span> v, w; edge *next; </span><br><span class="line">&#125; *h1[N], *h2[N], *h3[N], pool[N * <span class="hljs-number">6</span>], *cur = pool; </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">  edge *p = cur++; p-&gt;w = w; </span><br><span class="line">  p-&gt;v = v, p-&gt;next = h1[u], h1[u] = p; </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">  edge *p = cur++;</span><br><span class="line">  p-&gt;v = v, p-&gt;next = h2[u], h2[u] = p; </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add3</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">  edge *p = cur++;</span><br><span class="line">  p-&gt;v = v, p-&gt;next = h3[u], h3[u] = p; </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">  fa[x][<span class="hljs-number">0</span>] = f;</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">20</span>; i++)</span><br><span class="line">    fa[x][i] = fa[fa[x][i - <span class="hljs-number">1</span>]][i - <span class="hljs-number">1</span>]; </span><br><span class="line">  dep[x] = dep[f] + <span class="hljs-number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">LCA</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">if</span>(dep[u] &lt; dep[v]) swap(u, v); </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">20</span>; i &gt;= <span class="hljs-number">0</span>; i--)</span><br><span class="line">    <span class="hljs-keyword">if</span>(dep[fa[u][i]] &gt;= dep[v] &amp;&amp; fa[u][i])</span><br><span class="line">      u = fa[u][i]; </span><br><span class="line">  <span class="hljs-keyword">if</span>(u == v) <span class="hljs-keyword">return</span> u; </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">20</span>; i &gt;= <span class="hljs-number">0</span>; i--)</span><br><span class="line">    <span class="hljs-keyword">if</span>(fa[u][i] != fa[v][i])</span><br><span class="line">      u = fa[u][i], v = fa[v][i];</span><br><span class="line">  <span class="hljs-keyword">return</span> fa[u][<span class="hljs-number">0</span>]; </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span></span><br><span class="line">  <span class="hljs-keyword">int</span> d, id; </span><br><span class="line">  <span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> node &amp;x) <span class="hljs-keyword">const</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> d &gt; x.d; </span><br><span class="line">  &#125;</span><br><span class="line">&#125; tmp; </span><br><span class="line">priority_queue &lt;node&gt; Q; </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)</span><br><span class="line">    dis[i] = INF;</span><br><span class="line">  tmp.id = S, tmp.d = <span class="hljs-number">0</span>; Q.push(tmp); dis[S] = <span class="hljs-number">0</span>; </span><br><span class="line">  <span class="hljs-keyword">while</span>(!Q.empty()) &#123;</span><br><span class="line">    tmp = Q.top(); Q.pop();</span><br><span class="line">    <span class="hljs-keyword">int</span> u = tmp.id;</span><br><span class="line">    <span class="hljs-keyword">if</span>(dis[u] &lt; tmp.d) <span class="hljs-keyword">continue</span> ; </span><br><span class="line">    <span class="hljs-keyword">for</span>(edge *p = h1[u]; p; p = p-&gt;next) &#123;</span><br><span class="line">      <span class="hljs-keyword">int</span> v = p-&gt;v; </span><br><span class="line">      <span class="hljs-keyword">if</span>(dis[v] &gt; dis[u] + p-&gt;w) &#123;</span><br><span class="line">        dis[v] = dis[u] + p-&gt;w; </span><br><span class="line">        tmp.id = v, tmp.d = dis[v];</span><br><span class="line">        Q.push(tmp); </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> pre)</span> </span>&#123;</span><br><span class="line">  siz[u] = <span class="hljs-number">1</span>;</span><br><span class="line">  <span class="hljs-keyword">for</span>(edge *p = h3[u]; p; p = p-&gt;next) &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> v = p-&gt;v; <span class="hljs-keyword">if</span>(v == pre) <span class="hljs-keyword">continue</span> ; </span><br><span class="line">    dfs(v, u); siz[u] += siz[v]; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lld %lld %lld"</span>, &amp;n, &amp;m, &amp;S);</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> u, v, w;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lld %lld %lld"</span>, &amp;u, &amp;v, &amp;w); </span><br><span class="line">    U[i] = u, V[i] = v, W[i] = w; </span><br><span class="line">    add1(u, v, w), add1(v, u, w); </span><br><span class="line">  &#125;</span><br><span class="line">  dijkstra(); </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(dis[U[i]] == dis[V[i]] + W[i])</span><br><span class="line">      add2(V[i], U[i]), ind[U[i]]++, g[U[i]].push_back(V[i]);</span><br><span class="line">    <span class="hljs-keyword">if</span>(dis[V[i]] == dis[U[i]] + W[i])</span><br><span class="line">      add2(U[i], V[i]), ind[V[i]]++, g[V[i]].push_back(U[i]); </span><br><span class="line">  &#125; <span class="hljs-built_in">queue</span> &lt;<span class="hljs-keyword">int</span>&gt; Q; Q.push(S); dep[S] = <span class="hljs-number">1</span>; </span><br><span class="line">  <span class="hljs-keyword">while</span>(!Q.empty()) &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> u = Q.front(); Q.pop();</span><br><span class="line">    <span class="hljs-comment">// printf("%d\n", u); </span></span><br><span class="line">    <span class="hljs-keyword">if</span>(g[u].size()) &#123;</span><br><span class="line">      <span class="hljs-keyword">int</span> lca = g[u][<span class="hljs-number">0</span>];</span><br><span class="line">      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; g[u].size(); i++) &#123;</span><br><span class="line">       <span class="hljs-comment">// printf("%d\n", g[u][i]); </span></span><br><span class="line">        lca = LCA(g[u][i], lca);</span><br><span class="line">      &#125; </span><br><span class="line">      add(u, lca); add3(lca, u); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span>(edge *p = h2[u]; p; p = p-&gt;next) &#123;</span><br><span class="line">      <span class="hljs-keyword">int</span> v = p-&gt;v; ind[v]--;</span><br><span class="line">      <span class="hljs-keyword">if</span>(ind[v] == <span class="hljs-number">0</span>) Q.push(v); </span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;  </span><br><span class="line">  dfs(S, <span class="hljs-number">0</span>); </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)</span><br><span class="line">    <span class="hljs-keyword">if</span>(i != S) ans = max(ans, siz[i]); </span><br><span class="line">  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>, ans); </span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 支配树 </tag>
            
            <tag> 倍增 </tag>
            
            <tag> LCA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>趣题「红眼睛与蓝眼睛」</title>
      <link href="/2019/01/23/Red-And-Blue-Eye/"/>
      <url>/2019/01/23/Red-And-Blue-Eye/</url>
      
        <content type="html"><![CDATA[<p>一道有趣的题目。</p><a id="more"></a> <h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>一个岛上有 $n$ 个人，其中有 $m$ 个红眼睛，$n -  m$ 个蓝眼睛。这个岛有三个规则</p><ol><li>他们不能照镜子，不能看自己眼睛的颜色。</li><li>他们不能告诉别人对方的眼睛是什么颜色。</li><li>一旦有人知道了自己是红眼睛，他就会在当天夜里自杀。</li></ol><p>如果有一天，一个外来人来到这里对他们所有人说「你们这里有红眼睛的人」</p><p>假设每一个人都有着极强的逻辑推理能力。 </p><p>求证：在这句话公布后地第 $m$ 天晚上这 $m$ 个红眼睛会一起自杀。</p><p>注：每一个人是不知道岛上有多少个红眼睛的人的</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>乍一看，这题毫无头绪。告诉了一句「你们这里有红眼睛的人」又能怎么样呢？</p><p>先来看一个数学归纳法的证明：</p><ol><li><p>如果这个岛上只有一个红眼睛，听到这句话后看到其他人都不是红眼睛，便意识到自己是红眼睛，当天自杀。</p></li><li><p>假设当这个岛上有 $m$ 个红眼睛，他们会在第 $m$ 天自杀成立</p><p>当有 $m + 1$ 个红眼睛的时候，在每个红眼睛看来，都有 $m$ 个红眼睛，这个红眼睛能够推理出如果他不是红眼睛，那么他看到的 $m$ 个红眼睛都会在第 $m$ 天自杀 。而在第 $m$ 天，没有人自杀。一到第 $m + 1$ 天，每个红眼睛都意识到他是红眼睛。于是都在第 $m + 1$ 天自杀了</p></li></ol><p>命题得证。看似没有问题，实际上，除了 $m = 1$  的情况，这句话就相当于废话。因为没有任何用</p><p>要么在这之前红眼睛早就死光了，要么根本就不会死人。</p><p>但这并不是一个错误的事情。一个大神的回答说出来了 <a href="https://www.zhihu.com/question/21262930/answer/17690897" target="_blank" rel="noopener">戳这里</a> </p><p>这句话的作用就在于，让 <strong>每个人都知道每个人都知道这里有红眼睛的人</strong> </p><p>进一步地，这句话让  <strong>每个人都每个人都知道每个人都知道这里有红眼睛的人</strong>  等等</p><p>引用这位大神的话，就是：</p><blockquote><p>简单说，「岛上有红眼睛」这件事本来只是一项「<strong>共有知识</strong>」（<a href="https://link.zhihu.com/?target=http%3A//en.wikipedia.org/wiki/Mutual_knowledge_%2528logic%2529" target="_blank" rel="noopener">Mutual knowledge</a>），公开宣告使它变成了一项「<strong>公共知识</strong>」（<a href="https://link.zhihu.com/?target=http%3A//en.wikipedia.org/wiki/Common_knowledge_%2528logic%2529" target="_blank" rel="noopener">Common knowledge</a>）。这两种知识的区分在认知逻辑里面非常重要，在博弈论中有广泛的应用。</p><p>用不严谨的话粗略介绍一下这两个概念：对于一个给定的命题P和一群给定的人，共有知识只需要满足一个条件：这群人中所有人都知道P，那么P就是这群人的共有知识。<br>公共知识则需要满足以下所有条件：<br>这群人中<br>1、所有人都知道P；<br>2、所有人都知道所有人都知道P；<br>3、所有人都知道所有人都知道所有人都知道P；<br>4、所有人都知道所有人都知道所有人都知道所有人都知道P；<br>5、……</p></blockquote><p>共有知识 转化成 公共知识 的影响是很大的，就像这个例子一样</p><p>共有知识 转化成 公共知识 也是很难的，所以累次这个例子不太可能实现</p><hr><p>同时这句话也统一了所有人的<strong>时间起点</strong>，时间在推理中扮演者重要的角色。这句话也让每一个人知道别人也知道这个时间起点 ，这样才有 “第 $m$ 天” 这种说法能够统一（就像人的出生时间不同，自然不能做出有效的推理</p>]]></content>
      
      
      <categories>
          
          <category> 趣题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博弈论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BZOJ2653 middle</title>
      <link href="/2019/01/20/BZOJ2653/"/>
      <url>/2019/01/20/BZOJ2653/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>给你一个序列，每次询问给出四个数 $a,b,c,d$，求所有区间 $[l,r]$ 满足 $l \in [a,b], r \in [c,d]$ 的中位数的最大值。强制在线。</p><p>$n \leq 20000, Q \leq 25000,a_i \leq 10^9$</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>考虑二分答案。假设现在二分出来的是 $x$ ，那么把 $\ge x$ 的位置设成 $1$ ，$&lt; x$ 的设为 $-1$ 。那么一个区间的中位数 $\ge x$ 等价于这个区间的和 $\ge 0$</p><p>如何处理题目给的左右端点的限制？</p><p>可以发现 $[l,r]$ 必然包含 $[b+1,c-1]$ (如果 $b+1 \leq c+1$ 的话）所以 $[l, r]$ 的和必然包含 $[b+1, c-1]$ 的和</p><p>显然让 $[l,r]$ 的和最大的方案是取 $[a,b]$ 的最大右段和 和 $[c,d]$ 的最大左段和</p><p>这些都可以用线段树维护。但这样需要每个数都开一颗线段树，空间爆炸。</p><p>把数组排序，这样每个数的线段树显然只是由前一个数的线段树把一个点的权值从 $1$ 改为 $-1$ 。可以使用主席树的思想（貌似就是主席树</p><p>然后就做完了。复杂度 $O(m \log^2 n)$ </p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">2000</span>; </span><br><span class="line"><span class="hljs-keyword">int</span> n, m; <span class="hljs-keyword">int</span> q[<span class="hljs-number">4</span>]; </span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span></span><br><span class="line">  <span class="hljs-keyword">int</span> d, id; </span><br><span class="line">&#125; a[N]; </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(Node x, Node y)</span> </span>&#123; </span><br><span class="line">  <span class="hljs-keyword">return</span> x.d &lt; y.d; </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span></span><br><span class="line">  <span class="hljs-keyword">int</span> left, right; </span><br><span class="line">  <span class="hljs-keyword">int</span> sm, lm, rm; </span><br><span class="line">  node *ch[<span class="hljs-number">2</span>]; </span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    sm = ch[<span class="hljs-number">0</span>]-&gt;sm + ch[<span class="hljs-number">1</span>]-&gt;sm; </span><br><span class="line">    lm = max(ch[<span class="hljs-number">0</span>]-&gt;lm, ch[<span class="hljs-number">0</span>]-&gt;sm + ch[<span class="hljs-number">1</span>]-&gt;lm);</span><br><span class="line">    rm = max(ch[<span class="hljs-number">1</span>]-&gt;rm, ch[<span class="hljs-number">1</span>]-&gt;sm + ch[<span class="hljs-number">0</span>]-&gt;rm); </span><br><span class="line">  &#125;</span><br><span class="line">&#125; *rt[N], pool[N * <span class="hljs-number">50</span>], *cur = pool, *ans; </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">B</span> <span class="hljs-params">(node *r, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span> </span>&#123; </span><br><span class="line">  r-&gt;left = left, r-&gt;right = right; </span><br><span class="line">  <span class="hljs-keyword">if</span>(left == right) &#123; r-&gt;sm = r-&gt;lm = r-&gt;rm = <span class="hljs-number">1</span>; <span class="hljs-keyword">return</span> ; &#125;</span><br><span class="line">  node *lson = cur++, *rson = cur++; </span><br><span class="line">  <span class="hljs-keyword">int</span> mid = (left + right) &gt;&gt; <span class="hljs-number">1</span>;</span><br><span class="line">  r-&gt;ch[<span class="hljs-number">0</span>] = lson, r-&gt;ch[<span class="hljs-number">1</span>] = rson;</span><br><span class="line">  B(lson, left, mid), B(rson, mid + <span class="hljs-number">1</span>, right);  r-&gt;upd(); </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">I</span> <span class="hljs-params">(node *pre, node *now, <span class="hljs-keyword">int</span> pos)</span> </span>&#123; </span><br><span class="line">  now-&gt;left = pre-&gt;left, now-&gt;right = pre-&gt;right; </span><br><span class="line">  <span class="hljs-keyword">if</span>(now-&gt;left == now-&gt;right) &#123;</span><br><span class="line">    now-&gt;sm = now-&gt;lm = now-&gt;rm = <span class="hljs-number">-1</span>; <span class="hljs-keyword">return</span> ; </span><br><span class="line">  &#125; <span class="hljs-keyword">int</span> mid = (pre-&gt;left + pre-&gt;right) &gt;&gt; <span class="hljs-number">1</span>; </span><br><span class="line">  <span class="hljs-keyword">if</span>(pos &lt;= mid) now-&gt;ch[<span class="hljs-number">1</span>] = pre-&gt;ch[<span class="hljs-number">1</span>], I(pre-&gt;ch[<span class="hljs-number">0</span>], now-&gt;ch[<span class="hljs-number">0</span>] = cur++, pos); </span><br><span class="line">  <span class="hljs-keyword">if</span>(pos &gt;  mid) now-&gt;ch[<span class="hljs-number">0</span>] = pre-&gt;ch[<span class="hljs-number">0</span>], I(pre-&gt;ch[<span class="hljs-number">1</span>], now-&gt;ch[<span class="hljs-number">1</span>] = cur++, pos); </span><br><span class="line">  now-&gt;upd(); </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> node* <span class="hljs-title">Q</span> <span class="hljs-params">(node *now, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">if</span>(now-&gt;left == l &amp;&amp; now-&gt;right == r) <span class="hljs-keyword">return</span> now; </span><br><span class="line">  <span class="hljs-keyword">if</span>(now-&gt;ch[<span class="hljs-number">0</span>]-&gt;right &gt;= r) <span class="hljs-keyword">return</span> Q(now-&gt;ch[<span class="hljs-number">0</span>], l, r);</span><br><span class="line">  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(now-&gt;ch[<span class="hljs-number">1</span>]-&gt;left &lt;= l) <span class="hljs-keyword">return</span> Q(now-&gt;ch[<span class="hljs-number">1</span>], l, r); </span><br><span class="line">  <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">    node *ret = cur++, *L, *R;</span><br><span class="line">    L = Q(now-&gt;ch[<span class="hljs-number">0</span>], l, now-&gt;ch[<span class="hljs-number">0</span>]-&gt;right);</span><br><span class="line">    R = Q(now-&gt;ch[<span class="hljs-number">1</span>], now-&gt;ch[<span class="hljs-number">1</span>]-&gt;left, r);</span><br><span class="line">    ret-&gt;sm = L-&gt;sm + R-&gt;sm; </span><br><span class="line">    ret-&gt;lm = max(L-&gt;lm, L-&gt;sm + R-&gt;lm);</span><br><span class="line">    ret-&gt;rm = max(R-&gt;rm, R-&gt;sm + L-&gt;rm); </span><br><span class="line">    <span class="hljs-keyword">return</span> ret; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-keyword">if</span>(q[<span class="hljs-number">2</span>] + <span class="hljs-number">1</span> &lt;= q[<span class="hljs-number">3</span>] - <span class="hljs-number">1</span>) sum += Q (rt[id - <span class="hljs-number">1</span>], q[<span class="hljs-number">2</span>] + <span class="hljs-number">1</span>, q[<span class="hljs-number">3</span>] - <span class="hljs-number">1</span>)-&gt;sm; </span><br><span class="line">  sum += Q (rt[id - <span class="hljs-number">1</span>], q[<span class="hljs-number">1</span>], q[<span class="hljs-number">2</span>])-&gt;rm; </span><br><span class="line">  sum += Q (rt[id - <span class="hljs-number">1</span>], q[<span class="hljs-number">3</span>], q[<span class="hljs-number">4</span>])-&gt;lm; </span><br><span class="line">  <span class="hljs-keyword">return</span> sum &gt;= <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;n);</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;a[i].d); </span><br><span class="line">    a[i].id = i; </span><br><span class="line">  &#125; sort(a + <span class="hljs-number">1</span>, a + n + <span class="hljs-number">1</span>, cmp);</span><br><span class="line">  B(rt[<span class="hljs-number">0</span>] = cur++, <span class="hljs-number">1</span>, n); </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    rt[i] = cur++; I(rt[i - <span class="hljs-number">1</span>], rt[i], a[i].id);  </span><br><span class="line">  &#125; </span><br><span class="line">  <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;m); </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">4</span>; j++) &#123;</span><br><span class="line">      <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;q[j]), </span><br><span class="line">      q[j] += ans, q[j] %= n; q[j]++; </span><br><span class="line">    &#125;</span><br><span class="line">    sort(q + <span class="hljs-number">1</span>, q + <span class="hljs-number">4</span> + <span class="hljs-number">1</span>); </span><br><span class="line">    <span class="hljs-keyword">int</span> l = <span class="hljs-number">1</span>, r = n; </span><br><span class="line">    <span class="hljs-keyword">while</span>(l &lt;= r) &#123;</span><br><span class="line">      <span class="hljs-keyword">int</span> mid = (l + r) / <span class="hljs-number">2</span>; </span><br><span class="line">      <span class="hljs-keyword">if</span>(check(mid)) l = mid + <span class="hljs-number">1</span>, ans = a[mid].d; </span><br><span class="line">      <span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>; </span><br><span class="line">    &#125; <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, ans); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主席树 </tag>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LOJ2174 「FJOI2016」神秘数</title>
      <link href="/2019/01/17/LOJ2174/"/>
      <url>/2019/01/17/LOJ2174/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>$n$ 个数的序列，每次询问一个区间，求最小的一个数使得不能用这个区间中的数之和表示。</p><p>$n \leq 10^5, \sum a_i \leq 10^9$</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p><del>第一次用数组写数据结构真短啊</del></p><p>考虑只有一次询问怎么做</p><p>把给定的区间内的数排序，从小到大扫一遍。</p><p>如果一个数比他之前的数之和至少大了 $1$ ，那么答案就是和 + 1</p><p>否则就可以把$[1,\text{前缀和}]$ 都表示出来（感性理解很容易）</p><p>这道题怎么做也就显然了起来。只需要用主席树维护区间中小于等于某个数的数之和即可。流程如下</p><p>当前答案是 $a$，令 $S$ 是区间中 $\leq a$ 的数之和  </p><ol><li>如果 $S &lt; a$ 则 $a$ 就是最后的答案</li><li>否则 让 $a = S+1$ 然后重复此操作</li></ol><p>最开始的时候 $a=1$</p><p>这样做的话 $a$ 每次都会翻一倍，所以最后的总复杂度是  $O(m \log n \log \sum a_i)$</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">50000500</span>; </span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> L = <span class="hljs-number">1000000000</span>; </span><br><span class="line"><span class="hljs-keyword">int</span> n, m, a[N], cnt; </span><br><span class="line"><span class="hljs-keyword">int</span> root[N], ch[N][<span class="hljs-number">2</span>]; ll sum[N]; </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">I</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> pre, <span class="hljs-keyword">int</span> now, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">  ch[now][<span class="hljs-number">0</span>] = ch[pre][<span class="hljs-number">0</span>], ch[now][<span class="hljs-number">1</span>] = ch[pre][<span class="hljs-number">1</span>]; </span><br><span class="line">  <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>; sum[now] = sum[pre] + val; <span class="hljs-keyword">if</span>(l == r) <span class="hljs-keyword">return</span> ; </span><br><span class="line">  <span class="hljs-keyword">if</span>(val &lt;= mid) ch[now][<span class="hljs-number">0</span>] = ++cnt, I(ch[pre][<span class="hljs-number">0</span>], ch[now][<span class="hljs-number">0</span>], l, mid, val);</span><br><span class="line">  <span class="hljs-keyword">else</span> ch[now][<span class="hljs-number">1</span>] = ++cnt, I(ch[pre][<span class="hljs-number">1</span>], ch[now][<span class="hljs-number">1</span>], mid + <span class="hljs-number">1</span>, r, val); </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">Q</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pre, <span class="hljs-keyword">int</span> now, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">if</span>(l == r) <span class="hljs-keyword">return</span> sum[now] - sum[pre]; <span class="hljs-keyword">int</span> mid = (l + r) / <span class="hljs-number">2</span>;</span><br><span class="line">  <span class="hljs-keyword">if</span>(val &lt;= mid) <span class="hljs-keyword">return</span> Q(ch[pre][<span class="hljs-number">0</span>], ch[now][<span class="hljs-number">0</span>], l, mid, val);</span><br><span class="line">  <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> sum[ch[now][<span class="hljs-number">0</span>]] - sum[ch[pre][<span class="hljs-number">0</span>]] + Q(ch[pre][<span class="hljs-number">1</span>], ch[now][<span class="hljs-number">1</span>], mid + <span class="hljs-number">1</span>, r, val); </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;n);</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;a[i]); root[i] = ++cnt; </span><br><span class="line">    I(root[i - <span class="hljs-number">1</span>], root[i], <span class="hljs-number">1</span>, L, a[i]); </span><br><span class="line">  &#125; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;m); </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> l, r; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>, &amp;l, &amp;r); </span><br><span class="line">    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">1</span>; </span><br><span class="line">    <span class="hljs-keyword">int</span> S; <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) &#123;</span><br><span class="line">      S = Q(root[l - <span class="hljs-number">1</span>], root[r], <span class="hljs-number">1</span>, L, ans); </span><br><span class="line">      <span class="hljs-keyword">if</span>(S &lt; ans) &#123; <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, ans); <span class="hljs-keyword">break</span> ; &#125;</span><br><span class="line">      <span class="hljs-keyword">else</span> ans = S + <span class="hljs-number">1</span>; </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主席树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BZOJ3529 「SDOI2014」数表</title>
      <link href="/2019/01/14/bzoj3529/"/>
      <url>/2019/01/14/bzoj3529/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>$T$ 组询问，定义 $F(n)=\sum\limits_{d|n}d$。每次给出 $n,m,a$ 求  </p><script type="math/tex; mode=display">\sum\limits_{i=1,j=1,F(\gcd(i,j)) \leq a}^{i\leq n, j \leq m} F (\gcd(i,j))</script><p>$T \leq 20000;n,m,a\leq 10^5$</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>首先 $F$ 可以直接暴力地 $O(n \log n)$ 筛出来。</p><p>考虑 $a$ 的限制不是很好处理，假设没有这个 $a$ 的限制，则所求为</p><script type="math/tex; mode=display">\sum\limits_{i=1}^{n}\sum\limits_{j=1}^{m} F (\gcd(i,j))</script><p>令 $G(i)=\sum\limits_{x=1}^{n}\sum\limits_{y=1}^{m}[\gcd(x,y)=i]$。这个东西是什么呢？在 <a href="https://www.cnblogs.com/acfunction/p/10127599.html" target="_blank" rel="noopener">这里</a> 有它的推导过程。根据里面的过程，可以得到 $G(i) = \sum\limits_{d=1}^{\lfloor\frac{n}{i}\rfloor}\mu(d)\lfloor\frac{n}{id}\rfloor\lfloor\frac{m}{id}\rfloor$（默认 $n \leq m$）<br>令下面的过程中$t = id$，则所求的是 </p><script type="math/tex; mode=display">\sum\limits_{i=1}^{n}F(i)G(i)</script><script type="math/tex; mode=display">= \sum\limits_{i=1}^{n}F(i)\sum\limits_{d=1}^{\lfloor\frac{n}{i}\rfloor}\mu(d)\lfloor\frac{n}{id}\rfloor\lfloor\frac{m}{id}\rfloor</script><script type="math/tex; mode=display">=\sum\limits_{i=1}^{n}F(i)\sum\limits_{i | t}\mu(\frac{t}{i})\lfloor\frac{n}{t}\rfloor\lfloor\frac{m}{t}\rfloor</script><script type="math/tex; mode=display">=\sum\limits_{t=1}^{n}\lfloor\frac{n}{t}\rfloor\lfloor\frac{m}{t}\rfloor\sum\limits_{i | t}F(i)\mu(\frac{t}{i})</script><p>观察后面的式子，正好是一个狄利克雷卷积的形式。这种样子的都可以类似于那种 $O(n \log n)$ 地质数筛法在调和级数内求出来，再结合分块就可以做完这个没有 $a$ 的题。</p><p>现在有了 $a$ 的限制之后，离线。把询问按照 $a$ 从小到大排序，然后按照 $F(i)$ 从小到大加入。每当有一个新的 $a$ ，就可以移动指针，将一些 $F$ 用处理 $\sum\limits_{i | t}F(i)\mu(\frac{t}{i})$ 的方式加入到这个里面。然后加入完之后用分块计算就行。</p><p>现在需要维护单点操作，查询前缀和，树状数组是不错的选择。</p><p>由于取模是 $2^{32} - 1$ ，可以直接 int 自然溢出最后和 $2147483647$ 取一个 &amp; 就行了。</p><p>时间复杂度：$O(n + n \log n +  n \log ^ 2 (n) + T \log (n)\sqrt n)$</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100000</span>; </span><br><span class="line"><span class="hljs-keyword">int</span> T, cnt, flag[N + <span class="hljs-number">5</span>], p[N + <span class="hljs-number">5</span>], F[N + <span class="hljs-number">5</span>], mu[N + <span class="hljs-number">5</span>], ans[N + <span class="hljs-number">5</span>]; </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">prework</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  flag[<span class="hljs-number">1</span>] = mu[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= N; i++) &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(!flag[i]) &#123; p[++cnt] = i, mu[i] = <span class="hljs-number">-1</span>; &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= cnt &amp;&amp; i * p[j] &lt;= N; j++) &#123;</span><br><span class="line">      flag[i * p[j]] = <span class="hljs-number">1</span>; <span class="hljs-keyword">if</span>(i % p[j] == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">        mu[i * p[j]] = <span class="hljs-number">0</span>; <span class="hljs-keyword">break</span> ;</span><br><span class="line">      &#125; mu[i * p[j]] = mu[i] * <span class="hljs-number">-1</span>; </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; i++)</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i; j &lt;= N; j += i) F[j] += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">int</span> c[N + <span class="hljs-number">5</span>]; </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lb</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123; <span class="hljs-keyword">return</span> x &amp; (-x); &#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = x; i &lt;= N; i += lb(i)) c[i] += d; </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">int</span> ret = <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = x; i; i -= lb(i)) </span><br><span class="line">    ret += c[i]; <span class="hljs-keyword">return</span> ret; </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">int</span> ret = <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> l = <span class="hljs-number">1</span>, r; l &lt;= min(n, m); l = r + <span class="hljs-number">1</span>) &#123;</span><br><span class="line">    r = min(n / (n / l), m / (m / l)); </span><br><span class="line">    ret += (n / l) * (m / l) * (sum(r) - sum(l - <span class="hljs-number">1</span>)); </span><br><span class="line">  &#125; <span class="hljs-keyword">return</span> ret; </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Query</span> &#123;</span> </span><br><span class="line">  <span class="hljs-keyword">int</span> n, m, a, id;</span><br><span class="line">  <span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> Query &amp;x) <span class="hljs-keyword">const</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> a &lt; x.a; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;Q[N + <span class="hljs-number">5</span>]; </span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span></span><br><span class="line">  <span class="hljs-keyword">int</span> id, d; </span><br><span class="line">  <span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> node &amp;x) <span class="hljs-keyword">const</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> d &lt; x.d; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;A[N + <span class="hljs-number">5</span>]; </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  prework(); <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;T);</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= T; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d %d"</span>, &amp;Q[i].n, &amp;Q[i].m, &amp;Q[i].a), Q[i].id = i; </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; i++) A[i].d = F[i], A[i].id = i; </span><br><span class="line">  sort(Q + <span class="hljs-number">1</span>, Q + T + <span class="hljs-number">1</span>); sort(A + <span class="hljs-number">1</span>, A + N + <span class="hljs-number">1</span>); <span class="hljs-keyword">int</span> pos = <span class="hljs-number">0</span>; </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= T; i++) &#123;</span><br><span class="line">    <span class="hljs-keyword">while</span>(pos &lt; N &amp;&amp; A[pos + <span class="hljs-number">1</span>].d &lt;= Q[i].a) &#123;</span><br><span class="line">      ++pos;</span><br><span class="line">      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; A[pos].id * j &lt;= N; j++)</span><br><span class="line">        add(j * A[pos].id, A[pos].d * mu[j]);</span><br><span class="line">        </span><br><span class="line">    &#125; ans[Q[i].id] = calc(Q[i].n, Q[i].m); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= T; i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, ans[i] &amp; <span class="hljs-number">2147483647</span>); </span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
            <tag> 数论 </tag>
            
            <tag> 莫比乌斯反演 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
