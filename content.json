{"pages":[{"title":"友链","text":"常用 OJ Luogu | BZOJ | LOJ | UOJ | CodeForces | AtCoder | CodeChef 常用网站Github | Graph Editor | OEIS | OIerDb 友链欢迎交换友链=w= 同学 我的博客园 https://www.cnblogs.com/acfunction Parick Wang https://tle666.github.io 书海扬帆 www.ljhedp.cn 大佬 Siyuan 小姐姐 Orz https://hydingsy.github.io/ memset0 巨佬 Orz https://memset0.cn/ lmy 神仙 Orz https://www.cnblogs.com/LiM-817/","link":"/Links/index.html"}],"posts":[{"title":"BZOJ2653 middle","text":"Description给你一个序列，每次询问给出四个数 $a,b,c,d$，求所有区间 $[l,r]$ 满足 $l \\in [a,b], r \\in [c,d]$ 的中位数的最大值。强制在线。 $n \\leq 20000, Q \\leq 25000,a_i \\leq 10^9$ Solution考虑二分答案。假设现在二分出来的是 $x$ ，那么把 $\\ge x$ 的位置设成 $1$ ，$&lt; x$ 的设为 $-1$ 。那么一个区间的中位数 $\\ge x$ 等价于这个区间的和 $\\ge 0$ 如何处理题目给的左右端点的限制？ 可以发现 $[l,r]$ 必然包含 $[b+1,c-1]$ (如果 $b+1 \\leq c+1$ 的话）所以 $[l, r]$ 的和必然包含 $[b+1, c-1]$ 的和 显然让 $[l,r]$ 的和最大的方案是取 $[a,b]$ 的最大右段和 和 $[c,d]$ 的最大左段和 这些都可以用线段树维护。但这样需要每个数都开一颗线段树，空间爆炸。 把数组排序，这样每个数的线段树显然只是由前一个数的线段树把一个点的权值从 $1$ 改为 $-1$ 。可以使用主席树的思想（貌似就是主席树 然后就做完了。复杂度 $O(m \\log^2 n)$ Code123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384#include &lt;bits/stdc++.h&gt;using namespace std;const int N = 2000; int n, m; int q[4]; struct Node { int d, id; } a[N]; inline bool cmp(Node x, Node y) { return x.d &lt; y.d; }struct node { int left, right; int sm, lm, rm; node *ch[2]; inline void upd() { sm = ch[0]-&gt;sm + ch[1]-&gt;sm; lm = max(ch[0]-&gt;lm, ch[0]-&gt;sm + ch[1]-&gt;lm); rm = max(ch[1]-&gt;rm, ch[1]-&gt;sm + ch[0]-&gt;rm); }} *rt[N], pool[N * 50], *cur = pool, *ans; inline void B (node *r, int left, int right) { r-&gt;left = left, r-&gt;right = right; if(left == right) { r-&gt;sm = r-&gt;lm = r-&gt;rm = 1; return ; } node *lson = cur++, *rson = cur++; int mid = (left + right) &gt;&gt; 1; r-&gt;ch[0] = lson, r-&gt;ch[1] = rson; B(lson, left, mid), B(rson, mid + 1, right); r-&gt;upd(); }inline void I (node *pre, node *now, int pos) { now-&gt;left = pre-&gt;left, now-&gt;right = pre-&gt;right; if(now-&gt;left == now-&gt;right) { now-&gt;sm = now-&gt;lm = now-&gt;rm = -1; return ; } int mid = (pre-&gt;left + pre-&gt;right) &gt;&gt; 1; if(pos &lt;= mid) now-&gt;ch[1] = pre-&gt;ch[1], I(pre-&gt;ch[0], now-&gt;ch[0] = cur++, pos); if(pos &gt; mid) now-&gt;ch[0] = pre-&gt;ch[0], I(pre-&gt;ch[1], now-&gt;ch[1] = cur++, pos); now-&gt;upd(); }inline node* Q (node *now, int l, int r) { if(now-&gt;left == l &amp;&amp; now-&gt;right == r) return now; if(now-&gt;ch[0]-&gt;right &gt;= r) return Q(now-&gt;ch[0], l, r); else if(now-&gt;ch[1]-&gt;left &lt;= l) return Q(now-&gt;ch[1], l, r); else { node *ret = cur++, *L, *R; L = Q(now-&gt;ch[0], l, now-&gt;ch[0]-&gt;right); R = Q(now-&gt;ch[1], now-&gt;ch[1]-&gt;left, r); ret-&gt;sm = L-&gt;sm + R-&gt;sm; ret-&gt;lm = max(L-&gt;lm, L-&gt;sm + R-&gt;lm); ret-&gt;rm = max(R-&gt;rm, R-&gt;sm + L-&gt;rm); return ret; }}inline bool check(int id) { int sum = 0; if(q[2] + 1 &lt;= q[3] - 1) sum += Q (rt[id - 1], q[2] + 1, q[3] - 1)-&gt;sm; sum += Q (rt[id - 1], q[1], q[2])-&gt;rm; sum += Q (rt[id - 1], q[3], q[4])-&gt;lm; return sum &gt;= 0; }int main() { scanf(\"%d\", &amp;n); for(int i = 1; i &lt;= n; i++) { scanf(\"%d\", &amp;a[i].d); a[i].id = i; } sort(a + 1, a + n + 1, cmp); B(rt[0] = cur++, 1, n); for(int i = 1; i &lt;= n; i++) { rt[i] = cur++; I(rt[i - 1], rt[i], a[i].id); } int ans = 0; scanf(\"%d\", &amp;m); for(int i = 1; i &lt;= m; i++) { for(int j = 1; j &lt;= 4; j++) { scanf(\"%d\", &amp;q[j]), q[j] += ans, q[j] %= n; q[j]++; } sort(q + 1, q + 4 + 1); int l = 1, r = n; while(l &lt;= r) { int mid = (l + r) / 2; if(check(mid)) l = mid + 1, ans = a[mid].d; else r = mid - 1; } printf(\"%d\\n\", ans); } return 0; }","link":"/2019/01/20/BZOJ2653/"},{"title":"LOJ2174 「FJOI2016」神秘数","text":"Description$n$ 个数的序列，每次询问一个区间，求最小的一个数使得不能用这个区间中的数之和表示。 $n \\leq 10^5, \\sum a_i \\leq 10^9$ Solution第一次用数组写数据结构真短啊 考虑只有一次询问怎么做 把给定的区间内的数排序，从小到大扫一遍。 如果一个数比他之前的数之和至少大了 $1$ ，那么答案就是和 + 1 否则就可以把$[1,\\text{前缀和}]$ 都表示出来（感性理解很容易） 这道题怎么做也就显然了起来。只需要用主席树维护区间中小于等于某个数的数之和即可。流程如下 当前答案是 $a$，令 $S$ 是区间中 $\\leq a$ 的数之和 如果 $S &lt; a$ 则 $a$ 就是最后的答案 否则 让 $a = S+1$ 然后重复此操作 最开始的时候 $a=1$ 这样做的话 $a$ 每次都会翻一倍，所以最后的总复杂度是 $O(m \\log n \\log \\sum a_i)$ Code1234567891011121314151617181920212223242526272829303132333435#include &lt;bits/stdc++.h&gt;#define ll long longusing namespace std;const int N = 50000500; const int L = 1000000000; int n, m, a[N], cnt; int root[N], ch[N][2]; ll sum[N]; inline void I (int pre, int now, int l, int r, int val) { ch[now][0] = ch[pre][0], ch[now][1] = ch[pre][1]; int mid = (l + r) &gt;&gt; 1; sum[now] = sum[pre] + val; if(l == r) return ; if(val &lt;= mid) ch[now][0] = ++cnt, I(ch[pre][0], ch[now][0], l, mid, val); else ch[now][1] = ++cnt, I(ch[pre][1], ch[now][1], mid + 1, r, val); }inline int Q(int pre, int now, int l, int r, int val) { if(l == r) return sum[now] - sum[pre]; int mid = (l + r) / 2; if(val &lt;= mid) return Q(ch[pre][0], ch[now][0], l, mid, val); else return sum[ch[now][0]] - sum[ch[pre][0]] + Q(ch[pre][1], ch[now][1], mid + 1, r, val); }int main() { scanf(\"%d\", &amp;n); for(int i = 1; i &lt;= n; i++) { scanf(\"%d\", &amp;a[i]); root[i] = ++cnt; I(root[i - 1], root[i], 1, L, a[i]); } scanf(\"%d\", &amp;m); for(int i = 1; i &lt;= m; i++) { int l, r; scanf(\"%d %d\", &amp;l, &amp;r); int ans = 1; int S; while(1) { S = Q(root[l - 1], root[r], 1, L, ans); if(S &lt; ans) { printf(\"%d\\n\", ans); break ; } else ans = S + 1; } } return 0; }","link":"/2019/01/17/LOJ2174/"},{"title":"趣题「红眼睛与蓝眼睛」","text":"一道有趣的题目。 Description一个岛上有 $n$ 个人，其中有 $m$ 个红眼睛，$n - m$ 个蓝眼睛。这个岛有三个规则 他们不能照镜子，不能看自己眼睛的颜色。 他们不能告诉别人对方的眼睛是什么颜色。 一旦有人知道了自己是红眼睛，他就会在当天夜里自杀。 如果有一天，一个外来人来到这里对他们所有人说「你们这里有红眼睛的人」 假设每一个人都有着极强的逻辑推理能力。 求证：在这句话公布后地第 $m$ 天晚上这 $m$ 个红眼睛会一起自杀。 注：每一个人是不知道岛上有多少个红眼睛的人的 Solution乍一看，这题毫无头绪。告诉了一句「你们这里有红眼睛的人」又能怎么样呢？ 先来看一个数学归纳法的证明： 如果这个岛上只有一个红眼睛，听到这句话后看到其他人都不是红眼睛，便意识到自己是红眼睛，当天自杀。 假设当这个岛上有 $m$ 个红眼睛，他们会在第 $m$ 天自杀成立 当有 $m + 1$ 个红眼睛的时候，在每个红眼睛看来，都有 $m$ 个红眼睛，这个红眼睛能够推理出如果他不是红眼睛，那么他看到的 $m$ 个红眼睛都会在第 $m$ 天自杀 。而在第 $m$ 天，没有人自杀。一到第 $m + 1$ 天，每个红眼睛都意识到他是红眼睛。于是都在第 $m + 1$ 天自杀了 命题得证。看似没有问题，实际上，除了 $m = 1$ 的情况，这句话就相当于废话。因为没有任何用 要么在这之前红眼睛早就死光了，要么根本就不会死人。 但这并不是一个错误的事情。一个大神的回答说出来了 戳这里 这句话的作用就在于，让 每个人都知道每个人都知道这里有红眼睛的人 进一步地，这句话让 每个人都每个人都知道每个人都知道这里有红眼睛的人 等等 引用这位大神的话，就是： 简单说，「岛上有红眼睛」这件事本来只是一项「共有知识」（Mutual knowledge），公开宣告使它变成了一项「公共知识」（Common knowledge）。这两种知识的区分在认知逻辑里面非常重要，在博弈论中有广泛的应用。 用不严谨的话粗略介绍一下这两个概念：对于一个给定的命题P和一群给定的人，共有知识只需要满足一个条件：这群人中所有人都知道P，那么P就是这群人的共有知识。公共知识则需要满足以下所有条件：这群人中1、所有人都知道P；2、所有人都知道所有人都知道P；3、所有人都知道所有人都知道所有人都知道P；4、所有人都知道所有人都知道所有人都知道所有人都知道P；5、…… 共有知识 转化成 公共知识 的影响是很大的，就像这个例子一样 共有知识 转化成 公共知识 也是很难的，所以累次这个例子不太可能实现 同时这句话也统一了所有人的时间起点，时间在推理中扮演者重要的角色。这句话也让每一个人知道别人也知道这个时间起点 ，这样才有 “第 $m$ 天” 这种说法能够统一（就像人的出生时间不同，自然不能做出有效的推理","link":"/2019/01/23/Red-And-Blue-Eye/"},{"title":"BZOJ3529 「SDOI2014」数表","text":"Description$T$ 组询问，定义 $F(n)=\\sum\\limits_{d|n}d$。每次给出 $n,m,a$ 求 $$\\sum\\limits_{i=1,j=1,F(\\gcd(i,j)) \\leq a}^{i\\leq n, j \\leq m} F (\\gcd(i,j))$$ $T \\leq 20000;n,m,a\\leq 10^5$ Solution首先 $F$ 可以直接暴力地 $O(n \\log n)$ 筛出来。 考虑 $a$ 的限制不是很好处理，假设没有这个 $a$ 的限制，则所求为 $$\\sum\\limits_{i=1}^{n}\\sum\\limits_{j=1}^{m} F (\\gcd(i,j))$$ 令 $G(i)=\\sum\\limits_{x=1}^{n}\\sum\\limits_{y=1}^{m}[\\gcd(x,y)=i]$。这个东西是什么呢？在 这里 有它的推导过程。根据里面的过程，可以得到 $G(i) = \\sum\\limits_{d=1}^{\\lfloor\\frac{n}{i}\\rfloor}\\mu(d)\\lfloor\\frac{n}{id}\\rfloor\\lfloor\\frac{m}{id}\\rfloor$（默认 $n \\leq m$）令下面的过程中$t = id$，则所求的是 $$\\sum\\limits_{i=1}^{n}F(i)G(i)$$ $$= \\sum\\limits_{i=1}^{n}F(i)\\sum\\limits_{d=1}^{\\lfloor\\frac{n}{i}\\rfloor}\\mu(d)\\lfloor\\frac{n}{id}\\rfloor\\lfloor\\frac{m}{id}\\rfloor $$ $$=\\sum\\limits_{i=1}^{n}F(i)\\sum\\limits_{i | t}\\mu(\\frac{t}{i})\\lfloor\\frac{n}{t}\\rfloor\\lfloor\\frac{m}{t}\\rfloor$$ $$=\\sum\\limits_{t=1}^{n}\\lfloor\\frac{n}{t}\\rfloor\\lfloor\\frac{m}{t}\\rfloor\\sum\\limits_{i | t}F(i)\\mu(\\frac{t}{i})$$ 观察后面的式子，正好是一个狄利克雷卷积的形式。这种样子的都可以类似于那种 $O(n \\log n)$ 地质数筛法在调和级数内求出来，再结合分块就可以做完这个没有 $a$ 的题。 现在有了 $a$ 的限制之后，离线。把询问按照 $a$ 从小到大排序，然后按照 $F(i)$ 从小到大加入。每当有一个新的 $a$ ，就可以移动指针，将一些 $F$ 用处理 $\\sum\\limits_{i | t}F(i)\\mu(\\frac{t}{i})$ 的方式加入到这个里面。然后加入完之后用分块计算就行。 现在需要维护单点操作，查询前缀和，树状数组是不错的选择。 由于取模是 $2^{32} - 1$ ，可以直接 int 自然溢出最后和 $2147483647$ 取一个 &amp; 就行了。 时间复杂度：$O(n + n \\log n + n \\log ^ 2 (n) + T \\log (n)\\sqrt n)$ Code1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include &lt;bits/stdc++.h&gt;using namespace std;const int N = 100000; int T, cnt, flag[N + 5], p[N + 5], F[N + 5], mu[N + 5], ans[N + 5]; inline void prework() { flag[1] = mu[1] = 1; for(int i = 2; i &lt;= N; i++) { if(!flag[i]) { p[++cnt] = i, mu[i] = -1; } for(int j = 1; j &lt;= cnt &amp;&amp; i * p[j] &lt;= N; j++) { flag[i * p[j]] = 1; if(i % p[j] == 0) { mu[i * p[j]] = 0; break ; } mu[i * p[j]] = mu[i] * -1; } } for(int i = 1; i &lt;= N; i++) for(int j = i; j &lt;= N; j += i) F[j] += i;}int c[N + 5]; inline int lb(int x) { return x &amp; (-x); }inline void add(int x, int d) { for(int i = x; i &lt;= N; i += lb(i)) c[i] += d; }inline int sum(int x) { int ret = 0; for(int i = x; i; i -= lb(i)) ret += c[i]; return ret; }inline int calc(int n, int m) { int ret = 0; for(int l = 1, r; l &lt;= min(n, m); l = r + 1) { r = min(n / (n / l), m / (m / l)); ret += (n / l) * (m / l) * (sum(r) - sum(l - 1)); } return ret; }struct Query { int n, m, a, id; inline bool operator &lt; (const Query &amp;x) const { return a &lt; x.a; }}Q[N + 5]; struct node { int id, d; inline bool operator &lt; (const node &amp;x) const { return d &lt; x.d; }}A[N + 5]; int main() { prework(); scanf(\"%d\", &amp;T); for(int i = 1; i &lt;= T; i++) scanf(\"%d %d %d\", &amp;Q[i].n, &amp;Q[i].m, &amp;Q[i].a), Q[i].id = i; for(int i = 1; i &lt;= N; i++) A[i].d = F[i], A[i].id = i; sort(Q + 1, Q + T + 1); sort(A + 1, A + N + 1); int pos = 0; for(int i = 1; i &lt;= T; i++) { while(pos &lt; N &amp;&amp; A[pos + 1].d &lt;= Q[i].a) { ++pos; for(int j = 1; A[pos].id * j &lt;= N; j++) add(j * A[pos].id, A[pos].d * mu[j]); } ans[Q[i].id] = calc(Q[i].n, Q[i].m); } for(int i = 1; i &lt;= T; i++) printf(\"%d\\n\", ans[i] &amp; 2147483647); return 0; }","link":"/2019/01/14/bzoj3529/"}],"tags":[{"name":"主席树","slug":"主席树","link":"/tags/主席树/"},{"name":"二分","slug":"二分","link":"/tags/二分/"},{"name":"博弈论","slug":"博弈论","link":"/tags/博弈论/"},{"name":"数论","slug":"数论","link":"/tags/数论/"},{"name":"莫比乌斯反演","slug":"莫比乌斯反演","link":"/tags/莫比乌斯反演/"},{"name":"树状数组","slug":"树状数组","link":"/tags/树状数组/"}],"categories":[{"name":"题解","slug":"题解","link":"/categories/题解/"},{"name":"趣题","slug":"趣题","link":"/categories/趣题/"}]}