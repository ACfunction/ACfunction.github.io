{"pages":[{"title":"友链","text":"常用 OJ Luogu | BZOJ | LOJ | UOJ | CodeForces | AtCoder | CodeChef 常用网站Github | Graph Editor | OEIS | OIerDb 友链欢迎交换友链=w= 同学 我的博客园 戳这里 P_Wang 戳这里 WZL 大佬 戳这里 书海扬帆 戳这里 大佬 Siyuan 小姐姐 Orz 戳这里 lmy 神仙 Orz 戳这里","link":"/Links/index.html"}],"posts":[{"title":"BZOJ1042 「HNOI2008」硬币购物","text":"Description一共有 $4$ 种硬币。面值分别为 $c_1,c_2,c_3,c_4$ 。某人去商店买东西，去了 $tot$ 次。每次带 $d_i$ 枚 $c_i$ 硬币，买 $s$ 的价值的东西。请问每次有多少种付款方法。 Solution考虑没有 $d$ 的限制，直接完全背包。$dp_i$ 表示 $i$ 这个面值用 $c_1…c_4$ 凑有多少种方法 加上限制就容斥枚举 $16$ 种情况表示哪几种面值的性质没有被满足。 然后可以观察到，如果对于 $i$ 不满足限制，方案数就是 $dp_{s-(d_i+1)c_i}$ 所以归纳一下就是 ans = \\sum\\limits_{S \\subseteq {1,2,3,4}}(-1)^{|S|}dp_{(s-\\sum\\limits_{x \\in S} (d_x+1)c_x)}Code1234567891011121314151617181920212223242526272829303132333435363738394041/** * Author: AcFunction * Date: 2019-03-04 17:57:01 * Email: 3486942970@qq.com**/ #include &lt;bits/stdc++.h&gt;#define int long long#define ll long long#define RG register #define rep(i, l, r) for(RG int i = l; i &lt;= r; i++) #define per(i, r, l) for(RG int i = r; i &gt;= l; i--) using namespace std; void INIT() { ios :: sync_with_stdio(false); cin.tie(0); } const int N = 100100; int n, c[5], d[5]; int dp[N]; signed main() { INIT(); dp[0] = 1; rep(i, 1, 4) cin &gt;&gt; c[i]; cin &gt;&gt; n; rep(j, 1, 4) rep(i, 0, 100000) if(i + c[j] &lt;= 100000) dp[i + c[j]] += dp[i]; rep(i, 1, n) { int s; int ans = 0; rep(j, 1, 4) cin &gt;&gt; d[j]; cin &gt;&gt; s; rep(j, 0, 15) { int s1 = 0, s2 = s; rep(t, 1, 4) if(j &amp; (1 &lt;&lt; (t - 1))) { s1++; s2 -= (d[t] + 1) * c[t]; } ans += ((s1 &amp; 1) ? -1 : 1) * (s2 &gt;= 0 ? dp[s2] : 0); } cout &lt;&lt; ans &lt;&lt; endl; } return 0; }","link":"/2019/03/09/BZOJ1042/"},{"title":"BZOJ2653 middle","text":"Description给你一个序列，每次询问给出四个数 $a,b,c,d$，求所有区间 $[l,r]$ 满足 $l \\in [a,b], r \\in [c,d]$ 的中位数的最大值。强制在线。 $n \\leq 20000, Q \\leq 25000,a_i \\leq 10^9$ Solution考虑二分答案。假设现在二分出来的是 $x$ ，那么把 $\\ge x$ 的位置设成 $1$ ，$&lt; x$ 的设为 $-1$ 。那么一个区间的中位数 $\\ge x$ 等价于这个区间的和 $\\ge 0$ 如何处理题目给的左右端点的限制？ 可以发现 $[l,r]$ 必然包含 $[b+1,c-1]$ (如果 $b+1 \\leq c+1$ 的话）所以 $[l, r]$ 的和必然包含 $[b+1, c-1]$ 的和 显然让 $[l,r]$ 的和最大的方案是取 $[a,b]$ 的最大右段和 和 $[c,d]$ 的最大左段和 这些都可以用线段树维护。但这样需要每个数都开一颗线段树，空间爆炸。 把数组排序，这样每个数的线段树显然只是由前一个数的线段树把一个点的权值从 $1$ 改为 $-1$ 。可以使用主席树的思想（貌似就是主席树 然后就做完了。复杂度 $O(m \\log^2 n)$ Code123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384#include &lt;bits/stdc++.h&gt;using namespace std;const int N = 2000; int n, m; int q[4]; struct Node { int d, id; } a[N]; inline bool cmp(Node x, Node y) { return x.d &lt; y.d; }struct node { int left, right; int sm, lm, rm; node *ch[2]; inline void upd() { sm = ch[0]-&gt;sm + ch[1]-&gt;sm; lm = max(ch[0]-&gt;lm, ch[0]-&gt;sm + ch[1]-&gt;lm); rm = max(ch[1]-&gt;rm, ch[1]-&gt;sm + ch[0]-&gt;rm); }} *rt[N], pool[N * 50], *cur = pool, *ans; inline void B (node *r, int left, int right) { r-&gt;left = left, r-&gt;right = right; if(left == right) { r-&gt;sm = r-&gt;lm = r-&gt;rm = 1; return ; } node *lson = cur++, *rson = cur++; int mid = (left + right) &gt;&gt; 1; r-&gt;ch[0] = lson, r-&gt;ch[1] = rson; B(lson, left, mid), B(rson, mid + 1, right); r-&gt;upd(); }inline void I (node *pre, node *now, int pos) { now-&gt;left = pre-&gt;left, now-&gt;right = pre-&gt;right; if(now-&gt;left == now-&gt;right) { now-&gt;sm = now-&gt;lm = now-&gt;rm = -1; return ; } int mid = (pre-&gt;left + pre-&gt;right) &gt;&gt; 1; if(pos &lt;= mid) now-&gt;ch[1] = pre-&gt;ch[1], I(pre-&gt;ch[0], now-&gt;ch[0] = cur++, pos); if(pos &gt; mid) now-&gt;ch[0] = pre-&gt;ch[0], I(pre-&gt;ch[1], now-&gt;ch[1] = cur++, pos); now-&gt;upd(); }inline node* Q (node *now, int l, int r) { if(now-&gt;left == l &amp;&amp; now-&gt;right == r) return now; if(now-&gt;ch[0]-&gt;right &gt;= r) return Q(now-&gt;ch[0], l, r); else if(now-&gt;ch[1]-&gt;left &lt;= l) return Q(now-&gt;ch[1], l, r); else { node *ret = cur++, *L, *R; L = Q(now-&gt;ch[0], l, now-&gt;ch[0]-&gt;right); R = Q(now-&gt;ch[1], now-&gt;ch[1]-&gt;left, r); ret-&gt;sm = L-&gt;sm + R-&gt;sm; ret-&gt;lm = max(L-&gt;lm, L-&gt;sm + R-&gt;lm); ret-&gt;rm = max(R-&gt;rm, R-&gt;sm + L-&gt;rm); return ret; }}inline bool check(int id) { int sum = 0; if(q[2] + 1 &lt;= q[3] - 1) sum += Q (rt[id - 1], q[2] + 1, q[3] - 1)-&gt;sm; sum += Q (rt[id - 1], q[1], q[2])-&gt;rm; sum += Q (rt[id - 1], q[3], q[4])-&gt;lm; return sum &gt;= 0; }int main() { scanf(\"%d\", &amp;n); for(int i = 1; i &lt;= n; i++) { scanf(\"%d\", &amp;a[i].d); a[i].id = i; } sort(a + 1, a + n + 1, cmp); B(rt[0] = cur++, 1, n); for(int i = 1; i &lt;= n; i++) { rt[i] = cur++; I(rt[i - 1], rt[i], a[i].id); } int ans = 0; scanf(\"%d\", &amp;m); for(int i = 1; i &lt;= m; i++) { for(int j = 1; j &lt;= 4; j++) { scanf(\"%d\", &amp;q[j]), q[j] += ans, q[j] %= n; q[j]++; } sort(q + 1, q + 4 + 1); int l = 1, r = n; while(l &lt;= r) { int mid = (l + r) / 2; if(check(mid)) l = mid + 1, ans = a[mid].d; else r = mid - 1; } printf(\"%d\\n\", ans); } return 0; }","link":"/2019/01/20/BZOJ2653/"},{"title":"BZOJ2839 集合计数","text":"Description从大小为 $n$ 的集合中取出若干子集（至少一个），使得它们的交集的元素个数为 $K$ ，求取法的方案数，答案模$1000000007$ Solution$ans$ = 先选出这 $k$ 个元素是哪些 * 让剩下的交集为空 让剩下的交集为空 =(容斥) 随便选 - 交集至少一个元素 + 交集至少两个元素 … 交集至少为 $i$ 的方案数是 $\\binom{n-k}{i} \\cdot (2^{2^{n-k-i}}-1)$ (从剩下的 $n - k$ 里选 $i$ 个 * (有这些元素的子集随便选 - 啥都不选的一组) ans = \\binom{n}{k}\\sum\\limits_{i=0}^{n-k}(-1)^i \\binom{n-k}{i}\\cdot (2^{2^{n-k-i}}-1)Code1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253/** * Author: AcFunction * Date: 2019-03-04 17:33:39 * Email: 3486942970@qq.com**/#include &lt;bits/stdc++.h&gt;#define ll long long#define RG register #define rep(i, l, r) for(RG int i = l; i &lt;= r; i++) #define per(i, r, l) for(RG int i = r; i &gt;= l; i--)using namespace std;void INIT() { ios :: sync_with_stdio(false); cin.tie(0); }const int N = 1000005;const ll mod = (ll)1e9 + 7; ll fac[N], ans; ll fpw(ll x, ll k, ll p) { ll ret = 1ll; while(k) { if(k &amp; 1) ret = ret * x % p; x = x * x % p; k &gt;&gt;= 1; } return ret; }void prework(int n) { fac[0] = fac[1] = 1; rep(i, 2, n) fac[i] = fac[i - 1] * i % mod; }ll C(int n, int m) { if(m &gt; n) return 0; else return fac[n] * fpw(fac[n - m], mod - 2, mod) % mod * fpw(fac[m], mod - 2, mod) % mod; }int main() { INIT(); int n, k; cin &gt;&gt; n &gt;&gt; k; prework(n); ll pw1 = ((n - k) &amp; 1) ? -1 : 1, pw2 = 2; per(i, n - k, 0) { ans += pw1 * (pw2 - 1) % mod * C(n - k, i) % mod; ans %= mod; pw1 *= -1; pw2 *= pw2; pw2 %= mod; } ans = ans * C(n, k) % mod; ans = (ans + mod) % mod; cout &lt;&lt; ans &lt;&lt; endl; return 0; }","link":"/2019/03/17/BZOJ2839/"},{"title":"BZOJ2134 单选错位","text":"Description$n$ 道题，第 $i$ 道题有 $a_i$ 个选项。求将正确答案全部右移一位（第 $n$ 题移到第 $1$ 题）之后期望对的题数 Solution答案 = 期望多少个 $i$ 满足 $ans_i = ans_{i+1}$ 也 = sum $ans_i = ans_{i+1}$ 的期望也就是 $\\sum \\frac{\\min\\{a_i, a_{i+1}\\}}{a_ia_{i+1}}=\\sum\\frac{1}{\\max\\{a_i,a_{i+1}\\}}$ （为了方便设 $a_{n+1}=a_1$） 做完了 Code1234567891011121314151617181920212223/** * Author: AcFunction * Date: 2019-03-20 14:41:06 * Email: 3486942970@qq.com**/#include &lt;bits/stdc++.h&gt;using namespace std;int n, A, B, C, a[10000002]; double ans; int main() { scanf(\"%d%d%d%d%d\",&amp;n,&amp;A,&amp;B,&amp;C,a+1); for (int i = 2; i &lt;= n; i++) a[i] = ((long long)a[i - 1] * A + B) % 100000001; for (int i = 1; i &lt;= n; i++) a[i] = a[i] % C + 1; a[n + 1] = a[1]; for(int i = 1; i &lt;= n; i++) ans += 1.0 / max(a[i], a[i + 1]); printf(\"%.3lf\\n\", ans); return 0; }","link":"/2019/03/22/BZOJ2134/"},{"title":"BZOJ3143 「HNOI2013」游走","text":"Description$n$ 个点 $m$ 条边的无向连通图，在上面从 $1$ 号点开始随机游走。现在你可以给每条边从 $1$ 到 $m$ 编号作为分数（经过就得分）。求如何编号使得总分的期望最小。输出这个最小值即可。 $n \\leq 500$ Solution如果知道了每条边被经过的期望次数，那么根据排序不等式显然是逆序分配最小。 设 $f_u$ 是 $u$ 点被经过的期望次数，$deg_u$ 表示 $u$ 的度数。那么边 $(u, v)$ 被经过的期望次数是 \\frac{f_u}{deg_u}+\\frac{f_v}{deg_v}$f$ 的求法比较简单，即 f_u = \\sum\\limits_{(u,v) \\in E} \\frac{f_v}{deg_v}高斯消元一波再排个序就做完了。时间复杂度 $O(n^3)$ Code12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879/** * Author: AcFunction * Date: 2019-03-18 22:13:03 * Email: 3486942970@qq.com**/#include &lt;bits/stdc++.h&gt;#define ll long long#define db double#define PII pair &lt;int, int&gt; #define pb push_back #define Fi first#define Se second #define MP make_pair#define RG register #define rep(i, l, r) for(RG int i = l; i &lt;= r; i++) #define per(i, r, l) for(RG int i = r; i &gt;= l; i--)using namespace std;void INIT() { ios :: sync_with_stdio(false); cin.tie(0); }const int N = 505; int n, m, deg[N]; PII E[N * N]; db a[N][N], t[N]; db A[N * N], ans; vector &lt;int&gt; g[N]; void build(int n) { rep(u, 1, n) { a[u][u] = 1.0; for(auto v : g[u]) if(v != n) a[u][v] -= 1.0 / deg[v]; } a[1][n + 1] = 1.0; a[n][n + 1] = -1.0; }void gauss(int n) { rep(i, 1, n) { int p = i; rep(j, i + 1, n) if(fabs(a[j][i]) &gt; fabs(a[p][i] + 1e-13)) p = j; rep(j, i + 1, n) { if(fabs(a[j][i]) &lt; 1e-13) continue ; db cof = a[j][i] / a[i][i]; rep(k, i, n + 1) a[j][k] -= a[i][k] * cof; } } per(i, n, 1) { rep(j, i + 1, n) a[i][n + 1] -= a[i][j] * t[j]; t[i] = a[i][n + 1] / a[i][i]; }}int main() { INIT(); cin &gt;&gt; n &gt;&gt; m; rep(i, 1, m) { int u, v; cin &gt;&gt; u &gt;&gt; v; E[i] = MP(u, v); deg[u]++, deg[v]++; g[u].pb(v), g[v].pb(u); } build(n), gauss(n); rep(i, 1, m) A[i] = 1.0 * t[E[i].Fi] / deg[E[i].Fi] + 1.0 * t[E[i].Se] / deg[E[i].Se]; sort(A + 1, A + m + 1); rep(i, 1, m) ans += A[i] * (m - i + 1); printf(\"%.3lf\\n\", ans); return 0; }","link":"/2019/03/22/BZOJ3143/"},{"title":"BZOJ3160 万径人踪灭","text":"Description给定一个字符串由 ‘a’ 或 ‘b’ 组成。求有多少个子序列满足字母和坐标都关于一条对称轴对称并且不是连续的 字符串长度 $=n \\leq 10^5$ Solution默认字符串为 $S$ 从 $0$ 开始标号。 答案等于所有的满足字母和坐标都关于一条对称轴对称的子序列数量 - 连续的满足这个性质的子序列数量 后面这个可以直接用 manacher算法 直接求出，只需要考虑前面怎么求 考虑怎么算出关于第 $i$ 个位置对称的子序列个数。设有 $k$ 组 $(x, y)$ 使得 $x + y = 2 i$ 且 $x, y \\not= i$ 且 $S_x = S_y$ ，那么方案数就是 $2^{k+1}-1$ （k 组和 $i$ 这个位置选不选减去都不选的一种情况） 考虑怎么算出关于第 $i$ 到第 $i+1$ 个位置中间这个空隙（可以认为是 $i + \\frac{1}{2}$）对称的子序列的个数。设有 $k$ 组 $(x,y)$ 满足 $S_x = S_y$ 且 $x+y = 2(i+\\frac{1}{2}) = 2i + 1$ ，那么方案数就是 $2^k - 1$（和上面不一样的原因是自己这个位置不是整数不能被选所以不用考虑） 令 $ f_i = \\sum\\limits_{x+y=i} [S_x=S_y] $ ，那么 $f_i$ 和这个 $k$ 的关系是什么呢？ 这里要想清楚。当 $i$ 是偶数的时候，$[S_{\\frac{i}{2}}=S_{\\frac{i}{2}}]$ 其实也被算了进去，所以应该是 $f_i = 2k + 1$；而 $i$ 是奇数的时候就没有这个问题，直接就是 $f_i = 2k$；综合一下其实就是 $k = \\lfloor \\frac{f_i}{2} \\rfloor$ 然后就是怎么求 $f_i$ 的问题了。这是一个卷积的形式，又显然字母之间是独立的。那么对于每一个字母 $x$，令 $g_i = [S_i = x]$，那么 $f$ 就是由两个 $g$ 卷积得到的。所以最后 f 就是对于两个字母分别做一遍卷积加起来就行。 具体的，这道题的做法是： 拿到字符串，跑 manacher 得到 s1 令 $f_i = [S_i = a]$，将 $f * f$ 加到多项式 $h$ 中 令 $g_i = [S_i = b]$，将 $g * g$ 加到多项式 $h$ 中 答案就相当于 $ \\sum\\limits_{i=0}^{2n - 2} (2^{\\lfloor\\frac{h_i}{2}\\rfloor + [2|i]}-1)$ （可能有点复杂不过综合上面来看是显然的） 对于卷积，我用的是 NTT (FFT 我也写了，慢了 4 倍嘿嘿) 时间复杂度 $O(n \\log n)$ Code12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697/** * Author: AcFunction * Date: 2019-02-26 22:14:41 * Email: 3486942970@qq.com**/#include &lt;bits/stdc++.h&gt;#define ll long long#define db double #define RG register #define rep(i, l, r) for(RG int i = l; i &lt;= r; i++) #define per(i, r, l) for(RG int i = r; i &gt;= l; i--)using namespace std;void INIT() { ios :: sync_with_stdio(false); cin.tie(0); }const int N = 1001000;const ll mod = (ll)1e9 + 7; const ll MOD = 998244353; const ll G = 3; int n, len[N], r[N], L; char S[N]; string s; ll f[N], g[N], tmp[N], Ans[N], invl; ll fpw(ll x, ll k, ll p) { ll ret = 1ll; while(k) { if(k &amp; 1) ret = ret * x % p; x = x * x % p; k &gt;&gt;= 1; } return ret; }void NTT(ll *a, int op) { rep(i, 0, L - 1) tmp[i] = a[r[i]]; rep(i, 0, L - 1) a[i] = tmp[i]; for(int i = 1; i &lt; L; i &lt;&lt;= 1) { ll w = fpw(G, (MOD - 1) / (i &lt;&lt; 1), MOD); if(op == -1) w = fpw(w, MOD - 2, MOD); for(int j = 0; j &lt; L; j += i &lt;&lt; 1) { ll wn = 1ll; for(int k = j; k &lt; i + j; k++) { ll t = a[i + k] * wn % MOD; a[i + k] = (a[k] - t + MOD) % MOD; a[k] = (a[k] + t) % MOD; wn = wn * w % MOD; } } } if(op == -1) { rep(i, 0, L - 1) a[i] *= invl, a[i] %= MOD; }}int main() { INIT(); cin &gt;&gt; (S + 1); n = strlen(S + 1); s = \"^#\"; rep(i, 1, n) { s += S[i]; s += '#'; } int mx = 0, id = 0; rep(i, 1, 2 * n + 1) { len[i] = mx &gt; i ? min(len[2 * id - i], mx - i) : 1; while(s[i - len[i]] == s[i + len[i]]) len[i]++; if(mx &lt; i + len[i]) mx = i + len[i], id = i; } ll ans = 0; rep(i, 1, 2 * n + 1) ans += len[i] / 2, ans %= mod; L = 1; while(L &lt;= 2 * n) L &lt;&lt;= 1; invl = fpw(L, MOD - 2, MOD); for(int i = 1; i &lt; L; i &lt;&lt;= 1) for(int j = 0; j &lt; i; j++) r[i + j] = r[j] + L / (i * 2); rep(i, 0, n - 1) f[i] = (S[i + 1] == 'a'); rep(i, 0, n - 1) g[i] = f[i]; NTT(f, 1), NTT(g, 1); rep(i, 0, L - 1) Ans[i] = f[i] * g[i] % MOD; rep(i, 0, n - 1) f[i] = (S[i + 1] == 'b'); rep(i, 0, n - 1) g[i] = f[i]; rep(i, n, L - 1) f[i] = g[i] = 0; NTT(f, 1), NTT(g, 1); rep(i, 0, L - 1) Ans[i] += f[i] * g[i] % MOD, Ans[i] %= MOD; NTT(Ans, -1); ll anss = 0; rep(i, 0, 2 * n - 2) { int t = Ans[i]; t = t / 2; if(i &amp; 1) { anss += (fpw(2, t, mod) - 1) % mod; anss %= mod; } else anss += (fpw(2, t + 1, mod) - 1) % mod; anss %= mod; } cout &lt;&lt; ((anss - ans) % mod + mod) % mod &lt;&lt; endl; return 0; }","link":"/2019/02/28/BZOJ3160/"},{"title":"BZOJ3091 城市旅行","text":"Description给一颗以 $1$ 为根的有根树，维护以下操作 连接 $(u,v)$ 这条边 删除 $(u,v)$ 这条边 给 $u$ 到 $v$ 的链上每个点加上一个数 求在 $(u,v)$ 上任意选两个点它们之间的权值和的期望 $n, m \\leq 50000, a_i \\leq 10^6$ Solution前三个操作就是 LCT 板子，考虑如何在 LCT 上维护 4 操作 为了方便，设这个路径是 $a_1, a_2, a_3, \\cdots, a_{siz}$ ，其中 $siz$ 是长度 考虑每个点的贡献，易得我们要求的期望值 $=\\frac{\\sum\\limits_{i=1}^{siz} i (siz - i + 1)a_i}{\\frac{siz(siz+1)}{2}}$ 显然这个分母很好搞，只需要考虑怎么在 LCT 上维护分子，或者说在平衡树上。 也就是说，如果知道左子和右子的答案如何更新出这个点的答案 设左子表示 $a_1, a_2, \\cdots, a_p$， 该点的值是 $a_{p+1}$ ，右子表示 $a_{p+2}, \\cdots, a_{siz}$ 可以得到：左子的 $siz_0 = p$，右子的 $siz_1 = siz - p - 1$ 改点要的答案减去左子的答案减去右子的答案便是 $\\sum\\limits_{i=1}^{siz}i(siz - i + 1)a_i - \\sum\\limits_{i=1}^{p}i(p-i+1)a_i-\\sum\\limits_{i=p+2}^{siz} (i-p-1)(siz - i + 1)a_i$ $=\\sum\\limits_{i=1}^{p} i(siz-p)a_i+a_{p+1}(p+1)(siz-p)+\\sum\\limits_{i=p+2}^{siz}(p+1)(siz-i+1)a_i$ 根据上面得到的 $siz_0=p,siz_1=siz-p-1$ 简单化简一下可以得到 $=(siz_1+1)\\sum\\limits_{i=1}^{siz_0}i\\cdot a_i+a_{siz_0+1}(siz_0+1)(siz_1+1)+(siz_0+1)\\sum\\limits_{i=p+2}^{siz}(siz - i +1)a_i$ 到这里应该你已经知道怎么做了.. 为了清楚，再令 $b_1, b_2, \\cdots,b_{siz_b}$ 是左子的， $c_1, c_2, \\cdots,c_{siz_c}$ 是右子的，$d$ 是这个点本身的值。那么可以化简成简单清楚对称的形式： $=(siz_c+1)\\sum\\limits_{i=1}^{siz_b}i\\cdot b_i+d(siz_b+1)(siz_c+1)+(siz_b+1)\\sum\\limits_{i=1}^{siz_c}(siz_c-i+1)c_i$ 你只需要每个点再维护两个值： $ls=\\sum\\limits_{i=1}^{siz}i\\cdot a_i$ 和 $rs=\\sum\\limits_{i=1}^{siz}(siz - i +1)a_i$ 就可以从左右两个儿子得到自己的值 这两个东西维护还是比较简单的..具体的话就是再维护一个 $s$ 为子树里所有数的和然后令 $b,c$ 是左右两个儿子，那么有 $ls = ls_b+d\\cdot(siz_b+1)+ls_c+s_c (siz_b+1)$ 和 $rs=rs_c+d\\cdot(siz_c+1)+rs_b+s_b(siz_c+1)$ 就这样维护 以上是如何用左右儿子的信息得到自己，再来考虑链加的问题 一条链加上一个数 $x$ ，那么会如何影响我们维护的值？ 对于 $s$：$s = s + siz\\cdot x$ 对于 $ls$：$ls = ls + \\sum\\limits_{i=1}^{siz}i \\cdot x = ls + \\frac{siz(siz+1)}{2}\\cdot x$ 对于 $rs$：和 ls 一样 $rs = rs+\\frac{siz(siz+1)}{2}\\cdot x$ 对于最后的答案 $S$：$S = S + \\sum\\limits_{i=1}^{siz} i \\cdot (siz - i +1)\\cdot x$ 通过简单计算可得 $S= S+\\frac{siz(siz+1)(siz+2)}{6}\\cdot x$ 对于自己的值：直接加上 $x$ （废话） 然后 LCT 板子套一套就做完了 注意事项： 翻转的时候需要 swap(ls, rs) 两个点之间是联通的时候才执行链加操作（坑死我了） Code123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173/** * Author: AcFunction * Date: 2019-02-17 11:17:08 * Email: 3486942970@qq.com**/#include &lt;bits/stdc++.h&gt;#define ll long longusing namespace std;const int N = 200200; const ll INF = (ll)1e18; int n, m;ll a[N]; struct node { int rev; ll d, s, ls, rs, s1, add, siz; node *ch[2], *prt; int isr() { return (!prt) || ( prt-&gt;ch[0] != (this) &amp;&amp; prt-&gt;ch[1] != (this) ); } int dir() { return prt-&gt;ch[1] == (this); } void setc(node *p, int k) { (this)-&gt;ch[k] = p; if(p) p-&gt;prt = (this); } void setr() { rev ^= 1; swap(ls, rs); swap(ch[0], ch[1]); } void seta(ll x) { d += x, add += x; s += siz * x; ls += siz * (siz + 1) / 2 * x; rs += siz * (siz + 1) / 2 * x; s1 += siz * (siz + 1) * (siz + 2) / 6 * x; } void upd() { siz = 1, s = d; if(ch[0]) siz += ch[0]-&gt;siz, s += ch[0]-&gt;s; if(ch[1]) siz += ch[1]-&gt;siz, s += ch[1]-&gt;s; if(ch[0] &amp;&amp; ch[1]) { ls = ch[0]-&gt;ls + d * (ch[0]-&gt;siz + 1) + ch[1]-&gt;ls + ch[1]-&gt;s * (ch[0]-&gt;siz + 1); rs = ch[1]-&gt;rs + d * (ch[1]-&gt;siz + 1) + ch[0]-&gt;rs + ch[0]-&gt;s * (ch[1]-&gt;siz + 1); s1 = ch[0]-&gt;s1 + ch[1]-&gt;s1; s1 += ch[0]-&gt;ls * (ch[1]-&gt;siz + 1); s1 += ch[1]-&gt;rs * (ch[0]-&gt;siz + 1); s1 += d * (ch[0]-&gt;siz + 1) * (ch[1]-&gt;siz + 1); } else if(ch[0]) { ls = ch[0]-&gt;ls + d * (ch[0]-&gt;siz + 1); rs = d + ch[0]-&gt;rs + ch[0]-&gt;s; s1 = ch[0]-&gt;s1 + ch[0]-&gt;ls + d * (ch[0]-&gt;siz + 1); } else if(ch[1]) { ls = d + ch[1]-&gt;ls + ch[1]-&gt;s; rs = d * (ch[1]-&gt;siz + 1) + ch[1]-&gt;rs; s1 = ch[1]-&gt;s1 + ch[1]-&gt;rs + d * (ch[1]-&gt;siz + 1); } else { ls = rs = s1 = d; } } void push() { if(rev) { if(ch[0]) ch[0]-&gt;setr(); if(ch[1]) ch[1]-&gt;setr(); rev = 0; } if(add) { if(ch[0]) ch[0]-&gt;seta(add); if(ch[1]) ch[1]-&gt;seta(add); add = 0; } }} pool[N * 2], *P[N], *cur = pool;node *New(ll d) { node *p = cur++; p-&gt;d = d, p-&gt;ls = p-&gt;rs = d; p-&gt;s = p-&gt;s1 = d; p-&gt;prt = p-&gt;ch[0] = p-&gt;ch[1] = 0; p-&gt;siz = 1; return p; }void rotate(node *p) { node *prt = p-&gt;prt; int k = p-&gt;dir(); if(!prt-&gt;isr()) prt-&gt;prt-&gt;setc(p, prt-&gt;dir()); else p-&gt;prt = prt-&gt;prt; prt-&gt;setc(p-&gt;ch[!k], k); p-&gt;setc(prt, !k); prt-&gt;upd(); p-&gt;upd();}node *sta[N]; int top; void splay(node *p) { node *q = p; while(1) { sta[++top] = q; if(q-&gt;isr()) break ; q = q-&gt;prt; } while(top) (sta[top--])-&gt;push(); while(!p-&gt;isr()) { if(p-&gt;prt-&gt;isr()) rotate(p); else if(p-&gt;dir() == p-&gt;prt-&gt;dir()) rotate(p-&gt;prt), rotate(p); else rotate(p), rotate(p); } p-&gt;upd(); }node *access(node *p) { node *q = 0; for(; p; p = p-&gt;prt) { splay(p); p-&gt;ch[1] = q; (q = p)-&gt;upd(); } return q; }inline void mkroot(node *p) { access(p); splay(p); p-&gt;setr(); p-&gt;push(); }inline void split (node *p, node *q) { mkroot(p); access(q); splay(p); }inline void link (node *p, node *q) { mkroot(p); mkroot(q); q-&gt;prt = p; }inline void cut (node *p, node *q) { split(p, q); p-&gt;ch[1] = q-&gt;prt = 0; }inline node *find(node *p) { access(p); splay(p); while(p-&gt;ch[0]) p = p-&gt;ch[0]; return p; }inline ll gcd(ll a, ll b) { return !b ? a : gcd(b, a % b); }int main() { scanf(\"%d %d\", &amp;n, &amp;m); for(int i = 1; i &lt;= n; i++) { scanf(\"%lld\", &amp;a[i]); P[i] = New(a[i]); } for(int i = 1; i &lt; n; i++) { int u, v; scanf(\"%d %d\", &amp;u, &amp;v); link(P[u], P[v]); } for(int i = 1; i &lt;= m; i++) { int op, u, v; ll d; scanf(\"%d %d %d\", &amp;op, &amp;u, &amp;v); if(op == 1) if(find(P[u]) == find(P[v])) cut(P[u], P[v]); if(op == 2) if(find(P[u]) != find(P[v])) link(P[u], P[v]); if(op == 3) { scanf(\"%lld\", &amp;d); if(find(P[u]) != find(P[v])) continue ; // important! split(P[u], P[v]), P[u]-&gt;seta(d); } if(op == 4) { if(find(P[u]) != find(P[v])) { printf(\"-1\\n\"); continue ; } split(P[u], P[v]); ll ans = P[u]-&gt;s1; ll t = P[u]-&gt;siz * (P[u]-&gt;siz + 1) / 2; ll g = gcd(ans, t); printf(\"%lld/%lld\\n\", ans / g, t / g); } } return 0; }","link":"/2019/02/21/BZOJ3091/"},{"title":"BZOJ4008 「HNOI2015」亚瑟王","text":"Description有 $n$ 张卡牌，$r$ 局游戏，每张卡牌有 $p_i$ 的概率发动技能，如果发动会造成 $d_i​$ 的伤害。每局游戏从第一张卡牌开始开始一个个遍历，如果发动过技能则忽略继续；否则如果这张卡牌现在发动了，则结束回合；没有发动则继续。求造成的总伤害的期望。 Solution可以想象成把 $r$ 个机会分配给每一张卡牌。$dp[i][j]$ 表示前 $i$ 张还剩 $j$ 个机会的答案 dp[i][j] = dp[i-1][j] \\cdot (1-p[i])^j+dp[i-1][j+1]\\cdot (1-(1-p[i])^{j+1})前半部分可以理解成在 $j$ 轮没有一次触发，后半部分就是至少一次触发。并且后半部分因为出触发了所以对答案有贡献，所以在 dp 的时候顺便把 ans 加上后半部分 * $d_i$ Code1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253/** * Author: AcFunction * Date: 2019-03-17 15:45:54 * Email: 3486942970@qq.com**/#include &lt;bits/stdc++.h&gt;#define ll long long#define db double#define PII pair &lt;int, int&gt; #define pb push_back #define Fi first#define Se second #define MP make_pair#define RG register #define rep(i, l, r) for(RG int i = l; i &lt;= r; i++) #define per(i, r, l) for(RG int i = r; i &gt;= l; i--)using namespace std;void INIT() { ios :: sync_with_stdio(false); cin.tie(0); }const int N = 250; int T, n, r, d[N]; db f[N][N], p[N]; db fpw(db x, int k) { db ret = 1.0; while(k) { if(k &amp; 1) ret = ret * x; x = x * x; k &gt;&gt;= 1; } return ret; }int main() { INIT(); cin &gt;&gt; T; while(T--) { cin &gt;&gt; n &gt;&gt; r; memset(f, 0, sizeof(f)); rep(i, 1, n) cin &gt;&gt; p[i] &gt;&gt; d[i]; f[0][r] = 1; db ans = 0; rep(i, 1, n) per(j, r, 0) f[i][j] = f[i - 1][j] * fpw(1 - p[i], j) + f[i - 1][j + 1] * (1 - fpw(1 - p[i], j + 1)), ans += d[i] * f[i - 1][j + 1] * (1 - fpw(1 - p[i], j + 1)); printf(\"%.6lf\\n\", ans); } return 0; }","link":"/2019/03/22/BZOJ4008/"},{"title":"BZOJ4665 小w的喜糖","text":"Description$n$ 颗糖发给了 $n$ 个人，每颗糖有一个种类。$n$ 个人相互交换手中的糖那么有多少种方案使得每个人手中的糖的种类都与原来不同。 两个方案不同当且仅当，存在一个人，他手中的糖的种类在两个方案中不一样。 答案对 $10^9 + 9$ 取模 答案对 $10^9 + 9$ 取模！！！！！ $10^9 + 9$ ！！！！ $10^9 + 9$ ！！！！！ $10^9 + 9$ ！！！！！ Solution可以暂时不考虑相同种类糖之间的关系，把它们当成不同的最后把答案乘上 $\\frac{1}{\\Pi_{i} a_i!}$ . $a_i$ 表示种类 $i$ 的糖数 设 $dp[i][j]$ 表示前 $i$ 种糖至少有 $j$ 个人不合法（即手中拿的糖和原来一样。那么有 dp[i][j] = \\sum\\limits_{k=0}^{\\min(a_i,j)} \\binom{a_i}{k} \\cdot dp[i-1][j-k] \\cdot a_i(a_i-1)\\cdots(a_i - k + 1)然后对于答案就可以直接容斥得到 ans = \\sum\\limits_{i=0}^{n} (-1)^{i}dp[n][i]\\cdot(n-i)!Code12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061/** * Author: AcFunction * Date: 2019-03-04 21:07:09 * Email: 3486942970@qq.com**/#include &lt;bits/stdc++.h&gt;#define ll long long#define RG register #define rep(i, l, r) for(RG int i = l; i &lt;= r; i++) #define per(i, r, l) for(RG int i = r; i &gt;= l; i--)using namespace std;void INIT() { ios :: sync_with_stdio(false); cin.tie(0); }const int N = 2005; const ll mod = (ll)1e9 + 9; ll fpw(ll x, ll k, ll p) { ll ret = 1; while(k) { if(k &amp; 1) ret = ret * x % p; x = x * x % p; k &gt;&gt;= 1; } return ret; }int n, a[N]; ll dp[N][N], inv[N], invf[N], fac[N]; void prework() { inv[1] = fac[0] = fac[1] = invf[0] = invf[1] = 1; rep(i, 2, n) inv[i] = (mod - mod / i) * inv[mod % i] % mod, fac[i] = fac[i - 1] * i % mod, invf[i] = invf[i - 1] * inv[i] % mod; }ll C(int n, int m) { if(n &lt; m) return 0; return fac[n] * invf[m] % mod * invf[n - m] % mod; }int main() { INIT(); cin &gt;&gt; n; prework(); rep(i, 1, n) { int t; cin &gt;&gt; t; a[t]++; } ll ans = 0; dp[0][0] = 1; rep(i, 1, n) rep(j, 0, n) rep(k, 0, min(a[i], j)) dp[i][j] += 1ll * dp[i - 1][j - k] * C(a[i], k) % mod * fac[a[i]] % mod * invf[a[i] - k] % mod, dp[i][j] %= mod; // rep(i, 0, n) cout &lt;&lt; dp[n][i] &lt;&lt; \" \"; rep(i, 0, n) ans += 1ll * ((i &amp; 1) ? -1 : 1) * dp[n][i] % mod * fac[n - i] % mod, ans %= mod, ans += mod, ans %= mod; rep(i, 1, n) ans *= invf[a[i]], ans %= mod; cout &lt;&lt; ((ans % mod + mod) % mod); return 0; }","link":"/2019/03/17/BZOJ4665/"},{"title":"BZOJ4361 isn","text":"Description给出一个长度为 $n$ 的序列 $A(A_1,A_2 \\cdot A_n)$。如果序列 $A$ 不是非降的，你必须从中删去一个数这一操作，直到 $A$ 非降为止。求有多少种不同的操作方案，答案模 $10^9+7$ 。 Solution设 $dp[i][j]$ 表示以 $i$ 这个点结尾，长度恰好为 $j$ 的非降子序列的个数 求法要用树状数组维护（还要离散化） 考虑怎么求出答案 令 $g[i]$ 为有多少个长度为 $i$ 的非降子序列即 g[i] = \\sum\\limits_{j=1}^{n} dp[j][i]那么有：将原序列删除到长度为 $i$ 的子序列的方案数是 g[i] \\cdot (n-i)!乍看很对，仔细一想其实这不是对的：因为并没有考虑在 (i+1) 的时候已经达到状态就不会再继续进行操作 如果当前不合法那么这个序列只有可能是从 $i+1$ 的状态选择了一个数删掉得到的。所以有 ans = \\sum\\limits_{i = 1} ^ {n} g[i] \\cdot (n - i)! - (i + 1) \\cdot g[i + 1] \\cdot (n - i - 1)!时间复杂度：$O(n^2 \\log n)$ Code1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071/** * Author: AcFunction * Date: 2019-03-04 19:04:32 * Email: 3486942970@qq.com**/#include &lt;bits/stdc++.h&gt;#define int long long#define ll long long#define RG register #define rep(i, l, r) for(RG int i = l; i &lt;= r; i++) #define per(i, r, l) for(RG int i = r; i &gt;= l; i--)using namespace std;void INIT() { ios :: sync_with_stdio(false); cin.tie(0); }const int N = 2005; const ll mod = (ll)1e9 + 7; int n, a[N], f[N][N];ll fac[N], g[N]; int lb(int x) { return x &amp; (-x); }struct BIT { int c[N]; void add(int x, int d) { for(int i = x; i &lt;= N; i += lb(i)) c[i] += d, c[i] %= mod; } int sum(int x) { int ret = 0; for(int i = x; i; i -= lb(i)) ret += c[i], ret %= mod; return ret; }} b[N]; int aa[N]; map &lt;int, int&gt; mp; int cnt; signed main() { INIT(); cin &gt;&gt; n; rep(i, 1, n) cin &gt;&gt; aa[i], a[i] = aa[i]; sort(aa + 1, aa + n + 1); rep(i, 1, n) { if(!mp[aa[i]]) mp[aa[i]] = ++cnt; } rep(i, 1, n) a[i] = mp[a[i]]; rep(i, 1, n) f[i][1] = 1; rep(j, 2, n) { rep(i, 1, n) { f[i][j] = b[j - 1].sum(a[i]); b[j - 1].add(a[i], f[i][j - 1]); } } fac[0] = fac[1] = 1; ll ans = 0; rep(i, 2, n) fac[i] = fac[i - 1] * i % mod; rep(i, 1, n) rep(j, 1, n) g[i] += f[j][i], g[i] %= mod; rep(i, 1, n) { ans += ((g[i] * fac[n - i] % mod) - ((i + 1) * g[i + 1] % mod * fac[n - i - 1]) % mod) % mod; ans %= mod; } cout &lt;&lt; (ans + mod) % mod &lt;&lt; endl; return 0; }","link":"/2019/03/17/BZOJ4361/"},{"title":"CF1110E Magic Stones","text":"Description给出一个初始序列 $a$ 和一个目标序列 $b$，你可以对 $a$ 中的除去第一个和最后一个点之外的任意一个点 $i$ ，让 $a_i$ 变成 $a_{i-1}+a_{i+1}-a_i$ 。问是否能够通过若干次操作使得 a 变成 b 序列长度 $n \\leq 10^5$ Solution我觉得这个题应该放在 A 考虑一个序列 : a|b|c 对 b 进行操作：a|a+c-b|c 他的差分序列原来是：a-b | b-c 现在变成了：b-c | a-b 所以一次操作相当于是把差分数组里的相邻两个数给交换了位置 所以只用判断目标序列的差分数组排序后是否等于初始序列的差分数组 还有第一个数相不相等（比赛的时候没考虑这个 wa 了一发…） 时间复杂度瓶颈在排序（或者说判断相同） Code1234567891011121314151617181920#include &lt;bits/stdc++.h&gt;using namespace std;const int N = 100100; int n, a[N], b[N]; int main() { scanf(\"%d\", &amp;n); for(int i = 1; i &lt;= n; i++) scanf(\"%d\", &amp;a[i]); for(int i = 1; i &lt;= n; i++) scanf(\"%d\", &amp;b[i]); if(a[1] != b[1]) { printf(\"No\\n\"); return 0; } for(int i = 1; i &lt; n; i++) a[i] = a[i + 1] - a[i]; for(int i = 1; i &lt; n; i++) b[i] = b[i + 1] - b[i]; sort(a + 1, a + n), sort(b + 1, b + n); for(int i = 1; i &lt; n; i++) if(a[i] != b[i]) { printf(\"No\\n\"); return 0; } printf(\"Yes\\n\"); return 0; }","link":"/2019/02/09/CF1110E/"},{"title":"CF1110F Nearest Leaf","text":"Description给你一颗满足编号 = dfs 序的带边权的有根树。$m$ 次询问，每次给出 $v,l,r$ 求编号在 $[l,r]$ 中的叶子到 $v$ 节点的最短距离 $n,m \\leq 5\\times10^5,w \\leq 10^9$ Solution如果我们知道 $u$ 节点到所有叶子的最短路，如何求出他的某一个儿子 $v$ 到所有叶子的最短路呢？ 不妨设 $(u,v)$ 的边权是 $w$ 。那么在 $v$ 这颗子树内的叶子到 $v$ 的距离较 $u$ 要减少 $w$ ； $v$ 这颗子树外的叶子到 $v$ 的距离较 $u$ 要增加 $w$ 。 又良心出题人给的树是满足那个性质的，所以子树内的编号是连续的。 所以最开始 dfs 一遍。求出每个点到根的距离。把询问离线，进行一次先序遍历。 每次进入到一颗子树，就用线段树把该子树内的叶子减少 w 外面的增加 w 当回溯的父亲的时候，就用线段树把该子树内的叶子增加 w 外面的减少 w 然后遍历到一个节点就把和他有关的询问全都用线段树里的信息处理掉就行了 Code我的实现貌似有点麻烦…我直接用线段树维护叶子，所以每次给出的左右端点还要在叶子序列里二分一下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156#include &lt;bits/stdc++.h&gt;#define ll long long#define PI pair#define Fi first#define Se second#define MP make_pair#define INF 1000000000000000000using namespace std;const int N = 500500; int n, m, siz[N]; ll dis[N], ans[N];vector &lt;int&gt; lea; struct edge { int v; ll w; edge *next; } pol[N * 2], *head[N], *cu = pol;inline void addedge(int u, int v, ll w) { edge *p = cu++, *q = cu++; p-&gt;v = v, p-&gt;w = w, p-&gt;next = head[u], head[u] = p; q-&gt;v = u, q-&gt;w = w, q-&gt;next = head[v], head[v] = q; }inline void dfs(int u, int pre) { siz[u] = 1; bool fla = 1; for(edge *p = head[u]; p; p = p-&gt;next) { int v = p-&gt;v; if(v == pre) continue ; fla = 0; dis[v] = dis[u] + p-&gt;w; dfs(v, u); siz[u] += siz[v]; } if(fla) lea.push_back(u); }struct ST { int l, r; ll tag, mn; ST *ch[2]; inline void seta(ll d) { tag += d; mn += d; } inline void upd() { mn = min(ch[0]-&gt;mn, ch[1]-&gt;mn); } inline void push() { if(tag) { if(ch[0]) ch[0]-&gt;seta(tag); if(ch[1]) ch[1]-&gt;seta(tag); tag = 0; } }} pool[N * 2], *cur = pool, *rt; inline void build(ST *p, int l, int r) { p-&gt;l = l, p-&gt;r = r; if(l == r) { p-&gt;mn = dis[lea[l - 1]]; return ; } ST *ls = cur++, *rs = cur++; p-&gt;ch[0] = ls, p-&gt;ch[1] = rs; int mid = (l + r) &gt;&gt; 1; build(ls, l, mid); build(rs, mid + 1, r); p-&gt;upd(); }inline void modify(ST *p, int l, int r, ll d) { if(l &gt; r) return ; if(p-&gt;l == l &amp;&amp; p-&gt;r == r) return p-&gt;seta(d); p-&gt;push(); if(p-&gt;ch[0]-&gt;r &gt;= r) modify(p-&gt;ch[0], l, r, d); else if(p-&gt;ch[1]-&gt;l &lt;= l) modify(p-&gt;ch[1], l, r, d); else modify(p-&gt;ch[0], l, p-&gt;ch[0]-&gt;r, d), modify(p-&gt;ch[1], p-&gt;ch[1]-&gt;l, r, d); p-&gt;upd(); }inline ll Qmin(ST *p, int l, int r) { if(l &gt; r) return INF; p-&gt;push(); if(p-&gt;l == l &amp;&amp; p-&gt;r == r) return p-&gt;mn; if(p-&gt;ch[0]-&gt;r &gt;= r) return Qmin(p-&gt;ch[0], l, r); else if(p-&gt;ch[1]-&gt;l &lt;= l) return Qmin(p-&gt;ch[1], l, r); else return min(Qmin(p-&gt;ch[0], l, p-&gt;ch[0]-&gt;r), Qmin(p-&gt;ch[1], p-&gt;ch[1]-&gt;l, r)); }vector &lt; PI &lt;int, PI &lt;int, int&gt; &gt; &gt; Q[N]; // emm 我还不太会用 lower_bound / upper_bound 所以就只能手写了..inline int up(int x) { int l = 0, r = n - 1, ret = 0; while(l &lt;= r) { int mid = (l + r) &gt;&gt; 1; if(lea[mid] &lt;= x) l = mid + 1, ret = mid; else r = mid - 1; } return ret + 1; }inline int lw(int x) { int l = 0, r = n - 1, ret = n - 1; while(l &lt;= r) { int mid = (l + r) &gt;&gt; 1; if(lea[mid] &gt;= x) r = mid - 1, ret = mid; else l = mid + 1; } return ret + 1; }inline void solve(int u, int pre) { for(int i = 0; i &lt; Q[u].size(); i++) { int id = Q[u][i].Fi; int l = Q[u][i].Se.Fi; int r = Q[u][i].Se.Se; // printf(\"***%d %d %d\\n\", id, up(l), lw(r)); ans[id] = Qmin(rt, lw(l), up(r)); } for(edge *p = head[u]; p; p = p-&gt;next) { int v = p-&gt;v; if(v == pre) continue ; int L = lw(v), R = up(v + siz[v] - 1); ll w = p-&gt;w; // printf(\"%d %d %d\\n\", v, L, R); modify(rt, L, R, -w); modify(rt, 1, L - 1, w); modify(rt, R + 1, n, w); solve(v, u); modify(rt, L, R, w); modify(rt, 1, L - 1, -w); modify(rt, R + 1, n, -w); }}int main() { scanf(\"%d %d\", &amp;n, &amp;m); for(int i = 2; i &lt;= n; i++) { int p; ll w; scanf(\"%d %lld\", &amp;p, &amp;w); addedge(p, i, w); } dfs(1, 0); n = lea.size(); sort(lea.begin(), lea.end()); build(rt = cur++, 1, n); for(int i = 1; i &lt;= m; i++) { int v, l, r; scanf(\"%d %d %d\", &amp;v, &amp;l, &amp;r); Q[v].push_back(MP(i, MP(l, r))); } solve(1, 0); for(int i = 1; i &lt;= m; i++) printf(\"%lld\\n\", ans[i]); return 0; }","link":"/2019/02/09/CF1110F/"},{"title":"CF757F Team Rocket Rises Again","text":"Description一个 $n$ 个点 $m$ 条边的无向图，给出起点 $S$ 。求删除掉一个不是 $S$ 的点后最多能改变多少个点到 $S$ 的最短路。输出这个最大值。 $n \\leq 200000, m \\leq \\min(\\frac{n(n-1)}{2},300000)$ Solution在飞机上写的题解 2333 定义 $d_u$ 是 $S$ 到 $u$ 的最短路；最短路 DAG 为所有有向边 $(u,v)$ 满足 $d_u+w(u,v)=d_v$ 组成的 DAG . 那么显然删这个 DAG 上的点才是对答案有贡献的。 考虑如何求出删完一个点会使得有多少个点的最短路有改变。 把这个 DAG 的支配树建出来然后对于一个点它在支配树上的子树大小就是答案。 注：支配树是啥？ 在一个有向图中有一个节点是 $S$ ；对于节点 $u$ 从 $S$ 到 $u$ 上的路径必到的点称之为 $u$ 的支配点 对于每一个 $u$ ，从离他最近的一个点向他连一条边。这些边组成的便是原图的支配树。其中 $S$ 为根节点 对于一个 DAG 如何建出他的支配树？即对于一个点怎么求出离他最近的支配点？ 可以考虑用拓扑排序的顺序更新。对于节点 $u$ ，它的所有前驱在支配树上的 LCA便是它在支配树上的父亲；即离他最近的支配点。 这个过程需要维护的就是 加点 和 维护 LCA 。可以用倍增用 $O(n \\log n)$ 的时间复杂度解决 Code123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108#include &lt;bits/stdc++.h&gt;using namespace std;#define int long long // don't think I use int ! const int N = 300300; const int INF = (int)4e18; int n, m, S, dis[N], U[N], V[N], W[N], ind[N], fa[N][25], dep[N], siz[N]; vector &lt;int&gt; g[N]; struct edge { int v, w; edge *next; } *h1[N], *h2[N], *h3[N], pool[N * 6], *cur = pool; inline void add1(int u, int v, int w) { edge *p = cur++; p-&gt;w = w; p-&gt;v = v, p-&gt;next = h1[u], h1[u] = p; }inline void add2(int u, int v) { edge *p = cur++; p-&gt;v = v, p-&gt;next = h2[u], h2[u] = p; }inline void add3(int u, int v) { edge *p = cur++; p-&gt;v = v, p-&gt;next = h3[u], h3[u] = p; }inline void add(int x, int f) { fa[x][0] = f; for(int i = 1; i &lt;= 20; i++) fa[x][i] = fa[fa[x][i - 1]][i - 1]; dep[x] = dep[f] + 1; }inline int LCA(int u, int v) { if(dep[u] &lt; dep[v]) swap(u, v); for(int i = 20; i &gt;= 0; i--) if(dep[fa[u][i]] &gt;= dep[v] &amp;&amp; fa[u][i]) u = fa[u][i]; if(u == v) return u; for(int i = 20; i &gt;= 0; i--) if(fa[u][i] != fa[v][i]) u = fa[u][i], v = fa[v][i]; return fa[u][0]; }struct node { int d, id; inline bool operator &lt; (const node &amp;x) const { return d &gt; x.d; }} tmp; priority_queue &lt;node&gt; Q; inline void dijkstra() { for(int i = 1; i &lt;= n; i++) dis[i] = INF; tmp.id = S, tmp.d = 0; Q.push(tmp); dis[S] = 0; while(!Q.empty()) { tmp = Q.top(); Q.pop(); int u = tmp.id; if(dis[u] &lt; tmp.d) continue ; for(edge *p = h1[u]; p; p = p-&gt;next) { int v = p-&gt;v; if(dis[v] &gt; dis[u] + p-&gt;w) { dis[v] = dis[u] + p-&gt;w; tmp.id = v, tmp.d = dis[v]; Q.push(tmp); } } }}inline void dfs(int u, int pre) { siz[u] = 1; for(edge *p = h3[u]; p; p = p-&gt;next) { int v = p-&gt;v; if(v == pre) continue ; dfs(v, u); siz[u] += siz[v]; }}signed main() { scanf(\"%lld %lld %lld\", &amp;n, &amp;m, &amp;S); for(int i = 1; i &lt;= m; i++) { int u, v, w; scanf(\"%lld %lld %lld\", &amp;u, &amp;v, &amp;w); U[i] = u, V[i] = v, W[i] = w; add1(u, v, w), add1(v, u, w); } dijkstra(); for(int i = 1; i &lt;= m; i++) { if(dis[U[i]] == dis[V[i]] + W[i]) add2(V[i], U[i]), ind[U[i]]++, g[U[i]].push_back(V[i]); if(dis[V[i]] == dis[U[i]] + W[i]) add2(U[i], V[i]), ind[V[i]]++, g[V[i]].push_back(U[i]); } queue &lt;int&gt; Q; Q.push(S); dep[S] = 1; while(!Q.empty()) { int u = Q.front(); Q.pop(); // printf(\"%d\\n\", u); if(g[u].size()) { int lca = g[u][0]; for(int i = 1; i &lt; g[u].size(); i++) { // printf(\"%d\\n\", g[u][i]); lca = LCA(g[u][i], lca); } add(u, lca); add3(lca, u); } for(edge *p = h2[u]; p; p = p-&gt;next) { int v = p-&gt;v; ind[v]--; if(ind[v] == 0) Q.push(v); } } int ans = 0; dfs(S, 0); for(int i = 1; i &lt;= n; i++) if(i != S) ans = max(ans, siz[i]); printf(\"%lld\\n\", ans); return 0; }","link":"/2019/02/01/CF757F/"},{"title":"「云玩家拯救计划」小题单","text":"云玩家拯救计划（雾 网络流A(CF1009G)：直接贪心，用二分图里的一个霍尔定理来判断合法性。实现上可以简单一点。 B(CF808F)：先二分答案，观察到除了 2 以外所有质数由偶数+奇数得来。于是 check 就可以特判 1 + 1 的情况，建图最小割即可。 C(CF164C)：把任务按照开始时间排序，S -&gt; 最小的开始时间 -&gt; 第二个 -&gt; .. -&gt; 第 n 个 -&gt; T 连流量 m 费用 0 ，再对于每个任务连一条从起点到终点加 1，流量 1 费用 -c 的边。然后最小费用最大流就好了。我还是不会输出方案（捂脸 D(CF277E)：以前做过…写过题解… E(CF1082G)：把每个点和每条边算成一个点，边的权值是负的，然后最大权闭合子图 F(BZOJ3158)： 考虑 % 4 可以证明奇数方+奇数方不等于完全平方，同时偶数的最大公约数 &gt; 1 所以奇数一边偶数一边建二分图然后就是套路的最小割了G(CF863F)：可以求出每个点的可行区间，然后那个平方的条件就可以拆边。就是 (1,1), (3,1), (5,1), (7,1) …. 然后最小费用最大流 H(CF498C)：显然除质因子答案最大 &amp;&amp; 质因子之间相互独立。对于每一个出现过的质因子跑最大流就行了 数论A(BZOJ2154) ：不妨设 $n \\leq m$ $\\sum\\limits_{i=1}^{n}\\sum\\limits_{j=1}^{m} lcm(i, j)$ $=\\sum\\limits_{i=1}^{n}\\sum\\limits_{j=1}^{m} \\frac{ij}{\\gcd(i,j)}$ $=\\sum\\limits_{d=1}^{n}\\sum\\limits_{i’=1}^{\\lfloor \\frac{n}{d} \\rfloor}\\sum\\limits_{j’=1}^{\\lfloor \\frac{m}{d} \\rfloor} i’j’d [\\gcd(i’,j’)=1]$ $=\\sum\\limits_{d=1}^{n}d \\sum\\limits_{i’=1}^{\\lfloor \\frac{n}{d} \\rfloor} i’ \\sum\\limits_{j’=1}^{\\lfloor \\frac{m}{d} \\rfloor} j’ [gcd(i’,j’)=1]$ $ =\\sum\\limits_{d=1}^{n} d \\sum\\limits_{i’=1}^{\\lfloor \\frac{n}{d} \\rfloor} i’ \\sum\\limits_{j’=1}^{\\lfloor \\frac{m}{d} \\rfloor} j’ \\sum\\limits_{d’|i’,d’|j’}\\mu(d’)$ $=\\sum\\limits_{d=1}^{n}\\sum\\limits_{d’=1}^{n}\\mu(d’)d \\sum\\limits_{i’=1}^{\\lfloor \\frac{n}{d’d} \\rfloor} i’ \\sum\\limits_{j’=1}^{\\lfloor \\frac{m}{d’d} \\rfloor} j’ $ 令 $dd’=T, F(T)=\\sum\\limits_{d | T}\\mu(d)\\frac{T}{d}$ 。F 可以线性筛出来，就做完了 ） 然后这个题连分块都不用（ 好像有需要分块的加强版被权限了（ B(BZOJ2440)：题解 C(BZOJ3529)：题解 D(HDU6053)： 待填坑 E(BZOJ2956)： $\\sum\\limits_{i=1}^{n} \\sum\\limits_{j=1}^{m} i\\not= j(m\\%j)$ $=\\sum\\limits_{i=1}^{n}n\\%i\\sum\\limits_{j=1}^{m}m\\%j-\\sum\\limits_{i=1}^{n}(n\\%i)(m\\%i)$ 然后把 $n\\%i$ 搞成 $n -i \\lfloor\\frac{n}{i}\\rfloor $ ，$m\\%i$ 同理，然后推推式子分个块就做完了 F(HDU4947)：待填坑 G(BZOJ2005)：有点简单懒得写hhh H(HDU4473)：把题目要求转化为有多少个有序对 (a,b,c) 满足 abc = n。然后分三类 a,b,c;a,a,b;a,a,a 讨论下就行了（优秀的暴力… I(HDU5942)：有点难啊…看的 这个题解 线段树主席树A(HDU4578)：线段树维护加标记乘标记以及三个值分别表示和，平方的和，立方的和。加标记更新就用二项式展开一下倒序更新；乘标记就是和乘上d，平方乘上d^2，立方同理…然后覆盖操作拆成先乘 0 再加 。 B(BZOJ1818)：先把题目条件转化成所有由这些点组成的平行于坐标轴的线段之间有几个交点（端点也算）。然后就直接把坐标离散化一下然后扫描线扫过去中间用树状数组维护一下就行了。 C(COT)：板子再见 D(BZOJ3261)：搞个可持久化 0/1 trie 维护前缀异或和然后就做完了（板子） E(CF484E)：二分答案下，然后对于一个值是否合法只需要把 &gt; 该数的变成 1 ，小于该数的变成 0 然后用线段树维护这个区间内的最长的 1 序列。由于不能开一堆线段树，所以用主席数的思想就行了（我都觉得我说的不清楚…） F()： G：线段树合并裸题 H：kruskal 重构树上主席树 I：对每一位维护线段树就行了 J：压个位然后维护区间或就行了 K：模板题再见","link":"/2019/02/02/Cloud-Player-Rescue-Plan/"},{"title":"LOJ2174 「FJOI2016」神秘数","text":"Description$n$ 个数的序列，每次询问一个区间，求最小的一个数使得不能用这个区间中的数之和表示。 $n \\leq 10^5, \\sum a_i \\leq 10^9$ Solution第一次用数组写数据结构真短啊 考虑只有一次询问怎么做 把给定的区间内的数排序，从小到大扫一遍。 如果一个数比他之前的数之和至少大了 $1$ ，那么答案就是和 + 1 否则就可以把$[1,\\text{前缀和}]$ 都表示出来（感性理解很容易） 这道题怎么做也就显然了起来。只需要用主席树维护区间中小于等于某个数的数之和即可。流程如下 当前答案是 $a$，令 $S$ 是区间中 $\\leq a$ 的数之和 如果 $S &lt; a$ 则 $a$ 就是最后的答案 否则 让 $a = S+1$ 然后重复此操作 最开始的时候 $a=1$ 这样做的话 $a$ 每次都会翻一倍，所以最后的总复杂度是 $O(m \\log n \\log \\sum a_i)$ Code1234567891011121314151617181920212223242526272829303132333435#include &lt;bits/stdc++.h&gt;#define ll long longusing namespace std;const int N = 50000500; const int L = 1000000000; int n, m, a[N], cnt; int root[N], ch[N][2]; ll sum[N]; inline void I (int pre, int now, int l, int r, int val) { ch[now][0] = ch[pre][0], ch[now][1] = ch[pre][1]; int mid = (l + r) &gt;&gt; 1; sum[now] = sum[pre] + val; if(l == r) return ; if(val &lt;= mid) ch[now][0] = ++cnt, I(ch[pre][0], ch[now][0], l, mid, val); else ch[now][1] = ++cnt, I(ch[pre][1], ch[now][1], mid + 1, r, val); }inline int Q(int pre, int now, int l, int r, int val) { if(l == r) return sum[now] - sum[pre]; int mid = (l + r) / 2; if(val &lt;= mid) return Q(ch[pre][0], ch[now][0], l, mid, val); else return sum[ch[now][0]] - sum[ch[pre][0]] + Q(ch[pre][1], ch[now][1], mid + 1, r, val); }int main() { scanf(\"%d\", &amp;n); for(int i = 1; i &lt;= n; i++) { scanf(\"%d\", &amp;a[i]); root[i] = ++cnt; I(root[i - 1], root[i], 1, L, a[i]); } scanf(\"%d\", &amp;m); for(int i = 1; i &lt;= m; i++) { int l, r; scanf(\"%d %d\", &amp;l, &amp;r); int ans = 1; int S; while(1) { S = Q(root[l - 1], root[r], 1, L, ans); if(S &lt; ans) { printf(\"%d\\n\", ans); break ; } else ans = S + 1; } } return 0; }","link":"/2019/01/17/LOJ2174/"},{"title":"趣题「红眼睛与蓝眼睛」","text":"一道有趣的题目。 Description一个岛上有 $n$ 个人，其中有 $m$ 个红眼睛，$n - m$ 个蓝眼睛。这个岛有三个规则 他们不能照镜子，不能看自己眼睛的颜色。 他们不能告诉别人对方的眼睛是什么颜色。 一旦有人知道了自己是红眼睛，他就会在当天夜里自杀。 如果有一天，一个外来人来到这里对他们所有人说「你们这里有红眼睛的人」 假设每一个人都有着极强的逻辑推理能力。 求证：在这句话公布后地第 $m$ 天晚上这 $m$ 个红眼睛会一起自杀。 注：每一个人是不知道岛上有多少个红眼睛的人的 Solution乍一看，这题毫无头绪。告诉了一句「你们这里有红眼睛的人」又能怎么样呢？ 先来看一个数学归纳法的证明： 如果这个岛上只有一个红眼睛，听到这句话后看到其他人都不是红眼睛，便意识到自己是红眼睛，当天自杀。 假设当这个岛上有 $m$ 个红眼睛，他们会在第 $m$ 天自杀成立 当有 $m + 1$ 个红眼睛的时候，在每个红眼睛看来，都有 $m$ 个红眼睛，这个红眼睛能够推理出如果他不是红眼睛，那么他看到的 $m$ 个红眼睛都会在第 $m$ 天自杀 。而在第 $m$ 天，没有人自杀。一到第 $m + 1$ 天，每个红眼睛都意识到他是红眼睛。于是都在第 $m + 1$ 天自杀了 命题得证。看似没有问题，实际上，除了 $m = 1$ 的情况，这句话就相当于废话。因为没有任何用 要么在这之前红眼睛早就死光了，要么根本就不会死人。 但这并不是一个错误的事情。一个大神的回答说出来了 戳这里 这句话的作用就在于，让 每个人都知道每个人都知道这里有红眼睛的人 进一步地，这句话让 每个人都每个人都知道每个人都知道这里有红眼睛的人 等等 引用这位大神的话，就是： 简单说，「岛上有红眼睛」这件事本来只是一项「共有知识」（Mutual knowledge），公开宣告使它变成了一项「公共知识」（Common knowledge）。这两种知识的区分在认知逻辑里面非常重要，在博弈论中有广泛的应用。 用不严谨的话粗略介绍一下这两个概念：对于一个给定的命题P和一群给定的人，共有知识只需要满足一个条件：这群人中所有人都知道P，那么P就是这群人的共有知识。公共知识则需要满足以下所有条件：这群人中1、所有人都知道P；2、所有人都知道所有人都知道P；3、所有人都知道所有人都知道所有人都知道P；4、所有人都知道所有人都知道所有人都知道所有人都知道P；5、…… 共有知识 转化成 公共知识 的影响是很大的，就像这个例子一样 共有知识 转化成 公共知识 也是很难的，所以累次这个例子不太可能实现 同时这句话也统一了所有人的时间起点，时间在推理中扮演者重要的角色。这句话也让每一个人知道别人也知道这个时间起点 ，这样才有 “第 $m$ 天” 这种说法能够统一（就像人的出生时间不同，自然不能做出有效的推理","link":"/2019/01/23/Red-And-Blue-Eye/"},{"title":"BZOJ3529 「SDOI2014」数表","text":"Description$T$ 组询问，定义 $F(n)=\\sum\\limits_{d|n}d$。每次给出 $n,m,a$ 求 \\sum\\limits_{i=1,j=1,F(\\gcd(i,j)) \\leq a}^{i\\leq n, j \\leq m} F (\\gcd(i,j))$T \\leq 20000;n,m,a\\leq 10^5$ Solution首先 $F$ 可以直接暴力地 $O(n \\log n)$ 筛出来。 考虑 $a$ 的限制不是很好处理，假设没有这个 $a$ 的限制，则所求为 \\sum\\limits_{i=1}^{n}\\sum\\limits_{j=1}^{m} F (\\gcd(i,j))令 $G(i)=\\sum\\limits_{x=1}^{n}\\sum\\limits_{y=1}^{m}[\\gcd(x,y)=i]$。这个东西是什么呢？在 这里 有它的推导过程。根据里面的过程，可以得到 $G(i) = \\sum\\limits_{d=1}^{\\lfloor\\frac{n}{i}\\rfloor}\\mu(d)\\lfloor\\frac{n}{id}\\rfloor\\lfloor\\frac{m}{id}\\rfloor$（默认 $n \\leq m$）令下面的过程中$t = id$，则所求的是 \\sum\\limits_{i=1}^{n}F(i)G(i)= \\sum\\limits_{i=1}^{n}F(i)\\sum\\limits_{d=1}^{\\lfloor\\frac{n}{i}\\rfloor}\\mu(d)\\lfloor\\frac{n}{id}\\rfloor\\lfloor\\frac{m}{id}\\rfloor=\\sum\\limits_{i=1}^{n}F(i)\\sum\\limits_{i | t}\\mu(\\frac{t}{i})\\lfloor\\frac{n}{t}\\rfloor\\lfloor\\frac{m}{t}\\rfloor=\\sum\\limits_{t=1}^{n}\\lfloor\\frac{n}{t}\\rfloor\\lfloor\\frac{m}{t}\\rfloor\\sum\\limits_{i | t}F(i)\\mu(\\frac{t}{i})观察后面的式子，正好是一个狄利克雷卷积的形式。这种样子的都可以类似于那种 $O(n \\log n)$ 地质数筛法在调和级数内求出来，再结合分块就可以做完这个没有 $a$ 的题。 现在有了 $a$ 的限制之后，离线。把询问按照 $a$ 从小到大排序，然后按照 $F(i)$ 从小到大加入。每当有一个新的 $a$ ，就可以移动指针，将一些 $F$ 用处理 $\\sum\\limits_{i | t}F(i)\\mu(\\frac{t}{i})$ 的方式加入到这个里面。然后加入完之后用分块计算就行。 现在需要维护单点操作，查询前缀和，树状数组是不错的选择。 由于取模是 $2^{32} - 1$ ，可以直接 int 自然溢出最后和 $2147483647$ 取一个 &amp; 就行了。 时间复杂度：$O(n + n \\log n + n \\log ^ 2 (n) + T \\log (n)\\sqrt n)$ Code1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include &lt;bits/stdc++.h&gt;using namespace std;const int N = 100000; int T, cnt, flag[N + 5], p[N + 5], F[N + 5], mu[N + 5], ans[N + 5]; inline void prework() { flag[1] = mu[1] = 1; for(int i = 2; i &lt;= N; i++) { if(!flag[i]) { p[++cnt] = i, mu[i] = -1; } for(int j = 1; j &lt;= cnt &amp;&amp; i * p[j] &lt;= N; j++) { flag[i * p[j]] = 1; if(i % p[j] == 0) { mu[i * p[j]] = 0; break ; } mu[i * p[j]] = mu[i] * -1; } } for(int i = 1; i &lt;= N; i++) for(int j = i; j &lt;= N; j += i) F[j] += i;}int c[N + 5]; inline int lb(int x) { return x &amp; (-x); }inline void add(int x, int d) { for(int i = x; i &lt;= N; i += lb(i)) c[i] += d; }inline int sum(int x) { int ret = 0; for(int i = x; i; i -= lb(i)) ret += c[i]; return ret; }inline int calc(int n, int m) { int ret = 0; for(int l = 1, r; l &lt;= min(n, m); l = r + 1) { r = min(n / (n / l), m / (m / l)); ret += (n / l) * (m / l) * (sum(r) - sum(l - 1)); } return ret; }struct Query { int n, m, a, id; inline bool operator &lt; (const Query &amp;x) const { return a &lt; x.a; }}Q[N + 5]; struct node { int id, d; inline bool operator &lt; (const node &amp;x) const { return d &lt; x.d; }}A[N + 5]; int main() { prework(); scanf(\"%d\", &amp;T); for(int i = 1; i &lt;= T; i++) scanf(\"%d %d %d\", &amp;Q[i].n, &amp;Q[i].m, &amp;Q[i].a), Q[i].id = i; for(int i = 1; i &lt;= N; i++) A[i].d = F[i], A[i].id = i; sort(Q + 1, Q + T + 1); sort(A + 1, A + N + 1); int pos = 0; for(int i = 1; i &lt;= T; i++) { while(pos &lt; N &amp;&amp; A[pos + 1].d &lt;= Q[i].a) { ++pos; for(int j = 1; A[pos].id * j &lt;= N; j++) add(j * A[pos].id, A[pos].d * mu[j]); } ans[Q[i].id] = calc(Q[i].n, Q[i].m); } for(int i = 1; i &lt;= T; i++) printf(\"%d\\n\", ans[i] &amp; 2147483647); return 0; }","link":"/2019/01/14/bzoj3529/"},{"title":"杜教筛学习笔记","text":"设现在要求积性函数 $f$ 的前缀和， 设 $\\sum \\limits_{i=1}^{n} f(i) = S(n)$。 再找一个积性函数 $g$ ，则考虑它们的狄利克雷卷积的前缀和 \\begin{aligned} \\sum\\limits_{i=1}^{n}(f*g)(i) &= \\sum\\limits_{i=1}^{n} \\sum \\limits _{d|i} f(d)g(\\frac{i}{d}) \\\\\\ &= \\sum \\limits _{d=1}^{n} g(d)\\sum\\limits _{i=1}^{\\lfloor \\frac{n}{d}\\rfloor } f(i) \\\\\\ &= \\sum \\limits _{d=1}^{n} g(d) S(\\lfloor \\frac{n}{d} \\rfloor) \\end{aligned}其中得到第一行是根据狄利克雷卷积的定义。 得到第二行则是先枚举 $d$ 提出 $g$ 。 得到第三行则是把 $\\sum\\limits _{i=1}^{\\lfloor \\frac{n}{d}\\rfloor } f(i) $ 替换为 $S(\\lfloor \\frac{n}{d} \\rfloor) $ 接着考虑 $g(1)S(n)$ 等于什么。 可以发现，他就等于 \\sum \\limits _{i=1}^{n} g(i) S(\\lfloor \\frac{n}{i} \\rfloor) - \\sum \\limits _{i=2}^{n} g(i) S(\\lfloor \\frac{n}{i} \\rfloor)（可以理解成从1开始的前缀和减去从2开始的前缀和就是第一项） 前面这个式子 $\\sum \\limits _{i=1}^{n} g(i) S(\\lfloor \\frac{n}{i} \\rfloor)$ 根据刚才的推导，他就等于 $\\sum\\limits_{i=1}^{n}(f*g)(i)$ 所以得到杜教筛的核心式子： g(1)S(n)=\\sum\\limits_{i=1}^{n}(f*g)(i) - \\sum \\limits _{i=2}^{n} g(i) S(\\lfloor \\frac{n}{i} \\rfloor)得到这个式子之后有什么用呢？ 现在如果可以找到一个合适的积性函数 $g$ ，使得可以快速算出 $\\sum\\limits_{i=1}^{n}(f*g)(i)$ 和 $g$ 的前缀和，便可以用数论分块递归地求解。 代码按照理解大概可以写成这样（默认 ll 为 long long）（可以理解成一个伪代码。。就是一个思路的框架）12345678910ll GetSum(int n) { // 算 f 前缀和的函数 ll ans = f_g_sum(n); // 算 f * g 的前缀和 // 以下这个 for 循环是数论分块 for(ll l = 2, r; l &lt;= n; l = r + 1) { // 注意从 2 开始 r = (n / (n / l)); ans -= (g_sum(r) - g_sum(l - 1)) * GetSum(n / l); // g_sum 是 g 的前缀和 // 递归 GetSum 求解 } return ans; } 这个代码的复杂度是 $O(n^{\\frac{3}{4}})$，证明如下： 设求出 $S(n)$ 的复杂度是 $T(n)$ ，要求出 $S(n)$ 需要求出 $\\sqrt n$ 个 $S (\\lfloor \\frac{n}{i} \\rfloor)$ 的值，结合数论分块的复杂度 $O(\\sqrt n)$ 可得： T(n) = \\sum\\limits_{i=1}^{\\sqrt n} O(\\sqrt i) + O(\\sqrt {\\frac{n}{i}})=O(n^{\\frac{3}{4}})还可以进一步优化杜教筛，即先线性筛出前 $m$ 个答案，之后再用杜教筛。这个优化之后的复杂度是： T(n) = \\sum\\limits_{i=1}^{\\lfloor \\frac{n}{m} \\rfloor} \\sqrt \\frac{n}{i} = O({\\frac{n}{\\sqrt m}})当 $m = n ^ {\\frac{2}{3}}$ 时，$T(n) = O(n^{\\frac{2}{3}})$ 可以使用哈希表来存下已经求过的答案，也可以不用。 考虑到上面的求和过程中出现的都是 $\\lfloor \\frac{n}{i} \\rfloor $ 。开一个大小为两倍 $\\sqrt n$ 的数组 $dp$ 记录答案。如果现在需要求出 GetSum(x) ，若 $x \\leq \\sqrt n$ ，返回 dp[x] ，否则返回 dp[sqrt n + n / i] 即可。这样可以省去哈希表的复杂度。","link":"/2019/03/01/杜教筛学习笔记/"},{"title":"类欧几里得算法学习笔记","text":"类欧几里得算法用来求诸如此类问题： f(a,b,c,n)=\\sum\\limits_{i=0}^{n} \\lfloor\\frac{ai + b}{c}\\rfloor 分类讨论 第一种情况：$a=0​$ 。那么 f(a,b,c,n)= \\sum\\limits_{i=0}^{n} \\lfloor \\frac{b}{c} \\rfloor=(n+1)\\lfloor \\frac{b}{c} \\rfloor第二种情况：$a,b$ 中有一个大于等于 $c$ 。那么 \\begin{aligned} f(a,b,c,n) &= \\sum\\limits_{i=0}^{n} \\lfloor\\frac{ai + b}{c}\\rfloor \\\\\\ &= \\sum\\limits_{i = 0}^{n}(\\lfloor\\frac{a\\bmod c\\cdot i + b \\bmod c}{c}\\rfloor+i\\lfloor\\frac{a}{c} \\rfloor+\\lfloor \\frac{b}{c} \\rfloor) \\\\\\ &= \\sum\\limits_{i = 0}^{n}\\lfloor\\frac{a\\bmod c\\cdot i + b \\bmod c}{c}\\rfloor +\\frac{n(n+1)}{2} \\cdot \\lfloor\\frac{a}{c} \\rfloor + (n+1)\\lfloor \\frac{b}{c} \\rfloor \\\\\\ &= f(a\\bmod c, b \\bmod c , c, n) + \\frac{n(n+1)}{2} \\cdot \\lfloor\\frac{a}{c} \\rfloor + (n+1)\\lfloor \\frac{b}{c} \\rfloor \\end{aligned}第三种情况：$a&lt;c$ 且 $b &lt; c$ 。那么 \\begin{aligned} f(a,b,c,n) &= \\sum\\limits_{i=0}^{n} \\lfloor\\frac{ai + b}{c}\\rfloor \\\\\\ &= \\sum\\limits_{i=0}^{n} \\sum\\limits_{j=0}^{\\lfloor\\frac{an + b}{c}\\rfloor-1} [j+1 \\leq \\lfloor\\frac{ai + b}{c}\\rfloor] \\\\\\ &= \\sum\\limits_{j=0}^{\\lfloor\\frac{an + b}{c}\\rfloor-1}\\sum\\limits_{i=0}^{n} [c(j+1) \\frac{cj+c-b-1}{a}] \\\\\\ &= \\sum\\limits_{j=0}^{\\lfloor\\frac{an + b}{c}\\rfloor-1}(n - \\lfloor \\frac{cj+c-b-1}{a} \\rfloor) \\\\\\ &= n \\cdot \\lfloor\\frac{an + b}{c}\\rfloor - \\sum\\limits_{j=0}^{\\lfloor\\frac{an + b}{c}\\rfloor-1}\\lfloor \\frac{cj+c-b-1}{a} \\rfloor \\\\\\ &= n \\cdot \\lfloor\\frac{an + b}{c}\\rfloor - f(c, c - b - 1, a, \\lfloor\\frac{an + b}{c}\\rfloor-1) \\end{aligned}递归计算即可 复杂度一个 $\\log$","link":"/2019/03/03/类欧几里得算法学习笔记/"}],"tags":[{"name":"容斥","slug":"容斥","link":"/tags/容斥/"},{"name":"组合数学","slug":"组合数学","link":"/tags/组合数学/"},{"name":"动态规划","slug":"动态规划","link":"/tags/动态规划/"},{"name":"主席树","slug":"主席树","link":"/tags/主席树/"},{"name":"二分","slug":"二分","link":"/tags/二分/"},{"name":"概率期望","slug":"概率期望","link":"/tags/概率期望/"},{"name":"高斯消元","slug":"高斯消元","link":"/tags/高斯消元/"},{"name":"贪心","slug":"贪心","link":"/tags/贪心/"},{"name":"manacher","slug":"manacher","link":"/tags/manacher/"},{"name":"FFT","slug":"FFT","link":"/tags/FFT/"},{"name":"NTT","slug":"NTT","link":"/tags/NTT/"},{"name":"LCT","slug":"LCT","link":"/tags/LCT/"},{"name":"树状数组","slug":"树状数组","link":"/tags/树状数组/"},{"name":"线段树","slug":"线段树","link":"/tags/线段树/"},{"name":"dfs序","slug":"dfs序","link":"/tags/dfs序/"},{"name":"支配树","slug":"支配树","link":"/tags/支配树/"},{"name":"倍增","slug":"倍增","link":"/tags/倍增/"},{"name":"LCA","slug":"LCA","link":"/tags/LCA/"},{"name":"博弈论","slug":"博弈论","link":"/tags/博弈论/"},{"name":"数论","slug":"数论","link":"/tags/数论/"},{"name":"莫比乌斯反演","slug":"莫比乌斯反演","link":"/tags/莫比乌斯反演/"},{"name":"杜教筛","slug":"杜教筛","link":"/tags/杜教筛/"},{"name":"类欧几里得算法","slug":"类欧几里得算法","link":"/tags/类欧几里得算法/"}],"categories":[{"name":"题解","slug":"题解","link":"/categories/题解/"},{"name":"趣题","slug":"趣题","link":"/categories/趣题/"},{"name":"算法笔记","slug":"算法笔记","link":"/categories/算法笔记/"}]}