<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AcF&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-03T14:26:35.994Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>AcFunction</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BZOJ4199 「NOI2015」品酒大会</title>
    <link href="http://yoursite.com/2019/05/03/BZOJ4199/"/>
    <id>http://yoursite.com/2019/05/03/BZOJ4199/</id>
    <published>2019-05-03T08:26:54.000Z</published>
    <updated>2019-05-03T14:26:35.994Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>给定字符串 $s$ ，和每个位置上的权值 $a_i$。对于每一个 $i \in [0, n)$ 求出有多少对 $(i, j)$  满足 $LCP(sa_i, sa_j) \ge i$ 以及在这些 $(i, j)$ 中 $a_i \times a_j$  最大是多少。$sa_i$ 表示从 $i$ 开始的后缀。</p><a id="more"></a> <h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>将原串反过来建 SAM 求得后缀树。考虑后缀树上一个节点 $u$ ，这个节点代表的子串是他的任意后代的后缀 。所以每两个在其子树中的点都会对第一问的答案造成贡献。只需要维护 right 集合的大小即可。</p><p>对于第二问，乘积最大有两种可能：一个是最大的两个相乘，一个是最小的两个相乘（负负得正）。所以只需要在 dfs 的时候顺便维护子树中的最大值和最小值，与子树合并的时候维护处答案。</p><p>最后再从后往前更新一遍答案。因为小的肯定包含在大的中，对第一问做加法，第二问取 max</p><p>具体看代码</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Author: AcFunction</span></span><br><span class="line"><span class="hljs-comment"> * Date:   2019-05-02 09:10:52</span></span><br><span class="line"><span class="hljs-comment"> * Email:  3486942970@qq.com</span></span><br><span class="line"><span class="hljs-comment">**/</span></span><br><span class="line"> </span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span></span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = (<span class="hljs-keyword">int</span>)<span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>; </span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = (<span class="hljs-keyword">int</span>)<span class="hljs-number">1e9</span>; </span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">int</span> n, siz[N], o[N], w[N], mx[N], mn[N], dep[N]; </span><br><span class="line"><span class="hljs-keyword">char</span> s[N];</span><br><span class="line">ll ans1[N], ans2[N]; </span><br><span class="line"> </span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sam</span> &#123;</span></span><br><span class="line">  <span class="hljs-keyword">int</span> ch[<span class="hljs-number">26</span>], len, fa; </span><br><span class="line">&#125; a[N]; </span><br><span class="line"> </span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span> &#123;</span></span><br><span class="line">  <span class="hljs-keyword">int</span> v; edge *next; </span><br><span class="line">&#125; pool[N * <span class="hljs-number">2</span>], *h[N], *cur = pool; </span><br><span class="line"> </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">  edge *p = cur++; p-&gt;v = v; </span><br><span class="line">  p-&gt;next = h[u], h[u] = p; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">int</span> last = <span class="hljs-number">1</span>, tot = <span class="hljs-number">1</span>; </span><br><span class="line"> </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> c, <span class="hljs-keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">int</span> p = last, tp = ++tot; last = tp; w[tp] = o[x]; </span><br><span class="line">  a[tp].len = a[p].len + <span class="hljs-number">1</span>; siz[tot] = <span class="hljs-number">1</span>; </span><br><span class="line">  <span class="hljs-keyword">for</span>(; p &amp;&amp; !a[p].ch[c]; p = a[p].fa) </span><br><span class="line">    a[p].ch[c] = tp; </span><br><span class="line">  <span class="hljs-keyword">if</span>(!p) &#123;</span><br><span class="line">    a[tp].fa = <span class="hljs-number">1</span>; </span><br><span class="line">  &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> q = a[p].ch[c]; </span><br><span class="line">    <span class="hljs-keyword">if</span>(a[q].len == a[p].len + <span class="hljs-number">1</span>) &#123;</span><br><span class="line">      a[tp].fa = q; </span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">int</span> cl = ++tot; a[cl] = a[q]; </span><br><span class="line">      a[cl].len = a[p].len + <span class="hljs-number">1</span>; </span><br><span class="line">      a[q].fa = a[tp].fa = cl; </span><br><span class="line">      <span class="hljs-keyword">for</span>(; p &amp;&amp; a[p].ch[c] == q; p = a[p].fa)</span><br><span class="line">        a[p].ch[c] = cl; </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> pre)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">if</span>(siz[u] == <span class="hljs-number">1</span>) &#123;</span><br><span class="line">    mx[u] = mn[u] = w[u]; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">for</span>(edge *p = h[u]; p; p = p-&gt;next) &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> v = p-&gt;v; <span class="hljs-keyword">if</span>(v == pre) <span class="hljs-keyword">continue</span> ; </span><br><span class="line">    dep[v] = dep[u] + <span class="hljs-number">1</span>; </span><br><span class="line">    dfs(v, u); </span><br><span class="line">    <span class="hljs-keyword">if</span>(mx[u] != INF &amp;&amp; mn[u] != INF)</span><br><span class="line">      ans2[a[u].len] = max(ans2[a[u].len], max(<span class="hljs-number">1l</span>l * mx[u] * mx[v], <span class="hljs-number">1l</span>l * mn[u] * mn[v])); </span><br><span class="line">    ans1[a[u].len] += <span class="hljs-number">1l</span>l * siz[u] * siz[v]; </span><br><span class="line">    siz[u] += siz[v]; </span><br><span class="line">    mx[u] = max(mx[u], mx[v]); </span><br><span class="line">    mn[u] = min(mn[u], mn[v]); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;n); <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>, s + <span class="hljs-number">1</span>); </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i++) ans1[i] = <span class="hljs-number">0</span>, ans2[i] = -(ll)<span class="hljs-number">9e18</span>; </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;o[i]); </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = n; i &gt;= <span class="hljs-number">1</span>; i--) add(s[i] - <span class="hljs-string">'a'</span>, i); </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= tot; i++) </span><br><span class="line">    mx[i] = -INF, mn[i] = INF; </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= tot; i++) addedge(a[i].fa, i); </span><br><span class="line">  dep[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>, dfs(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) </span><br><span class="line">    ans1[i] += ans1[i + <span class="hljs-number">1</span>], </span><br><span class="line">    ans2[i] = max(ans2[i], ans2[i + <span class="hljs-number">1</span>]); </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(ans1[i] == <span class="hljs-number">0</span>) ans2[i] = <span class="hljs-number">0</span>; </span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld %lld\n"</span>, ans1[i], ans2[i]); </span><br><span class="line">  &#125; </span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h1&gt;&lt;p&gt;给定字符串 $s$ ，和每个位置上的权值 $a_i$。对于每一个 $i \in [0, n)$ 求出有多少对 $(i, j)$  满足 $LCP(sa_i, sa_j) \ge i$ 以及在这些 $(i, j)$ 中 $a_i \times a_j$  最大是多少。$sa_i$ 表示从 $i$ 开始的后缀。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="后缀自动机" scheme="http://yoursite.com/tags/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Do geese see god?</title>
    <link href="http://yoursite.com/2019/04/30/Do-geese-see-god/"/>
    <id>http://yoursite.com/2019/04/30/Do-geese-see-god/</id>
    <published>2019-04-30T12:32:40.000Z</published>
    <updated>2019-04-30T14:50:35.138Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>给一个字符串 $s$ 和一个整数 $k$ 。求所有最短的满足 $s$ 是他的一个子序列并且是一个回文串的字符串中字典序第 $k$ 大的。</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>令 $f[i][j]$ 表示 $s$ 中 $i$ 到 $j$ 所构成的字符串至少还要再添加几个字符使得其变成回文串。</p><p>令 $g[i][j]$ 表示满足最短的条件的前提下的添加字符的方案数。</p><p>这两个数组都可以通过简单的 $O(n^2)$ 的 dp 完成。</p><p>接下来便是求第 $k$ 大的字符串。如果 $k &gt; g[1][n]$ 直接输出无解。接下来处理有解的情况。</p><p>用 <code>solve(l, r, k)</code> 表示从 $s_l$ 到 $s_r$ 构成的字符串满足添加字符最少的前提下所构成的字典序第 $k$  大的回文串。</p><ul><li><p>$l=r$  时，直接返回 $s_l$ </p></li><li><p>$s_l = s_r$ 时，返回 <code>s[l] + solve(l + 1, r - 1, k) + s[r]</code> （这里加法 = 按顺序拼接 = string 加法）</p></li><li><p>$s_l \not= s_r$ 时，我们有两种方法</p><ol><li>把字符串变成  <code>s[l] + solve(l + 1, r) + s[l]</code>  即在后面添加一个 $s_l$ 并且把中间变成回文</li><li>把字符串变成  <code>s[r] + solve(l, r - 1) + s[r]</code>  即在前面添加一个 $s_r$ 并且把中间变成回文</li></ol><p>此时，我们显然会贪心的走字典序小的那一边，这取决于 $s_l$ 和 $s_r$ 的大小。</p><p>不妨设 $s_l &lt; s_r$ 那么如果 $g[l+1][r] &gt;= k$ 我们就直接往第一种情况递归。否则把  $k$ 减掉 $g[l+1][r]$ 放到第二种情况递归。对于 $s_l &gt; s_r$   也是同理。  </p></li></ul><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">2005</span>; </span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = (<span class="hljs-keyword">int</span>)<span class="hljs-number">1e9</span>; </span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> n; ll k; </span><br><span class="line"><span class="hljs-keyword">char</span> s[N]; <span class="hljs-keyword">int</span> f[N][N]; ll g[N][N];  </span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, ll k)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">if</span>(l &gt; r) <span class="hljs-keyword">return</span> <span class="hljs-string">""</span>; </span><br><span class="line">  <span class="hljs-keyword">if</span>(l == r) &#123; <span class="hljs-built_in">string</span> t = <span class="hljs-string">""</span>; t += s[l]; <span class="hljs-keyword">return</span> t; &#125;</span><br><span class="line">  <span class="hljs-keyword">if</span>(s[l] == s[r]) </span><br><span class="line">    <span class="hljs-keyword">return</span> s[l] + solve(l + <span class="hljs-number">1</span>, r - <span class="hljs-number">1</span>, k) + s[r]; </span><br><span class="line">  <span class="hljs-keyword">if</span>(f[l + <span class="hljs-number">1</span>][r] &lt; f[l][r - <span class="hljs-number">1</span>]) <span class="hljs-keyword">return</span> s[l] + solve(l + <span class="hljs-number">1</span>, r, k) + s[l]; </span><br><span class="line">  <span class="hljs-keyword">if</span>(f[l + <span class="hljs-number">1</span>][r] &gt; f[l][r - <span class="hljs-number">1</span>]) <span class="hljs-keyword">return</span> s[r] + solve(l, r - <span class="hljs-number">1</span>, k) + s[r]; </span><br><span class="line">  <span class="hljs-keyword">if</span>(s[l] &lt; s[r]) &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(g[l + <span class="hljs-number">1</span>][r] &gt;= k) </span><br><span class="line">      <span class="hljs-keyword">return</span> s[l] + solve(l + <span class="hljs-number">1</span>, r, k) + s[l];</span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> s[r] + solve(l, r - <span class="hljs-number">1</span>, k - g[l + <span class="hljs-number">1</span>][r]) + s[r]; </span><br><span class="line">  &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(g[l][r - <span class="hljs-number">1</span>] &gt;= k) </span><br><span class="line">      <span class="hljs-keyword">return</span> s[r] + solve(l, r - <span class="hljs-number">1</span>, k) + s[r]; </span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> s[l] + solve(l + <span class="hljs-number">1</span>, r, k - g[l][r - <span class="hljs-number">1</span>]) + s[l]; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s %lld"</span>, s + <span class="hljs-number">1</span>, &amp;k); n = <span class="hljs-built_in">strlen</span>(s + <span class="hljs-number">1</span>);</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) f[i][i] = <span class="hljs-number">0</span>, g[i][i] = <span class="hljs-number">1</span>; </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> l = <span class="hljs-number">2</span>; l &lt;= n; l++) &#123;</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - l + <span class="hljs-number">1</span>; i++) &#123;</span><br><span class="line">      <span class="hljs-keyword">if</span>(l == <span class="hljs-number">2</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(s[i] == s[i + <span class="hljs-number">1</span>]) &#123; f[i][i + <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>, g[i][i + <span class="hljs-number">1</span>] = <span class="hljs-number">1</span>; &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> &#123; f[i][i + <span class="hljs-number">1</span>] = <span class="hljs-number">1</span>; g[i][i + <span class="hljs-number">1</span>] = <span class="hljs-number">2</span>; &#125;</span><br><span class="line">        <span class="hljs-keyword">continue</span> ; </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="hljs-keyword">int</span> L = i, R = (i + l - <span class="hljs-number">1</span>); </span><br><span class="line">      <span class="hljs-keyword">int</span> mn = INF; </span><br><span class="line">      <span class="hljs-keyword">if</span>(s[L] == s[R]) &#123;</span><br><span class="line">        f[L][R] = f[L + <span class="hljs-number">1</span>][R - <span class="hljs-number">1</span>];</span><br><span class="line">        g[L][R] = g[L + <span class="hljs-number">1</span>][R - <span class="hljs-number">1</span>]; </span><br><span class="line">        <span class="hljs-keyword">continue</span> ; </span><br><span class="line">      &#125;</span><br><span class="line">      mn = min(mn, <span class="hljs-number">1</span> + min(f[L][R - <span class="hljs-number">1</span>], f[L + <span class="hljs-number">1</span>][R])); </span><br><span class="line">      f[L][R] = mn; </span><br><span class="line">      <span class="hljs-keyword">if</span>(mn == f[L + <span class="hljs-number">1</span>][R] + <span class="hljs-number">1</span>) &#123;</span><br><span class="line">        g[L][R] += g[L + <span class="hljs-number">1</span>][R]; </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="hljs-keyword">if</span>(mn == f[L][R - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>) &#123;</span><br><span class="line">        g[L][R] += g[L][R - <span class="hljs-number">1</span>]; </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="hljs-keyword">if</span>(g[L][R] &gt; k) g[L][R] = k + <span class="hljs-number">1</span>; </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="hljs-keyword">if</span>(k &gt; g[<span class="hljs-number">1</span>][n]) &#123; <span class="hljs-built_in">puts</span>(<span class="hljs-string">"NONE"</span>); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; &#125;</span><br><span class="line">  <span class="hljs-built_in">cout</span> &lt;&lt; solve(<span class="hljs-number">1</span>, n, k) &lt;&lt; <span class="hljs-built_in">endl</span>; </span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h1&gt;&lt;p&gt;给一个字符串 $s$ 和一个整数 $k$ 。求所有最短的满足 $s$ 是他的一个子序列并且是一个回文串的字符串中字典序第 $k$ 大的。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="字符串" scheme="http://yoursite.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>CodeChef RIN</title>
    <link href="http://yoursite.com/2019/04/30/CodeChef-RIN/"/>
    <id>http://yoursite.com/2019/04/30/CodeChef-RIN/</id>
    <published>2019-04-30T12:32:27.000Z</published>
    <updated>2019-05-03T08:29:43.545Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>你有  $m$ 个学期来完成 $n$ 个课程，每个学期能上任意多课程，每个课程恰好被学一遍。有些课程有前置条件，必须先学 $a$ 课程才能学 $b$ 课程。在第 $i$ 个学期完成第 $j$ 这个课程能够获得 $A[i][j]$ 的分数（$A[i][j]=-1$ 说明 $i$ 学期不教授 $j$ 课程）。求最大的平均分数。</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>类似于切糕的建图方式，把每个课程拆成 $m + 1$ 个点。令第 $i$个课程拆出来的第 $j$ 个点事 $(i, j)$</p><p>对于一个课程 $i$ ，有以下的建图方式：</p><ul><li>$(i, j) \to (i,j+1)$ 连流量 $100 - A[i][j]$ 的边</li><li>$S \to (i,1)$ 和  $(i,m+1) \to T$ 都连一条流量为 INF 的边</li><li>如果已知两个课程 $a,b$ 必须使得 $a$ 是 $b$  的前置课程，那么对于 $1 \leq i \leq m-1$ 连一条 $(a,i) \to (b,i+1)$ 的流量为  INF 的边</li></ul><p>然后跑出最大流，再用 $100 - \frac{\text{最大流}}{n}$ </p><p>为什么这是对的呢？首先，总分最大就是使得减分最小，所以把每个分数用最大值($\leq 100$) 减一下跑出最小割然后用总和减掉。此时 $A[i][j]$ 就变成了 $i$ 课程在 $j$ 学期的扣分。</p><p>对于每一条学期，我们必须上一次课，在最小割中体现就是对这个学期建立一条链，割了第 $j$ 个点和第 $j+1$ 个点之间的边表示在 $j$ 这个学期上了这个课。每条链显然只会恰好割一次。</p><p>对于前置条件的限制，在最小割中的体现便是 $a$ 学期的割边在 $b$ 学期之前。那么按照第三种连边使得如果不在 $b$ 前面那么必然会有一条通路（画图理解）。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">10010000</span>; </span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = (<span class="hljs-keyword">int</span>)<span class="hljs-number">2e9</span>; </span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> n, m, k; </span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> S, T, vis[N]; </span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span> &#123;</span></span><br><span class="line">  <span class="hljs-keyword">int</span> v, f; edge *next, *rev; </span><br><span class="line">&#125; pool[N * <span class="hljs-number">2</span>], *h[N], *cu = pool, *cur[N]; </span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">  edge *p = cu++, *q = cu++; </span><br><span class="line">  p-&gt;v = v, p-&gt;next = h[u], h[u] = p, p-&gt;f = f, p-&gt;rev = q; </span><br><span class="line">  q-&gt;v = u, q-&gt;next = h[v], h[v] = q, q-&gt;f = <span class="hljs-number">0</span>, q-&gt;rev = p; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> dep[N], Q[N];</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = S; i &lt;= T; i++) </span><br><span class="line">    cur[i] = h[i], dep[i] = <span class="hljs-number">0</span>; </span><br><span class="line">  <span class="hljs-keyword">int</span> s = <span class="hljs-number">1</span>, t = <span class="hljs-number">0</span>; dep[S] = <span class="hljs-number">1</span>, Q[++t] = S; </span><br><span class="line">  <span class="hljs-keyword">while</span>(s &lt;= t) &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> u = Q[s++]; </span><br><span class="line">    <span class="hljs-keyword">for</span>(edge *p = h[u]; p; p = p-&gt;next) &#123;</span><br><span class="line">      <span class="hljs-keyword">int</span> v = p-&gt;v; <span class="hljs-keyword">if</span>(p-&gt;f &amp;&amp; !dep[v]) &#123;</span><br><span class="line">        Q[++t] = v, dep[v] = dep[u] + <span class="hljs-number">1</span>; </span><br><span class="line">        <span class="hljs-keyword">if</span>(v == T) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> lim)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">if</span>(u == T || !lim) <span class="hljs-keyword">return</span> lim; <span class="hljs-keyword">int</span> ret = <span class="hljs-number">0</span>; </span><br><span class="line">  <span class="hljs-keyword">for</span>(edge *p = cur[u]; p; p = p-&gt;next) &#123; cur[u] = p; </span><br><span class="line">    <span class="hljs-keyword">int</span> v = p-&gt;v; <span class="hljs-keyword">if</span>(p-&gt;f &amp;&amp; dep[v] == dep[u] + <span class="hljs-number">1</span>) &#123;</span><br><span class="line">      <span class="hljs-keyword">int</span> tmp = dfs(v, min(lim, p-&gt;f)); </span><br><span class="line">      p-&gt;f -= tmp, p-&gt;rev-&gt;f += tmp; </span><br><span class="line">      ret += tmp, lim -= tmp; </span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="hljs-keyword">if</span>(!ret) dep[u] = <span class="hljs-number">-1</span>; </span><br><span class="line">  <span class="hljs-keyword">return</span> ret; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dinic</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">int</span> ret = <span class="hljs-number">0</span>; </span><br><span class="line">  <span class="hljs-keyword">while</span>(bfs()) ret += dfs(S, INF); </span><br><span class="line">  <span class="hljs-keyword">return</span> ret; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> a[<span class="hljs-number">1005</span>][<span class="hljs-number">1005</span>]; </span><br><span class="line"><span class="hljs-keyword">int</span> dx[<span class="hljs-number">8</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-2</span>&#125;; </span><br><span class="line"><span class="hljs-keyword">int</span> dy[<span class="hljs-number">8</span>] = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>&#125;; </span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">id</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> (x - <span class="hljs-number">1</span>) * (m + <span class="hljs-number">1</span>) + y; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k; </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) </span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++) </span><br><span class="line">      <span class="hljs-built_in">cin</span> &gt;&gt; a[i][j];  </span><br><span class="line">  S = <span class="hljs-number">0</span>; T = n * (m + <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>; </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    addedge(S, id(i, <span class="hljs-number">1</span>), INF); </span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">      <span class="hljs-keyword">if</span>(a[i][j] != <span class="hljs-number">-1</span>) addedge(id(i, j), id(i, j + <span class="hljs-number">1</span>), <span class="hljs-number">100</span> - a[i][j]); </span><br><span class="line">      <span class="hljs-keyword">else</span> addedge(id(i, j), id(i, j + <span class="hljs-number">1</span>), INF); </span><br><span class="line">    &#125; addedge(id(i, m + <span class="hljs-number">1</span>), T, INF); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> x, y; <span class="hljs-built_in">cin</span> &gt;&gt; x &gt;&gt; y; </span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++) </span><br><span class="line">      addedge(id(x, j), id(y, j + <span class="hljs-number">1</span>), INF); </span><br><span class="line">  &#125; </span><br><span class="line">  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%.2lf\n"</span>, <span class="hljs-number">1.0</span> * <span class="hljs-number">100</span> - <span class="hljs-number">1.0</span> * dinic() / (<span class="hljs-number">1.0</span> * n)); </span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h1&gt;&lt;p&gt;你有  $m$ 个学期来完成 $n$ 个课程，每个学期能上任意多课程，每个课程恰好被学一遍。有些课程有前置条件，必须先学 $a$ 课程才能学 $b$ 课程。在第 $i$ 个学期完成第 $j$ 这个课程能够获得 $A[i][j]$ 的分数（$A[i][j]=-1$ 说明 $i$ 学期不教授 $j$ 课程）。求最大的平均分数。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="网络流" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ4585 「APIO2016」烟火表演</title>
    <link href="http://yoursite.com/2019/04/05/BZOJ4585/"/>
    <id>http://yoursite.com/2019/04/05/BZOJ4585/</id>
    <published>2019-04-05T09:37:11.000Z</published>
    <updated>2019-04-05T10:42:55.877Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>给定一棵以 $1$ 为根的 $n$ 个节点的树，每条边有一个边权。有 $m$ 个叶子。将一条边的边权从 $x$ 修改至 $y$ 需要的代价是 $|x-y|$  。求将所有叶子到根节点的距离修改成相同的最小代价。</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>神仙题。参考：<a href="https://blog.csdn.net/u014609452/article/details/52347062；洛谷题解第一篇。" target="_blank" rel="noopener">https://blog.csdn.net/u014609452/article/details/52347062；洛谷题解第一篇。</a></p><p>定义 $f_x(y)$ 表示将以 $x$ 为根的子树中所有叶子结点到 $x$ 节点的距离都修改成 $y$ 所需要的代价。我们得到的结论是：<strong>$f_x$ 是个分段函数，每一段为一个一次函数，并且下凸（即一个凸壳）</strong>。</p><p>这个结论的证明要用到数学归纳法，不多赘述。</p><p>考虑维护这个凸壳。即现在已知每个儿子的凸壳，应该如何合并出这个节点的凸壳。</p><p>儿子节点的凸壳首先需要往其中加入父亲到他的这一条边。可以证明有了这一条边后依然是一个凸壳。</p><p>对每个儿子都这么做，得到的所有凸壳相加即为父亲节点的凸壳。</p><p>于是问题变为如何维护 ”往上增加一条边“ 后凸壳的变化。</p><p>设增加这条边的边权是 $w$ ，要增加的这个函数是 $f$ ，新的函数是 $g$ ，最小值在 $L$ 到 $R$ 取到。</p><ol><li>对于 $x \leq L$ ，此时要把新加的这条边减成 $0$ ，代价 $w$ 即 $g(x) = f(x) + w$</li><li>对于 $L \leq x \leq L + w$ ，此时先将原来的子树里的每个叶子到根的距离修改成 $L$ ，加上 $w$ 后要再修改成 $x$ 需要 $L + w - x$ 的代价 （先把 $w$ 的边干掉然后用 $L - x$ 的代价从 $L$ 到 $x$ ）。即 $g(x) = f(x) + w + L -x$</li><li>对于 $L + w \leq x \leq R + w$ ，此时 $g(x) = f(x - w)$ 。又因为 $x - w \in [L, R]$ 都是最小值，所以 $g(x) = f(L)$ </li><li>对于 $R+w \leq x$ ，此时先将原来的子树里的每个叶子到根的距离修改成 $R$ ，加上 $w$ 再修改成 $x$ 需要 $|R + w - x| = x - w - R$ （其实和 2 差不多只是正负的问题）。即 $g(x) = f(x) + x - w - R$ </li></ol><p>容易看出，$g$ 的最小值在 $[L + w, R + w]$ 取到。</p><p>得到这些性质后，<del>我已经自闭了…</del> 我们可以分析它的几何意义。</p><p>第一段（$x \leq L$） 相当于是往上做了一个平移。</p><p>第二段（$L \leq x \leq L + w$）你会发现，$g(x) = f(x) + w - L - x$ 中有一个 $-x$ 。这说明这一段的斜率是 $-1$ </p><p>第三段（$L + w \leq x \leq R + w$）这一段其实就是一段平的（这也是为啥它是新函数取到最小值的段），斜率维 $0$</p><p>第四段（$R + w \leq x$ ）你会发现，$g(x) = f(x) + x - w - R$ 有一个 $+x$ 。这说明这一段的斜率是 $1$ </p><p>这样我们就知道了新凸壳与原来的凸壳的区别：<strong>将 $L$ 左边一段向上平移，删除右边，新增两个拐点 $L+w, R+w$ 并且 $L$  到 $L+w$ 的斜率为 $-1$ ，$L+w$ 到 $R + w$ 的斜率是 $0$，$R + w$ 往右的斜率是 $1$ </strong>。</p><p>有了这个结论，然后的做法其实还不是很显然（至少对我来说）。</p><p>这个凸壳还有一个可以证明的性质：（从左到右）每当<strong>经过一个拐点</strong>，那么<strong>斜率会增加 $1$ </strong></p><p>我们可以对每个点存放凸壳的拐点（的横坐标）。</p><p>每次将儿子节点的凸壳弹出后面的（从大到小）拐点，然后加入两个新拐点。然后将儿子节点的拐点合并到该节点的凸壳中。</p><p>这个过程中，需要支持：删除（横坐标）最大的拐点；合并。自然想到<strong>可并堆</strong>。</p><p>还剩下几个小问题：</p><ol><li><strong>实现时，如何弹出拐点直到最小值的那一段</strong>？最右边的那一段的斜率是儿子数量。（因为每合并一次右端斜率 ++） 所以弹出儿子数量个拐点即可。</li><li><strong>最后的答案如何计算？或：最小值那一段该如何计算？</strong> $f_1(0)$ 很好计算，为所有边权的和。我们又知道，每一个拐点使得斜率++。于是可以先把右边的点弹掉（儿子个），然后计算即可</li></ol><p>还有一个很骚的操作，即一种快乐的可并堆：</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">if</span>(!x || !y) <span class="hljs-keyword">return</span> x + y; </span><br><span class="line">  <span class="hljs-keyword">if</span>(vx[x] &lt; vx[y]) swap(x, y); </span><br><span class="line">  <span class="hljs-keyword">int</span> d = rand() % <span class="hljs-number">2</span>; </span><br><span class="line">  ch[x][d] = merge(ch[x][d], y); </span><br><span class="line">  <span class="hljs-keyword">return</span> x; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>懒人专用，复杂度很对（426ms）。会证明复杂度的可以私信我，我太菜了不会证…</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Author: AcFunction</span></span><br><span class="line"><span class="hljs-comment"> * Date:   2019-03-19 21:45:47</span></span><br><span class="line"><span class="hljs-comment"> * Email:  3486942970@qq.com</span></span><br><span class="line"><span class="hljs-comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> db double</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PII pair <span class="hljs-meta-string">&lt;int, int&gt; </span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Fi first</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Se second </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> RG register </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, l, r) for(RG int i = l; i &lt;= r; i++) </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> per(i, r, l) for(RG int i = r; i &gt;= l; i--)</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">INIT</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  ios :: sync_with_stdio(<span class="hljs-literal">false</span>); <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">template</span> &lt; <span class="hljs-keyword">typename</span> T &gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sc</span><span class="hljs-params">(T&amp; t)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">char</span> c = getchar(); T x = <span class="hljs-number">1</span>; t = <span class="hljs-number">0</span>; <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c)) &#123;<span class="hljs-keyword">if</span>(c == <span class="hljs-string">'-'</span>) x = <span class="hljs-number">-1</span>; c = getchar();&#125;</span><br><span class="line">  <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c)) t = t * <span class="hljs-number">10</span> + c - <span class="hljs-string">'0'</span> , c = getchar();t *= x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">template</span> &lt; <span class="hljs-keyword">typename</span> T , <span class="hljs-keyword">typename</span>... Args &gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sc</span><span class="hljs-params">(T&amp; t , Args&amp;... args)</span> </span>&#123;sc(t); sc(args...);&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">600300</span>; </span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> n, m, fa[N], son[N];</span><br><span class="line">ll w[N], ans, vx[N];  </span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> cnt, ch[N][<span class="hljs-number">2</span>], rt[N];  </span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">New</span><span class="hljs-params">(ll x)</span> </span>&#123;</span><br><span class="line">  vx[++cnt] = x; ch[cnt][<span class="hljs-number">0</span>] = ch[cnt][<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>; <span class="hljs-keyword">return</span> cnt; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">if</span>(!x || !y) <span class="hljs-keyword">return</span> x + y; </span><br><span class="line">  <span class="hljs-keyword">if</span>(vx[x] &lt; vx[y]) swap(x, y); </span><br><span class="line">  <span class="hljs-keyword">int</span> d = rand() % <span class="hljs-number">2</span>; </span><br><span class="line">  ch[x][d] = merge(ch[x][d], y); </span><br><span class="line">  <span class="hljs-keyword">return</span> x; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// INIT(); </span></span><br><span class="line">  srand((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>)<span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>); </span><br><span class="line">  sc(n, m); </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n + m; i++) &#123;</span><br><span class="line">    sc(fa[i], w[i]); ans += w[i]; son[fa[i]]++; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = n + m; i &gt;= <span class="hljs-number">2</span>; i--) &#123;</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= son[i] - <span class="hljs-number">1</span>; j++)</span><br><span class="line">      rt[i] = merge(ch[rt[i]][<span class="hljs-number">0</span>], ch[rt[i]][<span class="hljs-number">1</span>]); </span><br><span class="line">    ll R = vx[rt[i]]; rt[i] = merge(ch[rt[i]][<span class="hljs-number">0</span>], ch[rt[i]][<span class="hljs-number">1</span>]); </span><br><span class="line">    ll L = vx[rt[i]]; rt[i] = merge(ch[rt[i]][<span class="hljs-number">0</span>], ch[rt[i]][<span class="hljs-number">1</span>]); </span><br><span class="line">    rt[i] = merge(rt[i], merge(New(L + w[i]), New(R + w[i])));  </span><br><span class="line">    rt[fa[i]] = merge(rt[fa[i]], rt[i]); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= son[<span class="hljs-number">1</span>]; j++) </span><br><span class="line">    rt[<span class="hljs-number">1</span>] = merge(ch[rt[<span class="hljs-number">1</span>]][<span class="hljs-number">0</span>], ch[rt[<span class="hljs-number">1</span>]][<span class="hljs-number">1</span>]); </span><br><span class="line">  <span class="hljs-keyword">while</span>(rt[<span class="hljs-number">1</span>]) &#123;</span><br><span class="line">    ans -= vx[rt[<span class="hljs-number">1</span>]]; </span><br><span class="line">    rt[<span class="hljs-number">1</span>] = merge(ch[rt[<span class="hljs-number">1</span>]][<span class="hljs-number">0</span>], ch[rt[<span class="hljs-number">1</span>]][<span class="hljs-number">1</span>]); </span><br><span class="line">  &#125; <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>, ans); </span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h1&gt;&lt;p&gt;给定一棵以 $1$ 为根的 $n$ 个节点的树，每条边有一个边权。有 $m$ 个叶子。将一条边的边权从 $x$ 修改至 $y$ 需要的代价是 $|x-y|$  。求将所有叶子到根节点的距离修改成相同的最小代价。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="可并堆" scheme="http://yoursite.com/tags/%E5%8F%AF%E5%B9%B6%E5%A0%86/"/>
    
  </entry>
  
  <entry>
    <title>HDU6203 ping ping ping</title>
    <link href="http://yoursite.com/2019/04/05/HDU6203/"/>
    <id>http://yoursite.com/2019/04/05/HDU6203/</id>
    <published>2019-04-05T09:13:23.000Z</published>
    <updated>2019-04-05T09:29:36.945Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>给你一颗以 $0$ 为根的有根树。现在有些节点坏掉了，与周围无法联通。已知 $m$ 对 $(u,v)​$ 无法联通，求最少坏了几个节点。</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>对于一对无法联通的节点 $(u,v)$，一般是贪心地删掉 $u, v$ 的 LCA。但如果这条链在之前删除其他链的 LCA 时已经不联通了，那么就可以直接跳过。</p><p>所以得到一个做法：求出每对 $(u,v)$ 的 LCA ，按照深度从大到小排序。依次处理。如果当前的链上已经有点被删除了，直接跳过；否则 ans++，将 LCA 打个标记表示已被删除。可以用树链剖分维护。</p><p>考虑更简单的做法。因为已经将 LCA 的深度从大到小排过序了，所以每次删除 LCA 可以直接把 LCA 这个子树里的所有点打上标记（加上1）与只打 LCA 一个标记是等价的。这个过程直接用树状数组维护 dfs 序就可以了。</p><p>时间复杂度 $O(m \log n)$ </p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100010</span>; </span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> n, m, tot, dep[N], fa[N][<span class="hljs-number">19</span>], dfn[N], siz[N]; </span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span> &#123;</span></span><br><span class="line">  <span class="hljs-keyword">int</span> v; edge *next;              </span><br><span class="line">&#125; pool[N * <span class="hljs-number">2</span>], *head[N], *cur = pool;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">  edge *p = cur++, *q = cur++; </span><br><span class="line">  p-&gt;v = v, p-&gt;next = head[u], head[u] = p; </span><br><span class="line">  q-&gt;v = u, q-&gt;next = head[v], head[v] = q; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> pre)</span> </span>&#123;</span><br><span class="line">  siz[u] = <span class="hljs-number">1</span>; dfn[u] = ++tot; </span><br><span class="line">  <span class="hljs-keyword">for</span>(edge *p = head[u]; p; p = p-&gt;next) &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> v = p-&gt;v; <span class="hljs-keyword">if</span>(v == pre) <span class="hljs-keyword">continue</span> ; </span><br><span class="line">    dep[v] = dep[u] + <span class="hljs-number">1</span>; fa[v][<span class="hljs-number">0</span>] = u; </span><br><span class="line">    dfs(v, u); siz[u] += siz[v]; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span></span><br><span class="line">  <span class="hljs-keyword">int</span> u, v, lca; </span><br><span class="line">&#125;E[N];</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">LCA</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">if</span>(dep[u] &lt; dep[v]) swap(u, v); </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">16</span>; i &gt;= <span class="hljs-number">0</span>; i--)  </span><br><span class="line">    <span class="hljs-keyword">if</span>(dep[fa[u][i]] &gt;= dep[v]) </span><br><span class="line">      u = fa[u][i]; </span><br><span class="line">  <span class="hljs-keyword">if</span>(u == v) <span class="hljs-keyword">return</span> u; </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">16</span>; i &gt;= <span class="hljs-number">0</span>; i--) </span><br><span class="line">    <span class="hljs-keyword">if</span>(fa[u][i] != fa[v][i]) </span><br><span class="line">      u = fa[u][i], v = fa[v][i]; </span><br><span class="line">  <span class="hljs-keyword">return</span> fa[u][<span class="hljs-number">0</span>]; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(node x, node y)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> dep[x.lca] &gt; dep[y.lca]; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> c[N]; </span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lb</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> x &amp; (-x); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = x; i &lt;= n + <span class="hljs-number">1</span>; i += lb(i)) </span><br><span class="line">    c[i] += d; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">int</span> ret = <span class="hljs-number">0</span>; </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = x; i; i -= lb(i))</span><br><span class="line">    ret += c[i]; </span><br><span class="line">  <span class="hljs-keyword">return</span> ret; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">A</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">  add(l, <span class="hljs-number">1</span>), add(r + <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;n) != EOF) &#123;</span><br><span class="line">    n++;</span><br><span class="line">    <span class="hljs-built_in">memset</span>(dep, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(dep)); </span><br><span class="line">    <span class="hljs-built_in">memset</span>(fa, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(fa)); </span><br><span class="line">    <span class="hljs-built_in">memset</span>(dfn, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(dfn)); </span><br><span class="line">    <span class="hljs-built_in">memset</span>(c, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(c)); </span><br><span class="line">    tot = <span class="hljs-number">0</span>; </span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) </span><br><span class="line">      head[i] = <span class="hljs-literal">NULL</span>; </span><br><span class="line">    cur = pool; </span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="hljs-keyword">int</span> u, v; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>, &amp;u, &amp;v); </span><br><span class="line">      u++, v++; addedge(u, v); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;m); </span><br><span class="line">    dfs(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>); </span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; (<span class="hljs-number">1</span> &lt;&lt; j) &lt;= n; j++) </span><br><span class="line">      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) </span><br><span class="line">        fa[i][j] = fa[fa[i][j - <span class="hljs-number">1</span>]][j - <span class="hljs-number">1</span>]; </span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">      <span class="hljs-keyword">int</span> u, v; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>, &amp;u, &amp;v); u++, v++; </span><br><span class="line">      E[i].u = u, E[i].v = v, E[i].lca = LCA(u, v); </span><br><span class="line">    &#125; sort(E + <span class="hljs-number">1</span>, E + m + <span class="hljs-number">1</span>, cmp);</span><br><span class="line">    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>; </span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">      <span class="hljs-keyword">int</span> u = E[i].u, v = E[i].v, lca = E[i].lca; </span><br><span class="line">      <span class="hljs-keyword">if</span>(!sum(dfn[u]) &amp;&amp; !sum(dfn[v])) </span><br><span class="line">        ans++, A(dfn[lca], dfn[lca] + siz[lca] - <span class="hljs-number">1</span>); </span><br><span class="line">    &#125; <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, ans); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h1&gt;&lt;p&gt;给你一颗以 $0$ 为根的有根树。现在有些节点坏掉了，与周围无法联通。已知 $m$ 对 $(u,v)​$ 无法联通，求最少坏了几个节点。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="贪心" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="树状数组" scheme="http://yoursite.com/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>BJOI2019 游记</title>
    <link href="http://yoursite.com/2019/03/31/BJOI2019-%E6%B8%B8%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/03/31/BJOI2019-游记/</id>
    <published>2019-03-31T07:10:29.000Z</published>
    <updated>2019-04-20T13:35:08.106Z</updated>
    
    <content type="html"><![CDATA[<p>提前占坑。记录第一次省（bao）选（ling）</p><a id="more"></a><hr><h1 id="Day-n"><a href="#Day-n" class="headerlink" title="Day -n"></a>Day -n</h1><p>颓废</p><h1 id="Day-m"><a href="#Day-m" class="headerlink" title="Day -m"></a>Day -m</h1><p>模拟赛（集训）爆零（严肃）</p><p><a href="https://lim817.github.io/2019/04/06/BJOI2019-%E6%B8%B8%E8%AE%B0/" target="_blank" rel="noopener">AK大佬点这里</a></p><h1 id="Day-0"><a href="#Day-0" class="headerlink" title="Day 0"></a>Day 0</h1><p>复习期中</p><p>打了些板子</p><p>准备迎接退役（雾</p><h1 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h1><p>密码输错了几次..开题</p><p>T1 什么鬼…字符串匹配？…几何平均值？？</p><p>T2 emm感觉很可做</p><p>T3 什么鬼…看了下标题和题面长度，然后就几乎没看过…现在都不知道题意是啥（事实证明这决策非常对</p><p>T1 想了一会感觉这个15分很好拿，先放着，20min写得完。感觉下面可以搞个dp但是输出方案不好弄写起来性价比有点低放了去看 T2</p><p>T2 显然这个 2*n 就是求区间 C_{斐波数列}^{k} 的和。把组合数拆一下发现可以直接预处理出几次方的系数。然后问题转化成前缀和减一下。貌似能直接矩阵快速幂，写起来不算特别麻烦。算了下复杂度勉强能过  k &lt;= 50 突然发现 l, r 比较小的可以直接跑如果 k 太大反而不能用矩阵快速幂。于是就写写写。写了2个小时(3个小时?我还是太弱了码力不够)过了第一个样例（中间差点心态崩了）。最后写了一坨奇怪的代码</p><p>3*n 有点卡住，时间只剩 2h 了吧（记不清了）。然后回去写了一发 T2 的暴力。然后还剩 1.5h-。回去想 T2。手花了几种方格图发现是由这个 3 乘 奇数多一块 或者 3 乘偶数少一块递推而来的。设了个方程解出来是 4乘前面一项减去前面两项的数。也是一个二阶线性递推。还剩 1h+ 赶紧把前面的代码复制粘贴魔改了一番系数然后调了半天还剩 20min 的时候调出来了。过了两个样例心情舒坦。最后还发现 T3 有个无解输出个 -1 。检查了一番文件名就结束了。</p><p>中午（看大佬）颓废。等分真是漫长。</p><p>出分了。 15 + 65 + 0 丢了 5 分还行。rk16(17?)?!出人意料…</p><p>讲题，T1貌似听上去很套路？取个 log 变成平均数，然后二分，然后 AC自动机上dp？反正肯定是不会的。</p><p>T2正解要用什么奇怪的扩展整数域，听得很懵。。</p><p>T3全程掉线，我题意都不知道是啥（我还是太菜了</p><p>晚上还是要复习万恶的期中（（（</p><p>Day2 爆零预备</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;提前占坑。记录第一次省（bao）选（ling）&lt;/p&gt;
    
    </summary>
    
      <category term="游记" scheme="http://yoursite.com/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
      <category term="省选游记" scheme="http://yoursite.com/tags/%E7%9C%81%E9%80%89%E6%B8%B8%E8%AE%B0/"/>
    
      <category term="爆零" scheme="http://yoursite.com/tags/%E7%88%86%E9%9B%B6/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ3143 「HNOI2013」游走</title>
    <link href="http://yoursite.com/2019/03/22/BZOJ3143/"/>
    <id>http://yoursite.com/2019/03/22/BZOJ3143/</id>
    <published>2019-03-22T09:04:09.000Z</published>
    <updated>2019-03-22T11:24:56.217Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>$n$ 个点 $m$ 条边的无向连通图，在上面从 $1$ 号点开始随机游走。现在你可以给每条边从 $1$ 到 $m$ 编号作为分数（经过就得分）。求如何编号使得总分的期望最小。输出这个最小值即可。</p><p>$n \leq 500$ </p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>如果知道了每条边被经过的期望次数，那么根据排序不等式显然是逆序分配最小。</p><p>设 $f_u$ 是 $u$ 点被经过的期望次数，$deg_u$ 表示 $u$ 的度数。那么边 $(u, v)$ 被经过的期望次数是 </p><script type="math/tex; mode=display">\frac{f_u}{deg_u}+\frac{f_v}{deg_v}</script><p>$f$ 的求法比较简单，即 </p><script type="math/tex; mode=display">f_u = \sum\limits_{(u,v) \in E} \frac{f_v}{deg_v}</script><p>高斯消元一波再排个序就做完了。时间复杂度 $O(n^3)$</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Author: AcFunction</span></span><br><span class="line"><span class="hljs-comment"> * Date:   2019-03-18 22:13:03</span></span><br><span class="line"><span class="hljs-comment"> * Email:  3486942970@qq.com</span></span><br><span class="line"><span class="hljs-comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> db double</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PII pair <span class="hljs-meta-string">&lt;int, int&gt; </span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Fi first</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Se second </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> RG register </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, l, r) for(RG int i = l; i &lt;= r; i++) </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> per(i, r, l) for(RG int i = r; i &gt;= l; i--)</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">INIT</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  ios :: sync_with_stdio(<span class="hljs-literal">false</span>); <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">505</span>; </span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> n, m, deg[N]; </span><br><span class="line">PII E[N * N]; </span><br><span class="line">db a[N][N], t[N]; </span><br><span class="line">db A[N * N], ans; </span><br><span class="line"><span class="hljs-built_in">vector</span> &lt;<span class="hljs-keyword">int</span>&gt; g[N]; </span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  rep(u, <span class="hljs-number">1</span>, n) &#123;</span><br><span class="line">    a[u][u] = <span class="hljs-number">1.0</span>; </span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> v : g[u]) </span><br><span class="line">      <span class="hljs-keyword">if</span>(v != n)</span><br><span class="line">        a[u][v] -= <span class="hljs-number">1.0</span> / deg[v];  </span><br><span class="line">  &#125; a[<span class="hljs-number">1</span>][n + <span class="hljs-number">1</span>] = <span class="hljs-number">1.0</span>; </span><br><span class="line">  a[n][n + <span class="hljs-number">1</span>] = <span class="hljs-number">-1.0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">gauss</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  rep(i, <span class="hljs-number">1</span>, n) &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> p = i;</span><br><span class="line">    rep(j, i + <span class="hljs-number">1</span>, n) </span><br><span class="line">      <span class="hljs-keyword">if</span>(<span class="hljs-built_in">fabs</span>(a[j][i]) &gt; <span class="hljs-built_in">fabs</span>(a[p][i] + <span class="hljs-number">1e-13</span>))</span><br><span class="line">        p = j; </span><br><span class="line">    rep(j, i + <span class="hljs-number">1</span>, n) &#123;</span><br><span class="line">      <span class="hljs-keyword">if</span>(<span class="hljs-built_in">fabs</span>(a[j][i]) &lt; <span class="hljs-number">1e-13</span>) <span class="hljs-keyword">continue</span> ; </span><br><span class="line">      db cof = a[j][i] / a[i][i]; </span><br><span class="line">      rep(k, i, n + <span class="hljs-number">1</span>) </span><br><span class="line">        a[j][k] -= a[i][k] * cof; </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  per(i, n, <span class="hljs-number">1</span>) &#123;</span><br><span class="line">    rep(j, i + <span class="hljs-number">1</span>, n) </span><br><span class="line">      a[i][n + <span class="hljs-number">1</span>] -= a[i][j] * t[j];</span><br><span class="line">    t[i] = a[i][n + <span class="hljs-number">1</span>] / a[i][i]; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  INIT(); </span><br><span class="line">  <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m; </span><br><span class="line">  rep(i, <span class="hljs-number">1</span>, m) &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> u, v; <span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; v; </span><br><span class="line">    E[i] = MP(u, v); </span><br><span class="line">    deg[u]++, deg[v]++;</span><br><span class="line">    g[u].pb(v), g[v].pb(u); </span><br><span class="line">  &#125; build(n), gauss(n); </span><br><span class="line">  rep(i, <span class="hljs-number">1</span>, m) </span><br><span class="line">    A[i] = <span class="hljs-number">1.0</span> * t[E[i].Fi] / deg[E[i].Fi] + </span><br><span class="line">           <span class="hljs-number">1.0</span> * t[E[i].Se] / deg[E[i].Se]; </span><br><span class="line">  sort(A + <span class="hljs-number">1</span>, A + m + <span class="hljs-number">1</span>);</span><br><span class="line">  rep(i, <span class="hljs-number">1</span>, m) ans += A[i] * (m - i + <span class="hljs-number">1</span>); </span><br><span class="line">  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%.3lf\n"</span>, ans);</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h1&gt;&lt;p&gt;$n$ 个点 $m$ 条边的无向连通图，在上面从 $1$ 号点开始随机游走。现在你可以给每条边从 $1$ 到 $m$ 编号作为分数（经过就得分）。求如何编号使得总分的期望最小。输出这个最小值即可。&lt;/p&gt;
&lt;p&gt;$n \leq 500$ &lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="概率期望" scheme="http://yoursite.com/tags/%E6%A6%82%E7%8E%87%E6%9C%9F%E6%9C%9B/"/>
    
      <category term="高斯消元" scheme="http://yoursite.com/tags/%E9%AB%98%E6%96%AF%E6%B6%88%E5%85%83/"/>
    
      <category term="贪心" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ4008 「HNOI2015」亚瑟王</title>
    <link href="http://yoursite.com/2019/03/22/BZOJ4008/"/>
    <id>http://yoursite.com/2019/03/22/BZOJ4008/</id>
    <published>2019-03-22T09:03:59.000Z</published>
    <updated>2019-03-22T11:52:32.141Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>有 $n$ 张卡牌，$r$ 局游戏，每张卡牌有 $p_i$ 的概率发动技能，如果发动会造成 $d_i​$ 的伤害。每局游戏从第一张卡牌开始开始一个个遍历，如果发动过技能则忽略继续；否则如果这张卡牌现在发动了，则结束回合；没有发动则继续。求造成的总伤害的期望。</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>可以想象成把 $r$ 个机会分配给每一张卡牌。$dp[i][j]$ 表示前 $i$ 张还剩 $j$ 个机会的答案 </p><script type="math/tex; mode=display">dp[i][j] = dp[i-1][j] \cdot (1-p[i])^j+dp[i-1][j+1]\cdot (1-(1-p[i])^{j+1})</script><p>前半部分可以理解成在 $j$ 轮没有一次触发，后半部分就是至少一次触发。并且后半部分因为出触发了所以对答案有贡献，所以在 dp 的时候顺便把 ans 加上后半部分 * $d_i$ </p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Author: AcFunction</span></span><br><span class="line"><span class="hljs-comment"> * Date:   2019-03-17 15:45:54</span></span><br><span class="line"><span class="hljs-comment"> * Email:  3486942970@qq.com</span></span><br><span class="line"><span class="hljs-comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> db double</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PII pair <span class="hljs-meta-string">&lt;int, int&gt; </span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Fi first</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Se second </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> RG register </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, l, r) for(RG int i = l; i &lt;= r; i++) </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> per(i, r, l) for(RG int i = r; i &gt;= l; i--)</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">INIT</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  ios :: sync_with_stdio(<span class="hljs-literal">false</span>); <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">250</span>; </span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> T, n, r, d[N]; </span><br><span class="line">db f[N][N], p[N]; </span><br><span class="line"></span><br><span class="line"><span class="hljs-function">db <span class="hljs-title">fpw</span><span class="hljs-params">(db x, <span class="hljs-keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  db ret = <span class="hljs-number">1.0</span>;</span><br><span class="line">  <span class="hljs-keyword">while</span>(k) &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(k &amp; <span class="hljs-number">1</span>) ret = ret * x;</span><br><span class="line">    x = x * x; k &gt;&gt;= <span class="hljs-number">1</span>; </span><br><span class="line">  &#125; <span class="hljs-keyword">return</span> ret; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  INIT(); </span><br><span class="line">  <span class="hljs-built_in">cin</span> &gt;&gt; T; </span><br><span class="line">  <span class="hljs-keyword">while</span>(T--) &#123;</span><br><span class="line">    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; r; </span><br><span class="line">    <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(f)); </span><br><span class="line">    rep(i, <span class="hljs-number">1</span>, n) <span class="hljs-built_in">cin</span> &gt;&gt; p[i] &gt;&gt; d[i]; </span><br><span class="line">    f[<span class="hljs-number">0</span>][r] = <span class="hljs-number">1</span>; db ans = <span class="hljs-number">0</span>; </span><br><span class="line">    rep(i, <span class="hljs-number">1</span>, n) </span><br><span class="line">      per(j, r, <span class="hljs-number">0</span>) </span><br><span class="line">        f[i][j] = f[i - <span class="hljs-number">1</span>][j] * fpw(<span class="hljs-number">1</span> - p[i], j) + f[i - <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>] * (<span class="hljs-number">1</span> - fpw(<span class="hljs-number">1</span> - p[i], j + <span class="hljs-number">1</span>)), </span><br><span class="line">        ans += d[i] * f[i - <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>] * (<span class="hljs-number">1</span> - fpw(<span class="hljs-number">1</span> - p[i], j + <span class="hljs-number">1</span>)); </span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%.6lf\n"</span>, ans); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h1&gt;&lt;p&gt;有 $n$ 张卡牌，$r$ 局游戏，每张卡牌有 $p_i$ 的概率发动技能，如果发动会造成 $d_i​$ 的伤害。每局游戏从第一张卡牌开始开始一个个遍历，如果发动过技能则忽略继续；否则如果这张卡牌现在发动了，则结束回合；没有发动则继续。求造成的总伤害的期望。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="概率期望" scheme="http://yoursite.com/tags/%E6%A6%82%E7%8E%87%E6%9C%9F%E6%9C%9B/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ2134 单选错位</title>
    <link href="http://yoursite.com/2019/03/22/BZOJ2134/"/>
    <id>http://yoursite.com/2019/03/22/BZOJ2134/</id>
    <published>2019-03-22T09:03:51.000Z</published>
    <updated>2019-03-22T09:14:05.103Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>$n$ 道题，第 $i$ 道题有 $a_i$ 个选项。求将正确答案全部右移一位（第 $n$ 题移到第 $1$ 题）之后期望对的题数</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>答案 = 期望多少个 $i$ 满足 $ans_i = ans_{i+1}$ 也 = sum $ans_i = ans_{i+1}$ 的期望也就是 $\sum \frac{\min\{a_i, a_{i+1}\}}{a_ia_{i+1}}=\sum\frac{1}{\max\{a_i,a_{i+1}\}}$ （为了方便设 $a_{n+1}=a_1$）</p><p>做完了</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Author: AcFunction</span></span><br><span class="line"><span class="hljs-comment"> * Date:   2019-03-20 14:41:06</span></span><br><span class="line"><span class="hljs-comment"> * Email:  3486942970@qq.com</span></span><br><span class="line"><span class="hljs-comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> n, A, B, C, a[<span class="hljs-number">10000002</span>]; </span><br><span class="line"><span class="hljs-keyword">double</span> ans; </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d%d%d"</span>,&amp;n,&amp;A,&amp;B,&amp;C,a+<span class="hljs-number">1</span>); </span><br><span class="line">  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) </span><br><span class="line">    a[i] = ((<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>)a[i - <span class="hljs-number">1</span>] * A + B) % <span class="hljs-number">100000001</span>; </span><br><span class="line">  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) </span><br><span class="line">    a[i] = a[i] % C + <span class="hljs-number">1</span>; </span><br><span class="line">  a[n + <span class="hljs-number">1</span>] = a[<span class="hljs-number">1</span>];</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) ans += <span class="hljs-number">1.0</span> / max(a[i], a[i + <span class="hljs-number">1</span>]); </span><br><span class="line">  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%.3lf\n"</span>, ans); </span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h1&gt;&lt;p&gt;$n$ 道题，第 $i$ 道题有 $a_i$ 个选项。求将正确答案全部右移一位（第 $n$ 题移到第 $1$ 题）之后期望对的题数&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="概率期望" scheme="http://yoursite.com/tags/%E6%A6%82%E7%8E%87%E6%9C%9F%E6%9C%9B/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ4665 小w的喜糖</title>
    <link href="http://yoursite.com/2019/03/17/BZOJ4665/"/>
    <id>http://yoursite.com/2019/03/17/BZOJ4665/</id>
    <published>2019-03-17T13:57:09.000Z</published>
    <updated>2019-03-17T14:59:28.533Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>$n$ 颗糖发给了 $n$ 个人，每颗糖有一个种类。$n$ 个人相互交换手中的糖那么有多少种方案使得每个人手中的糖的种类都与原来不同。</p><p>两个方案不同当且仅当，存在一个人，他手中的糖的种类在两个方案中不一样。</p><p>答案对 $10^9 + 9$ 取模</p><a id="more"></a> <p>答案对 $10^9 + 9$ 取模！！！！！ $10^9 + 9$  ！！！！ $10^9 + 9$ ！！！！！ $10^9 + 9$ ！！！！！</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>可以暂时不考虑相同种类糖之间的关系，把它们当成不同的最后把答案乘上 $\frac{1}{\Pi_{i} a_i!}$ . $a_i$ 表示种类 $i$ 的糖数</p><p>设 $dp[i][j]$ 表示前 $i$ 种糖至少有 $j$ 个人不合法（即手中拿的糖和原来一样。那么有</p><script type="math/tex; mode=display">dp[i][j] = \sum\limits_{k=0}^{\min(a_i,j)} \binom{a_i}{k} \cdot dp[i-1][j-k] \cdot a_i(a_i-1)\cdots(a_i - k + 1)</script><p>然后对于答案就可以直接容斥得到 </p><script type="math/tex; mode=display">ans = \sum\limits_{i=0}^{n} (-1)^{i}dp[n][i]\cdot(n-i)!</script><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Author: AcFunction</span></span><br><span class="line"><span class="hljs-comment"> * Date:   2019-03-04 21:07:09</span></span><br><span class="line"><span class="hljs-comment"> * Email:  3486942970@qq.com</span></span><br><span class="line"><span class="hljs-comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> RG register </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, l, r) for(RG int i = l; i &lt;= r; i++) </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> per(i, r, l) for(RG int i = r; i &gt;= l; i--)</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">INIT</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  ios :: sync_with_stdio(<span class="hljs-literal">false</span>); <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">2005</span>; </span><br><span class="line"><span class="hljs-keyword">const</span> ll mod = (ll)<span class="hljs-number">1e9</span> + <span class="hljs-number">9</span>; </span><br><span class="line"></span><br><span class="line"><span class="hljs-function">ll <span class="hljs-title">fpw</span><span class="hljs-params">(ll x, ll k, ll p)</span> </span>&#123;</span><br><span class="line">  ll ret = <span class="hljs-number">1</span>; </span><br><span class="line">  <span class="hljs-keyword">while</span>(k) &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(k &amp; <span class="hljs-number">1</span>) ret = ret * x % p; </span><br><span class="line">    x = x * x % p; k &gt;&gt;= <span class="hljs-number">1</span>; </span><br><span class="line">  &#125; <span class="hljs-keyword">return</span> ret; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> n, a[N]; </span><br><span class="line">ll dp[N][N], inv[N], invf[N], fac[N]; </span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">prework</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  inv[<span class="hljs-number">1</span>] = fac[<span class="hljs-number">0</span>] = fac[<span class="hljs-number">1</span>] = invf[<span class="hljs-number">0</span>] = invf[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>; </span><br><span class="line">  rep(i, <span class="hljs-number">2</span>, n) </span><br><span class="line">    inv[i] = (mod - mod / i) * inv[mod % i] % mod, </span><br><span class="line">    fac[i] = fac[i - <span class="hljs-number">1</span>] * i % mod, </span><br><span class="line">    invf[i] = invf[i - <span class="hljs-number">1</span>] * inv[i] % mod; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function">ll <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">if</span>(n &lt; m) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">  <span class="hljs-keyword">return</span> fac[n] * invf[m] % mod * invf[n - m] % mod; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  INIT(); </span><br><span class="line">  <span class="hljs-built_in">cin</span> &gt;&gt; n; </span><br><span class="line">  prework(); </span><br><span class="line">  rep(i, <span class="hljs-number">1</span>, n) &#123; <span class="hljs-keyword">int</span> t; <span class="hljs-built_in">cin</span> &gt;&gt; t; a[t]++; &#125; </span><br><span class="line">  ll ans = <span class="hljs-number">0</span>; dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>; </span><br><span class="line">  rep(i, <span class="hljs-number">1</span>, n) rep(j, <span class="hljs-number">0</span>, n)</span><br><span class="line">    rep(k, <span class="hljs-number">0</span>, min(a[i], j)) </span><br><span class="line">      dp[i][j] += <span class="hljs-number">1l</span>l * dp[i - <span class="hljs-number">1</span>][j - k] * C(a[i], k) % mod * fac[a[i]] % mod * invf[a[i] - k] % mod, </span><br><span class="line">      dp[i][j] %= mod; </span><br><span class="line">  <span class="hljs-comment">// rep(i, 0, n) cout &lt;&lt; dp[n][i] &lt;&lt; " "; </span></span><br><span class="line">  rep(i, <span class="hljs-number">0</span>, n) ans += <span class="hljs-number">1l</span>l * ((i &amp; <span class="hljs-number">1</span>) ? <span class="hljs-number">-1</span> : <span class="hljs-number">1</span>) * dp[n][i] % mod * fac[n - i] % mod, ans %= mod, ans += mod, ans %= mod; </span><br><span class="line">  rep(i, <span class="hljs-number">1</span>, n) ans *= invf[a[i]], ans %= mod; </span><br><span class="line">  <span class="hljs-built_in">cout</span> &lt;&lt; ((ans % mod + mod) % mod);  </span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h1&gt;&lt;p&gt;$n$ 颗糖发给了 $n$ 个人，每颗糖有一个种类。$n$ 个人相互交换手中的糖那么有多少种方案使得每个人手中的糖的种类都与原来不同。&lt;/p&gt;
&lt;p&gt;两个方案不同当且仅当，存在一个人，他手中的糖的种类在两个方案中不一样。&lt;/p&gt;
&lt;p&gt;答案对 $10^9 + 9$ 取模&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="容斥" scheme="http://yoursite.com/tags/%E5%AE%B9%E6%96%A5/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ4361 isn</title>
    <link href="http://yoursite.com/2019/03/17/BZOJ4361/"/>
    <id>http://yoursite.com/2019/03/17/BZOJ4361/</id>
    <published>2019-03-17T13:57:00.000Z</published>
    <updated>2019-03-17T14:46:10.107Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>给出一个长度为 $n$ 的序列 $A(A_1,A_2 \cdot A_n)$。如果序列 $A$ 不是非降的，你必须从中删去一个数这一操作，直到 $A$ 非降为止。求有多少种不同的操作方案，答案模 $10^9+7$ 。</p><a id="more"></a> <h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>设 $dp[i][j]$ 表示以 $i$ 这个点结尾，长度恰好为 $j$ 的非降子序列的个数 </p><p>求法要用树状数组维护（还要离散化）</p><p>考虑怎么求出答案 令 $g[i]$ 为有多少个长度为 $i$ 的非降子序列即</p><script type="math/tex; mode=display">g[i] = \sum\limits_{j=1}^{n} dp[j][i]</script><p>那么有：将原序列删除到长度为 $i$ 的子序列的方案数是</p><script type="math/tex; mode=display">g[i] \cdot (n-i)!</script><p>乍看很对，仔细一想其实这不是对的：<strong>因为并没有考虑在 (i+1) 的时候已经达到状态就不会再继续进行操作</strong></p><p>如果当前不合法那么这个序列只有可能是从 $i+1$ 的状态选择了一个数删掉得到的。所以有</p><script type="math/tex; mode=display">ans = \sum\limits_{i = 1} ^ {n} g[i] \cdot (n - i)! - (i + 1) \cdot g[i + 1] \cdot (n - i - 1)!</script><p>时间复杂度：$O(n^2 \log n)$ </p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Author: AcFunction</span></span><br><span class="line"><span class="hljs-comment"> * Date:   2019-03-04 19:04:32</span></span><br><span class="line"><span class="hljs-comment"> * Email:  3486942970@qq.com</span></span><br><span class="line"><span class="hljs-comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> RG register </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, l, r) for(RG int i = l; i &lt;= r; i++) </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> per(i, r, l) for(RG int i = r; i &gt;= l; i--)</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">INIT</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  ios :: sync_with_stdio(<span class="hljs-literal">false</span>); <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">2005</span>; </span><br><span class="line"><span class="hljs-keyword">const</span> ll mod = (ll)<span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>; </span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> n, a[N], f[N][N];</span><br><span class="line"></span><br><span class="line">ll fac[N], g[N];  </span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lb</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123; <span class="hljs-keyword">return</span> x &amp; (-x); &#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BIT</span> &#123;</span></span><br><span class="line">  <span class="hljs-keyword">int</span> c[N]; </span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = x; i &lt;= N; i += lb(i))</span><br><span class="line">      c[i] += d, c[i] %= mod; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> ret = <span class="hljs-number">0</span>; </span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = x; i; i -= lb(i)) </span><br><span class="line">      ret += c[i], ret %= mod; </span><br><span class="line">    <span class="hljs-keyword">return</span> ret;  </span><br><span class="line">  &#125;</span><br><span class="line">&#125; b[N]; </span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> aa[N]; </span><br><span class="line"><span class="hljs-built_in">map</span> &lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; mp; <span class="hljs-keyword">int</span> cnt; </span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  INIT(); </span><br><span class="line">  <span class="hljs-built_in">cin</span> &gt;&gt; n; rep(i, <span class="hljs-number">1</span>, n) <span class="hljs-built_in">cin</span> &gt;&gt; aa[i], a[i] = aa[i]; </span><br><span class="line">  sort(aa + <span class="hljs-number">1</span>, aa + n + <span class="hljs-number">1</span>); </span><br><span class="line">  rep(i, <span class="hljs-number">1</span>, n) &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(!mp[aa[i]]) mp[aa[i]] = ++cnt; </span><br><span class="line">  &#125;</span><br><span class="line">  rep(i, <span class="hljs-number">1</span>, n) a[i] = mp[a[i]]; </span><br><span class="line">  rep(i, <span class="hljs-number">1</span>, n) f[i][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>; </span><br><span class="line">  rep(j, <span class="hljs-number">2</span>, n) &#123;</span><br><span class="line">    rep(i, <span class="hljs-number">1</span>, n) &#123;</span><br><span class="line">      f[i][j] = b[j - <span class="hljs-number">1</span>].sum(a[i]); </span><br><span class="line">      b[j - <span class="hljs-number">1</span>].add(a[i], f[i][j - <span class="hljs-number">1</span>]); </span><br><span class="line">    &#125;</span><br><span class="line">  &#125; fac[<span class="hljs-number">0</span>] = fac[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>; </span><br><span class="line">  ll ans = <span class="hljs-number">0</span>; </span><br><span class="line">  rep(i, <span class="hljs-number">2</span>, n) fac[i] = fac[i - <span class="hljs-number">1</span>] * i % mod; </span><br><span class="line">  rep(i, <span class="hljs-number">1</span>, n) </span><br><span class="line">    rep(j, <span class="hljs-number">1</span>, n) </span><br><span class="line">      g[i] += f[j][i], g[i] %= mod; </span><br><span class="line">  rep(i, <span class="hljs-number">1</span>, n) &#123;</span><br><span class="line">    ans += ((g[i] * fac[n - i] % mod) - ((i + <span class="hljs-number">1</span>) * g[i + <span class="hljs-number">1</span>] % mod * fac[n - i - <span class="hljs-number">1</span>]) % mod) % mod;</span><br><span class="line">    ans %= mod;  </span><br><span class="line">  &#125; <span class="hljs-built_in">cout</span> &lt;&lt; (ans + mod) % mod &lt;&lt; <span class="hljs-built_in">endl</span>; </span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h1&gt;&lt;p&gt;给出一个长度为 $n$ 的序列 $A(A_1,A_2 \cdot A_n)$。如果序列 $A$ 不是非降的，你必须从中删去一个数这一操作，直到 $A$ 非降为止。求有多少种不同的操作方案，答案模 $10^9+7$ 。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="容斥" scheme="http://yoursite.com/tags/%E5%AE%B9%E6%96%A5/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="树状数组" scheme="http://yoursite.com/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ2839 集合计数</title>
    <link href="http://yoursite.com/2019/03/17/BZOJ2839/"/>
    <id>http://yoursite.com/2019/03/17/BZOJ2839/</id>
    <published>2019-03-17T13:56:52.000Z</published>
    <updated>2019-03-17T14:32:14.547Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>从大小为 $n$ 的集合中取出若干子集（至少一个），使得它们的交集的元素个数为 $K$ ，求取法的方案数，答案模$1000000007$</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>$ans$ = 先选出这 $k$ 个元素是哪些  * 让剩下的交集为空</p><p>让剩下的交集为空 =(容斥) 随便选 - 交集至少一个元素 + 交集至少两个元素 …  </p><p>交集至少为 $i$ 的方案数是 $\binom{n-k}{i} \cdot (2^{2^{n-k-i}}-1)$ (从剩下的 $n - k$ 里选 $i$ 个 * (有这些元素的子集随便选 - 啥都不选的一组)</p><script type="math/tex; mode=display">ans = \binom{n}{k}\sum\limits_{i=0}^{n-k}(-1)^i \binom{n-k}{i}\cdot (2^{2^{n-k-i}}-1)</script><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Author: AcFunction</span></span><br><span class="line"><span class="hljs-comment"> * Date:   2019-03-04 17:33:39</span></span><br><span class="line"><span class="hljs-comment"> * Email:  3486942970@qq.com</span></span><br><span class="line"><span class="hljs-comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> RG register </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, l, r) for(RG int i = l; i &lt;= r; i++) </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> per(i, r, l) for(RG int i = r; i &gt;= l; i--)</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">INIT</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  ios :: sync_with_stdio(<span class="hljs-literal">false</span>); <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1000005</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> ll mod = (ll)<span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;  </span><br><span class="line"></span><br><span class="line">ll fac[N], ans; </span><br><span class="line"></span><br><span class="line"><span class="hljs-function">ll <span class="hljs-title">fpw</span><span class="hljs-params">(ll x, ll k, ll p)</span> </span>&#123;</span><br><span class="line">  ll ret = <span class="hljs-number">1l</span>l; </span><br><span class="line">  <span class="hljs-keyword">while</span>(k) &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(k &amp; <span class="hljs-number">1</span>) ret = ret * x % p; </span><br><span class="line">    x = x * x % p; k &gt;&gt;= <span class="hljs-number">1</span>; </span><br><span class="line">  &#125; <span class="hljs-keyword">return</span> ret; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">prework</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  fac[<span class="hljs-number">0</span>] = fac[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>; </span><br><span class="line">  rep(i, <span class="hljs-number">2</span>, n) fac[i] = fac[i - <span class="hljs-number">1</span>] * i % mod; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function">ll <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">if</span>(m &gt; n) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">  <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> fac[n] * fpw(fac[n - m], mod - <span class="hljs-number">2</span>, mod) % mod * </span><br><span class="line">              fpw(fac[m], mod - <span class="hljs-number">2</span>, mod) % mod; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  INIT(); </span><br><span class="line">  <span class="hljs-keyword">int</span> n, k; <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; k; prework(n); </span><br><span class="line">  ll pw1 = ((n - k) &amp; <span class="hljs-number">1</span>) ? <span class="hljs-number">-1</span> : <span class="hljs-number">1</span>, pw2 = <span class="hljs-number">2</span>; </span><br><span class="line">  per(i, n - k, <span class="hljs-number">0</span>) &#123;</span><br><span class="line">    ans += pw1 * (pw2 - <span class="hljs-number">1</span>) % mod * C(n - k, i) % mod;</span><br><span class="line">    ans %= mod; pw1 *= <span class="hljs-number">-1</span>; pw2 *= pw2; pw2 %= mod;  </span><br><span class="line">  &#125; ans = ans * C(n, k) % mod; ans = (ans + mod) % mod; </span><br><span class="line">  <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;  </span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h1&gt;&lt;p&gt;从大小为 $n$ 的集合中取出若干子集（至少一个），使得它们的交集的元素个数为 $K$ ，求取法的方案数，答案模$1000000007$&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="容斥" scheme="http://yoursite.com/tags/%E5%AE%B9%E6%96%A5/"/>
    
      <category term="组合数学" scheme="http://yoursite.com/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ1042 「HNOI2008」硬币购物</title>
    <link href="http://yoursite.com/2019/03/09/BZOJ1042/"/>
    <id>http://yoursite.com/2019/03/09/BZOJ1042/</id>
    <published>2019-03-09T08:21:03.000Z</published>
    <updated>2019-03-17T14:29:55.225Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>一共有 $4$ 种硬币。面值分别为 $c_1,c_2,c_3,c_4$ 。某人去商店买东西，去了 $tot$ 次。每次带 $d_i$ 枚 $c_i$ 硬币，买 $s$ 的价值的东西。请问每次有多少种付款方法。</p><a id="more"></a> <h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>考虑没有 $d$ 的限制，直接完全背包。$dp_i$ 表示 $i$ 这个面值用 $c_1…c_4$ 凑有多少种方法</p><p>加上限制就容斥枚举 $16$ 种情况表示哪几种面值的性质没有被满足。</p><p>然后可以观察到，如果对于 $i$ 不满足限制，方案数就是 $dp_{s-(d_i+1)c_i}$ </p><p>所以归纳一下就是 </p><script type="math/tex; mode=display">ans = \sum\limits_{S \subseteq {1,2,3,4}}(-1)^{|S|}dp_{(s-\sum\limits_{x \in S} (d_x+1)c_x)}</script><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Author: AcFunction</span></span><br><span class="line"><span class="hljs-comment"> * Date:   2019-03-04 17:57:01</span></span><br><span class="line"><span class="hljs-comment"> * Email:  3486942970@qq.com</span></span><br><span class="line"><span class="hljs-comment">**/</span></span><br><span class="line"> </span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> RG register </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, l, r) for(RG int i = l; i &lt;= r; i++) </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> per(i, r, l) for(RG int i = r; i &gt;= l; i--)</span></span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">INIT</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  ios :: sync_with_stdio(<span class="hljs-literal">false</span>); <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>); </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100100</span>; </span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">int</span> n, c[<span class="hljs-number">5</span>], d[<span class="hljs-number">5</span>]; <span class="hljs-keyword">int</span> dp[N]; </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  INIT(); dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>; </span><br><span class="line">  rep(i, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>) <span class="hljs-built_in">cin</span> &gt;&gt; c[i]; <span class="hljs-built_in">cin</span> &gt;&gt; n; </span><br><span class="line">  rep(j, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>) rep(i, <span class="hljs-number">0</span>, <span class="hljs-number">100000</span>)</span><br><span class="line">      <span class="hljs-keyword">if</span>(i + c[j] &lt;= <span class="hljs-number">100000</span>) </span><br><span class="line">        dp[i + c[j]] += dp[i]; </span><br><span class="line">  rep(i, <span class="hljs-number">1</span>, n) &#123; <span class="hljs-keyword">int</span> s; <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>; </span><br><span class="line">    rep(j, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>) <span class="hljs-built_in">cin</span> &gt;&gt; d[j]; <span class="hljs-built_in">cin</span> &gt;&gt; s;  </span><br><span class="line">    rep(j, <span class="hljs-number">0</span>, <span class="hljs-number">15</span>) &#123;</span><br><span class="line">      <span class="hljs-keyword">int</span> s1 = <span class="hljs-number">0</span>, s2 = s; </span><br><span class="line">      rep(t, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>) </span><br><span class="line">        <span class="hljs-keyword">if</span>(j &amp; (<span class="hljs-number">1</span> &lt;&lt; (t - <span class="hljs-number">1</span>))) &#123;</span><br><span class="line">          s1++; s2 -= (d[t] + <span class="hljs-number">1</span>) * c[t]; </span><br><span class="line">        &#125;</span><br><span class="line">      ans += ((s1 &amp; <span class="hljs-number">1</span>) ? <span class="hljs-number">-1</span> : <span class="hljs-number">1</span>) * (s2 &gt;= <span class="hljs-number">0</span> ? dp[s2] : <span class="hljs-number">0</span>); </span><br><span class="line">    &#125;  <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h1&gt;&lt;p&gt;一共有 $4$ 种硬币。面值分别为 $c_1,c_2,c_3,c_4$ 。某人去商店买东西，去了 $tot$ 次。每次带 $d_i$ 枚 $c_i$ 硬币，买 $s$ 的价值的东西。请问每次有多少种付款方法。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="容斥" scheme="http://yoursite.com/tags/%E5%AE%B9%E6%96%A5/"/>
    
      <category term="组合数学" scheme="http://yoursite.com/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>类欧几里得算法学习笔记</title>
    <link href="http://yoursite.com/2019/03/03/%E7%B1%BB%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/03/03/类欧几里得算法学习笔记/</id>
    <published>2019-03-03T06:32:49.000Z</published>
    <updated>2019-03-03T07:40:28.370Z</updated>
    
    <content type="html"><![CDATA[<p>类欧几里得算法用来求诸如此类问题：</p><script type="math/tex; mode=display">f(a,b,c,n)=\sum\limits_{i=0}^{n} \lfloor\frac{ai + b}{c}\rfloor</script><a id="more"></a> <p><strong>分类讨论</strong></p><p><strong>第一种情况</strong>：$a=0​$ 。那么 </p><script type="math/tex; mode=display">f(a,b,c,n)= \sum\limits_{i=0}^{n} \lfloor \frac{b}{c} \rfloor=(n+1)\lfloor \frac{b}{c} \rfloor</script><p><strong>第二种情况</strong>：$a,b$ 中有一个大于等于 $c$ 。那么</p><script type="math/tex; mode=display">\begin{aligned}f(a,b,c,n) &= \sum\limits_{i=0}^{n} \lfloor\frac{ai + b}{c}\rfloor \\\&= \sum\limits_{i = 0}^{n}(\lfloor\frac{a\bmod c\cdot i + b \bmod c}{c}\rfloor+i\lfloor\frac{a}{c} \rfloor+\lfloor \frac{b}{c} \rfloor) \\\&= \sum\limits_{i = 0}^{n}\lfloor\frac{a\bmod c\cdot i + b \bmod c}{c}\rfloor +\frac{n(n+1)}{2} \cdot \lfloor\frac{a}{c} \rfloor + (n+1)\lfloor \frac{b}{c} \rfloor \\\&= f(a\bmod c, b \bmod c , c, n) + \frac{n(n+1)}{2} \cdot \lfloor\frac{a}{c} \rfloor + (n+1)\lfloor \frac{b}{c} \rfloor\end{aligned}</script><p><strong>第三种情况</strong>：$a&lt;c$ 且 $b &lt; c$ 。那么 </p><script type="math/tex; mode=display">\begin{aligned}f(a,b,c,n) &= \sum\limits_{i=0}^{n} \lfloor\frac{ai + b}{c}\rfloor \\\&= \sum\limits_{i=0}^{n} \sum\limits_{j=0}^{\lfloor\frac{an + b}{c}\rfloor-1} [j+1 \leq \lfloor\frac{ai + b}{c}\rfloor] \\\&= \sum\limits_{j=0}^{\lfloor\frac{an + b}{c}\rfloor-1}\sum\limits_{i=0}^{n} [c(j+1) <ai + b + 1] \\\&= \sum\limits_{j=0}^{\lfloor\frac{an + b}{c}\rfloor-1}\sum\limits_{i=0}^{n} [i > \frac{cj+c-b-1}{a}] \\\&= \sum\limits_{j=0}^{\lfloor\frac{an + b}{c}\rfloor-1}(n - \lfloor \frac{cj+c-b-1}{a} \rfloor) \\\&= n \cdot \lfloor\frac{an + b}{c}\rfloor - \sum\limits_{j=0}^{\lfloor\frac{an + b}{c}\rfloor-1}\lfloor \frac{cj+c-b-1}{a} \rfloor \\\&= n \cdot \lfloor\frac{an + b}{c}\rfloor - f(c, c - b - 1, a, \lfloor\frac{an + b}{c}\rfloor-1)\end{aligned}</script><p>递归计算即可 复杂度一个 $\log$ </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;类欧几里得算法用来求诸如此类问题：&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
f(a,b,c,n)=\sum\limits_{i=0}^{n} \lfloor\frac{ai + b}{c}\rfloor&lt;/script&gt;
    
    </summary>
    
      <category term="算法笔记" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="数论" scheme="http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="类欧几里得算法" scheme="http://yoursite.com/tags/%E7%B1%BB%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>杜教筛学习笔记</title>
    <link href="http://yoursite.com/2019/03/01/%E6%9D%9C%E6%95%99%E7%AD%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/03/01/杜教筛学习笔记/</id>
    <published>2019-03-01T11:13:21.000Z</published>
    <updated>2019-03-01T11:42:31.618Z</updated>
    
    <content type="html"><![CDATA[<p>设现在要求积性函数 $f$ 的前缀和， 设  $\sum \limits_{i=1}^{n} f(i) = S(n)$。</p><p>再找一个积性函数 $g$ ，则考虑它们的狄利克雷卷积的前缀和</p><script type="math/tex; mode=display">\begin{aligned} \sum\limits_{i=1}^{n}(f*g)(i)&= \sum\limits_{i=1}^{n} \sum \limits _{d|i} f(d)g(\frac{i}{d}) \\\ &= \sum \limits _{d=1}^{n} g(d)\sum\limits _{i=1}^{\lfloor \frac{n}{d}\rfloor } f(i) \\\&= \sum \limits _{d=1}^{n} g(d) S(\lfloor \frac{n}{d} \rfloor)     \end{aligned}</script><p>其中得到第一行是根据狄利克雷卷积的定义。</p><p>得到第二行则是先枚举 $d$ 提出 $g$ 。</p><p>得到第三行则是把 $\sum\limits _{i=1}^{\lfloor \frac{n}{d}\rfloor } f(i) $ 替换为 $S(\lfloor \frac{n}{d} \rfloor) $</p><p>接着考虑 $g(1)S(n)$ 等于什么。</p><p>可以发现，他就等于 </p><script type="math/tex; mode=display">\sum \limits _{i=1}^{n} g(i) S(\lfloor \frac{n}{i} \rfloor) - \sum \limits _{i=2}^{n} g(i) S(\lfloor \frac{n}{i} \rfloor)</script><p>（可以理解成从1开始的前缀和减去从2开始的前缀和就是第一项）</p><p>前面这个式子 $\sum \limits _{i=1}^{n} g(i) S(\lfloor \frac{n}{i} \rfloor)$  </p><p>根据刚才的推导，他就等于 $\sum\limits_{i=1}^{n}(f*g)(i)$</p><p>所以得到杜教筛的核心式子：</p><script type="math/tex; mode=display">g(1)S(n)=\sum\limits_{i=1}^{n}(f*g)(i) - \sum \limits _{i=2}^{n} g(i) S(\lfloor \frac{n}{i} \rfloor)</script><p>得到这个式子之后有什么用呢？</p><p>现在如果可以找到一个合适的积性函数 $g$ ，使得可以快速算出 $\sum\limits_{i=1}^{n}(f*g)(i)$ 和 $g$ 的前缀和，便可以用数论分块递归地求解。</p><p>代码按照理解大概可以写成这样（默认 <code>ll</code> 为 <code>long long</code>）<br>（可以理解成一个伪代码。。就是一个思路的框架）<br><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function">ll <span class="hljs-title">GetSum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123; <span class="hljs-comment">// 算 f 前缀和的函数</span></span><br><span class="line">  ll ans = f_g_sum(n); <span class="hljs-comment">// 算 f * g 的前缀和</span></span><br><span class="line">  <span class="hljs-comment">// 以下这个 for 循环是数论分块</span></span><br><span class="line">  <span class="hljs-keyword">for</span>(ll l = <span class="hljs-number">2</span>, r; l &lt;= n; l = r + <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// 注意从 2 开始</span></span><br><span class="line">    r = (n / (n / l)); </span><br><span class="line">    ans -= (g_sum(r) - g_sum(l - <span class="hljs-number">1</span>)) * GetSum(n / l);</span><br><span class="line">    <span class="hljs-comment">// g_sum 是 g 的前缀和</span></span><br><span class="line">    <span class="hljs-comment">// 递归 GetSum 求解</span></span><br><span class="line">  &#125; <span class="hljs-keyword">return</span> ans; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个代码的复杂度是 $O(n^{\frac{3}{4}})$，证明如下：</p><p>设求出 $S(n)$ 的复杂度是 $T(n)$ ，要求出 $S(n)$ 需要求出 $\sqrt n$ 个 $S (\lfloor \frac{n}{i} \rfloor)$ 的值，结合数论分块的复杂度 $O(\sqrt n)$ 可得：</p><script type="math/tex; mode=display">T(n) = \sum\limits_{i=1}^{\sqrt n} O(\sqrt i) + O(\sqrt {\frac{n}{i}})=O(n^{\frac{3}{4}})</script><p>还可以进一步优化杜教筛，即先线性筛出前 $m$ 个答案，之后再用杜教筛。这个优化之后的复杂度是：</p><script type="math/tex; mode=display">T(n) = \sum\limits_{i=1}^{\lfloor \frac{n}{m} \rfloor} \sqrt \frac{n}{i} = O({\frac{n}{\sqrt m}})</script><p>当 $m = n ^ {\frac{2}{3}}$ 时，$T(n) = O(n^{\frac{2}{3}})$</p><p>可以使用哈希表来存下已经求过的答案，也可以不用。</p><p>考虑到上面的求和过程中出现的都是 $\lfloor \frac{n}{i} \rfloor $ 。开一个大小为两倍 $\sqrt n$ 的数组 $dp$ 记录答案。如果现在需要求出 <code>GetSum(x)</code> ，若 $x \leq \sqrt n$ ，返回 <code>dp[x]</code> ，否则返回 <code>dp[sqrt n + n / i]</code> 即可。这样可以省去哈希表的复杂度。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;设现在要求积性函数 $f$ 的前缀和， 设  $\sum \limits_{i=1}^{n} f(i) = S(n)$。&lt;/p&gt;
&lt;p&gt;再找一个积性函数 $g$ ，则考虑它们的狄利克雷卷积的前缀和&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=displ
      
    
    </summary>
    
      <category term="算法笔记" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="数论" scheme="http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="杜教筛" scheme="http://yoursite.com/tags/%E6%9D%9C%E6%95%99%E7%AD%9B/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ3160 万径人踪灭</title>
    <link href="http://yoursite.com/2019/02/28/BZOJ3160/"/>
    <id>http://yoursite.com/2019/02/28/BZOJ3160/</id>
    <published>2019-02-28T10:58:37.000Z</published>
    <updated>2019-02-28T11:26:48.938Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>给定一个字符串由 ‘a’ 或 ‘b’ 组成。求有多少个子序列满足字母和坐标都关于一条对称轴对称并且不是连续的</p><p>字符串长度 $=n \leq 10^5$</p><a id="more"></a> <h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>默认字符串为 $S$ 从 $0$ 开始标号。 </p><p>答案等于所有的满足字母和坐标都关于一条对称轴对称的子序列数量 - 连续的满足这个性质的子序列数量</p><p>后面这个可以直接用 <strong>manacher算法</strong> 直接求出，只需要考虑前面怎么求</p><p>考虑怎么算出关于第 $i$ 个位置对称的子序列个数。设有 $k$ 组 $(x, y)$ 使得 $x + y = 2 i$ 且 $x, y \not= i$ 且 $S_x = S_y$ ，那么方案数就是 $2^{k+1}-1$ （k 组和 $i$ 这个位置选不选减去都不选的一种情况）</p><p>考虑怎么算出关于第 $i$ 到第 $i+1$ 个位置中间这个空隙（可以认为是 $i + \frac{1}{2}$）对称的子序列的个数。设有 $k$ 组 $(x,y)$ 满足 $S_x = S_y$ 且 $x+y = 2(i+\frac{1}{2}) = 2i + 1$ ，那么方案数就是 $2^k - 1$（和上面不一样的原因是自己这个位置不是整数不能被选所以不用考虑）</p><p>令 $ f_i = \sum\limits_{x+y=i} [S_x=S_y] $ ，那么 $f_i$ 和这个 $k$ 的关系是什么呢？</p><p>这里要想清楚。当 $i$ 是偶数的时候，$[S_{\frac{i}{2}}=S_{\frac{i}{2}}]$ 其实也被算了进去，所以应该是 $f_i = 2k + 1$；而 $i$ 是奇数的时候就没有这个问题，直接就是 $f_i = 2k$；综合一下其实就是 $k = \lfloor \frac{f_i}{2} \rfloor$</p><p>然后就是怎么求 $f_i$ 的问题了。这是一个卷积的形式，又显然字母之间是独立的。那么对于每一个字母 $x$，令 $g_i = [S_i = x]$，那么 $f$ 就是由两个 $g$ 卷积得到的。所以最后 f 就是对于两个字母分别做一遍卷积加起来就行。</p><p>具体的，这道题的做法是：</p><ol><li>拿到字符串，跑 manacher 得到 s1 </li><li>令 $f_i = [S_i = a]$，将 $f * f$ 加到多项式 $h$ 中</li><li>令 $g_i = [S_i = b]$，将 $g * g$ 加到多项式 $h$ 中</li><li>答案就相当于 $ \sum\limits_{i=0}^{2n -  2} (2^{\lfloor\frac{h_i}{2}\rfloor + [2|i]}-1)$ （可能有点复杂不过综合上面来看是显然的）</li></ol><p>对于卷积，我用的是 <strong>NTT</strong> (FFT 我也写了，慢了 4 倍嘿嘿)</p><p>时间复杂度 $O(n \log n)$</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Author: AcFunction</span></span><br><span class="line"><span class="hljs-comment"> * Date:   2019-02-26 22:14:41</span></span><br><span class="line"><span class="hljs-comment"> * Email:  3486942970@qq.com</span></span><br><span class="line"><span class="hljs-comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> db double </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> RG register </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, l, r) for(RG int i = l; i &lt;= r; i++) </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> per(i, r, l) for(RG int i = r; i &gt;= l; i--)</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">INIT</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  ios :: sync_with_stdio(<span class="hljs-literal">false</span>); <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1001000</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> ll mod = (ll)<span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>; </span><br><span class="line"><span class="hljs-keyword">const</span> ll MOD = <span class="hljs-number">998244353</span>; </span><br><span class="line"><span class="hljs-keyword">const</span> ll G = <span class="hljs-number">3</span>; </span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> n, len[N], r[N], L; </span><br><span class="line"><span class="hljs-keyword">char</span> S[N]; <span class="hljs-built_in">string</span> s; </span><br><span class="line">ll f[N], g[N], tmp[N], Ans[N], invl;  </span><br><span class="line"></span><br><span class="line"><span class="hljs-function">ll <span class="hljs-title">fpw</span><span class="hljs-params">(ll x, ll k, ll p)</span> </span>&#123;</span><br><span class="line">  ll ret = <span class="hljs-number">1l</span>l; </span><br><span class="line">  <span class="hljs-keyword">while</span>(k) &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(k &amp; <span class="hljs-number">1</span>) ret = ret * x % p; </span><br><span class="line">    x = x * x % p; k &gt;&gt;= <span class="hljs-number">1</span>; </span><br><span class="line">  &#125; <span class="hljs-keyword">return</span> ret; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">NTT</span><span class="hljs-params">(ll *a, <span class="hljs-keyword">int</span> op)</span> </span>&#123;</span><br><span class="line">  rep(i, <span class="hljs-number">0</span>, L - <span class="hljs-number">1</span>) tmp[i] = a[r[i]]; </span><br><span class="line">  rep(i, <span class="hljs-number">0</span>, L - <span class="hljs-number">1</span>) a[i] = tmp[i]; </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; L; i &lt;&lt;= <span class="hljs-number">1</span>) &#123;</span><br><span class="line">    ll w = fpw(G, (MOD - <span class="hljs-number">1</span>) / (i &lt;&lt; <span class="hljs-number">1</span>), MOD);</span><br><span class="line">    <span class="hljs-keyword">if</span>(op == <span class="hljs-number">-1</span>) w = fpw(w, MOD - <span class="hljs-number">2</span>, MOD); </span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; L; j += i &lt;&lt; <span class="hljs-number">1</span>) &#123;</span><br><span class="line">      ll wn = <span class="hljs-number">1l</span>l; </span><br><span class="line">      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = j; k &lt; i + j; k++) &#123;</span><br><span class="line">        ll t = a[i + k] * wn % MOD; </span><br><span class="line">        a[i + k] = (a[k] - t + MOD) % MOD; </span><br><span class="line">        a[k] = (a[k] + t) % MOD; wn = wn * w % MOD; </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">if</span>(op == <span class="hljs-number">-1</span>) &#123;</span><br><span class="line">    rep(i, <span class="hljs-number">0</span>, L - <span class="hljs-number">1</span>) </span><br><span class="line">      a[i] *= invl, a[i] %= MOD; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  INIT(); </span><br><span class="line">  <span class="hljs-built_in">cin</span> &gt;&gt; (S + <span class="hljs-number">1</span>); n = <span class="hljs-built_in">strlen</span>(S + <span class="hljs-number">1</span>);</span><br><span class="line">  s = <span class="hljs-string">"^#"</span>; </span><br><span class="line">  rep(i, <span class="hljs-number">1</span>, n) &#123;</span><br><span class="line">    s += S[i]; s += <span class="hljs-string">'#'</span>; </span><br><span class="line">  &#125; <span class="hljs-keyword">int</span> mx = <span class="hljs-number">0</span>, id = <span class="hljs-number">0</span>; </span><br><span class="line">  rep(i, <span class="hljs-number">1</span>, <span class="hljs-number">2</span> * n + <span class="hljs-number">1</span>) &#123;</span><br><span class="line">    len[i] = mx &gt; i ? min(len[<span class="hljs-number">2</span> * id - i], mx - i) : <span class="hljs-number">1</span>; </span><br><span class="line">    <span class="hljs-keyword">while</span>(s[i - len[i]] == s[i + len[i]]) len[i]++; </span><br><span class="line">    <span class="hljs-keyword">if</span>(mx &lt; i + len[i]) mx = i + len[i], id = i; </span><br><span class="line">  &#125;</span><br><span class="line">  ll ans = <span class="hljs-number">0</span>; </span><br><span class="line">  rep(i, <span class="hljs-number">1</span>, <span class="hljs-number">2</span> * n + <span class="hljs-number">1</span>) ans += len[i] / <span class="hljs-number">2</span>, ans %= mod; </span><br><span class="line">  L = <span class="hljs-number">1</span>; <span class="hljs-keyword">while</span>(L &lt;= <span class="hljs-number">2</span> * n) L &lt;&lt;= <span class="hljs-number">1</span>; </span><br><span class="line">  invl = fpw(L, MOD - <span class="hljs-number">2</span>, MOD); </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; L; i &lt;&lt;= <span class="hljs-number">1</span>)</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++)</span><br><span class="line">      r[i + j] = r[j] + L / (i * <span class="hljs-number">2</span>); </span><br><span class="line">  rep(i, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>) f[i] = (S[i + <span class="hljs-number">1</span>] == <span class="hljs-string">'a'</span>); </span><br><span class="line">  rep(i, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>) g[i] = f[i]; </span><br><span class="line">  NTT(f, <span class="hljs-number">1</span>), NTT(g, <span class="hljs-number">1</span>); </span><br><span class="line">  rep(i, <span class="hljs-number">0</span>, L - <span class="hljs-number">1</span>) Ans[i] = f[i] * g[i] % MOD; </span><br><span class="line">  rep(i, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>) f[i] = (S[i + <span class="hljs-number">1</span>] == <span class="hljs-string">'b'</span>); </span><br><span class="line">  rep(i, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>) g[i] = f[i];  </span><br><span class="line">  rep(i, n, L - <span class="hljs-number">1</span>) f[i] = g[i] = <span class="hljs-number">0</span>; </span><br><span class="line">  NTT(f, <span class="hljs-number">1</span>), NTT(g, <span class="hljs-number">1</span>); </span><br><span class="line">  rep(i, <span class="hljs-number">0</span>, L - <span class="hljs-number">1</span>) Ans[i] += f[i] * g[i] % MOD, Ans[i] %= MOD;</span><br><span class="line">  NTT(Ans, <span class="hljs-number">-1</span>); ll anss = <span class="hljs-number">0</span>;</span><br><span class="line">  rep(i, <span class="hljs-number">0</span>, <span class="hljs-number">2</span> * n - <span class="hljs-number">2</span>) &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> t = Ans[i]; </span><br><span class="line">    t = t / <span class="hljs-number">2</span>; </span><br><span class="line">    <span class="hljs-keyword">if</span>(i &amp; <span class="hljs-number">1</span>) &#123;</span><br><span class="line">      anss += (fpw(<span class="hljs-number">2</span>, t, mod) - <span class="hljs-number">1</span>) % mod; anss %= mod; </span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> anss += (fpw(<span class="hljs-number">2</span>, t + <span class="hljs-number">1</span>, mod) - <span class="hljs-number">1</span>) % mod; anss %= mod; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-built_in">cout</span> &lt;&lt; ((anss - ans) % mod + mod) % mod &lt;&lt; <span class="hljs-built_in">endl</span>; </span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h1&gt;&lt;p&gt;给定一个字符串由 ‘a’ 或 ‘b’ 组成。求有多少个子序列满足字母和坐标都关于一条对称轴对称并且不是连续的&lt;/p&gt;
&lt;p&gt;字符串长度 $=n \leq 10^5$&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="manacher" scheme="http://yoursite.com/tags/manacher/"/>
    
      <category term="FFT" scheme="http://yoursite.com/tags/FFT/"/>
    
      <category term="NTT" scheme="http://yoursite.com/tags/NTT/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ3091 城市旅行</title>
    <link href="http://yoursite.com/2019/02/21/BZOJ3091/"/>
    <id>http://yoursite.com/2019/02/21/BZOJ3091/</id>
    <published>2019-02-21T14:44:18.000Z</published>
    <updated>2019-02-21T14:50:27.888Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>给一颗以 $1$ 为根的有根树，维护以下操作</p><ol><li>连接 $(u,v)$ 这条边</li><li>删除 $(u,v)$ 这条边</li><li>给 $u$ 到 $v$ 的链上每个点加上一个数</li><li>求在 $(u,v)$ 上任意选两个点它们之间的权值和的期望</li></ol><p>$n, m \leq 50000, a_i \leq 10^6$</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>前三个操作就是 LCT 板子，考虑如何在 LCT 上维护 4 操作</p><p>为了方便，设这个路径是 $a_1, a_2, a_3, \cdots, a_{siz}$ ，其中 $siz$ 是长度</p><p>考虑每个点的贡献，易得我们要求的期望值 $=\frac{\sum\limits_{i=1}^{siz} i (siz - i + 1)a_i}{\frac{siz(siz+1)}{2}}$ </p><p>显然这个分母很好搞，只需要考虑怎么在 LCT 上维护分子，或者说在平衡树上。</p><p>也就是说，如果知道左子和右子的答案如何更新出这个点的答案</p><p>设左子表示 $a_1, a_2, \cdots, a_p$， 该点的值是 $a_{p+1}$ ，右子表示 $a_{p+2}, \cdots, a_{siz}$ </p><p>可以得到：左子的 $siz_0 = p$，右子的 $siz_1 = siz - p - 1$</p><p>改点要的答案减去左子的答案减去右子的答案便是 </p><p>$\sum\limits_{i=1}^{siz}i(siz - i + 1)a_i - \sum\limits_{i=1}^{p}i(p-i+1)a_i-\sum\limits_{i=p+2}^{siz} (i-p-1)(siz - i + 1)a_i$</p><p>$=\sum\limits_{i=1}^{p} i(siz-p)a_i+a_{p+1}(p+1)(siz-p)+\sum\limits_{i=p+2}^{siz}(p+1)(siz-i+1)a_i$</p><p>根据上面得到的 $siz_0=p,siz_1=siz-p-1$ 简单化简一下可以得到</p><p>$=(siz_1+1)\sum\limits_{i=1}^{siz_0}i\cdot a_i+a_{siz_0+1}(siz_0+1)(siz_1+1)+(siz_0+1)\sum\limits_{i=p+2}^{siz}(siz - i +1)a_i$</p><p>到这里应该你已经知道怎么做了..</p><p>为了清楚，再令 </p><p>$b_1, b_2, \cdots,b_{siz_b}$ 是左子的， $c_1, c_2, \cdots,c_{siz_c}$ 是右子的，$d$ 是这个点本身的值。那么可以化简成简单清楚对称的形式：</p><p>$=(siz_c+1)\sum\limits_{i=1}^{siz_b}i\cdot b_i+d(siz_b+1)(siz_c+1)+(siz_b+1)\sum\limits_{i=1}^{siz_c}(siz_c-i+1)c_i$</p><p>你只需要每个点再维护两个值：</p><p>$ls=\sum\limits_{i=1}^{siz}i\cdot a_i$ 和 $rs=\sum\limits_{i=1}^{siz}(siz - i +1)a_i$ </p><p>就可以从左右两个儿子得到自己的值</p><p>这两个东西维护还是比较简单的..具体的话就是再维护一个 $s$ 为子树里所有数的和然后令 $b,c$ 是左右两个儿子，那么有</p><p>$ls = ls_b+d\cdot(siz_b+1)+ls_c+s_c (siz_b+1)$</p><p>和</p><p>$rs=rs_c+d\cdot(siz_c+1)+rs_b+s_b(siz_c+1)$ </p><p>就这样维护</p><p>以上是如何用左右儿子的信息得到自己，再来考虑链加的问题</p><p>一条链加上一个数 $x$ ，那么会如何影响我们维护的值？</p><ul><li>对于 $s$：$s = s + siz\cdot x$</li><li>对于 $ls$：$ls = ls + \sum\limits_{i=1}^{siz}i \cdot x = ls + \frac{siz(siz+1)}{2}\cdot x$</li><li>对于 $rs$：和 ls 一样 $rs = rs+\frac{siz(siz+1)}{2}\cdot x$</li><li>对于最后的答案 $S$：$S = S + \sum\limits_{i=1}^{siz} i \cdot (siz - i +1)\cdot x$ 通过简单计算可得 $S= S+\frac{siz(siz+1)(siz+2)}{6}\cdot x$</li><li>对于自己的值：直接加上 $x$ （废话）</li></ul><p>然后 LCT 板子套一套就做完了</p><p>注意事项：</p><ul><li>翻转的时候需要 swap(ls, rs)</li><li>两个点之间是联通的时候才执行链加操作（坑死我了）</li></ul><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Author: AcFunction</span></span><br><span class="line"><span class="hljs-comment"> * Date:   2019-02-17 11:17:08</span></span><br><span class="line"><span class="hljs-comment"> * Email:  3486942970@qq.com</span></span><br><span class="line"><span class="hljs-comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">200200</span>; </span><br><span class="line"><span class="hljs-keyword">const</span> ll INF = (ll)<span class="hljs-number">1e18</span>; </span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> n, m;</span><br><span class="line">ll a[N]; </span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">int</span> rev; </span><br><span class="line">  ll d, s, ls, rs, s1, add, siz; </span><br><span class="line">  node *ch[<span class="hljs-number">2</span>], *prt;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">isr</span><span class="hljs-params">()</span> </span>&#123; </span><br><span class="line">    <span class="hljs-keyword">return</span> (!prt) || ( prt-&gt;ch[<span class="hljs-number">0</span>] != (<span class="hljs-keyword">this</span>) &amp;&amp; prt-&gt;ch[<span class="hljs-number">1</span>] != (<span class="hljs-keyword">this</span>) ); </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dir</span><span class="hljs-params">()</span> </span>&#123; </span><br><span class="line">    <span class="hljs-keyword">return</span> prt-&gt;ch[<span class="hljs-number">1</span>] == (<span class="hljs-keyword">this</span>); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setc</span><span class="hljs-params">(node *p, <span class="hljs-keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    (<span class="hljs-keyword">this</span>)-&gt;ch[k] = p; </span><br><span class="line">    <span class="hljs-keyword">if</span>(p) p-&gt;prt = (<span class="hljs-keyword">this</span>); </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setr</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    rev ^= <span class="hljs-number">1</span>; </span><br><span class="line">    swap(ls, rs);</span><br><span class="line">    swap(ch[<span class="hljs-number">0</span>], ch[<span class="hljs-number">1</span>]); </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">seta</span><span class="hljs-params">(ll x)</span> </span>&#123;</span><br><span class="line">    d += x, add += x; s += siz * x; </span><br><span class="line">    ls += siz * (siz + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span> * x; </span><br><span class="line">    rs += siz * (siz + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span> * x; </span><br><span class="line">    s1 += siz * (siz + <span class="hljs-number">1</span>) * (siz + <span class="hljs-number">2</span>) / <span class="hljs-number">6</span> * x; </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">()</span> </span>&#123; </span><br><span class="line">    siz = <span class="hljs-number">1</span>, s = d; </span><br><span class="line">    <span class="hljs-keyword">if</span>(ch[<span class="hljs-number">0</span>]) siz += ch[<span class="hljs-number">0</span>]-&gt;siz, s += ch[<span class="hljs-number">0</span>]-&gt;s; </span><br><span class="line">    <span class="hljs-keyword">if</span>(ch[<span class="hljs-number">1</span>]) siz += ch[<span class="hljs-number">1</span>]-&gt;siz, s += ch[<span class="hljs-number">1</span>]-&gt;s; </span><br><span class="line">    <span class="hljs-keyword">if</span>(ch[<span class="hljs-number">0</span>] &amp;&amp; ch[<span class="hljs-number">1</span>]) &#123;</span><br><span class="line">      ls = ch[<span class="hljs-number">0</span>]-&gt;ls + d * (ch[<span class="hljs-number">0</span>]-&gt;siz + <span class="hljs-number">1</span>) + ch[<span class="hljs-number">1</span>]-&gt;ls + ch[<span class="hljs-number">1</span>]-&gt;s * (ch[<span class="hljs-number">0</span>]-&gt;siz + <span class="hljs-number">1</span>); </span><br><span class="line">      rs = ch[<span class="hljs-number">1</span>]-&gt;rs + d * (ch[<span class="hljs-number">1</span>]-&gt;siz + <span class="hljs-number">1</span>) + ch[<span class="hljs-number">0</span>]-&gt;rs + ch[<span class="hljs-number">0</span>]-&gt;s * (ch[<span class="hljs-number">1</span>]-&gt;siz + <span class="hljs-number">1</span>);</span><br><span class="line">      s1 = ch[<span class="hljs-number">0</span>]-&gt;s1 + ch[<span class="hljs-number">1</span>]-&gt;s1;</span><br><span class="line">      s1 += ch[<span class="hljs-number">0</span>]-&gt;ls * (ch[<span class="hljs-number">1</span>]-&gt;siz + <span class="hljs-number">1</span>);</span><br><span class="line">      s1 += ch[<span class="hljs-number">1</span>]-&gt;rs * (ch[<span class="hljs-number">0</span>]-&gt;siz + <span class="hljs-number">1</span>); </span><br><span class="line">      s1 += d * (ch[<span class="hljs-number">0</span>]-&gt;siz + <span class="hljs-number">1</span>) * (ch[<span class="hljs-number">1</span>]-&gt;siz + <span class="hljs-number">1</span>);  </span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ch[<span class="hljs-number">0</span>]) &#123;</span><br><span class="line">      ls = ch[<span class="hljs-number">0</span>]-&gt;ls + d * (ch[<span class="hljs-number">0</span>]-&gt;siz + <span class="hljs-number">1</span>); </span><br><span class="line">      rs = d + ch[<span class="hljs-number">0</span>]-&gt;rs + ch[<span class="hljs-number">0</span>]-&gt;s; </span><br><span class="line">      s1 = ch[<span class="hljs-number">0</span>]-&gt;s1 + ch[<span class="hljs-number">0</span>]-&gt;ls + d * (ch[<span class="hljs-number">0</span>]-&gt;siz + <span class="hljs-number">1</span>); </span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ch[<span class="hljs-number">1</span>]) &#123;</span><br><span class="line">      ls = d + ch[<span class="hljs-number">1</span>]-&gt;ls + ch[<span class="hljs-number">1</span>]-&gt;s; </span><br><span class="line">      rs = d * (ch[<span class="hljs-number">1</span>]-&gt;siz + <span class="hljs-number">1</span>) + ch[<span class="hljs-number">1</span>]-&gt;rs; </span><br><span class="line">      s1 = ch[<span class="hljs-number">1</span>]-&gt;s1 + ch[<span class="hljs-number">1</span>]-&gt;rs + d * (ch[<span class="hljs-number">1</span>]-&gt;siz + <span class="hljs-number">1</span>); </span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">      ls = rs = s1 = d; </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(rev) &#123;</span><br><span class="line">      <span class="hljs-keyword">if</span>(ch[<span class="hljs-number">0</span>]) ch[<span class="hljs-number">0</span>]-&gt;setr();</span><br><span class="line">      <span class="hljs-keyword">if</span>(ch[<span class="hljs-number">1</span>]) ch[<span class="hljs-number">1</span>]-&gt;setr(); </span><br><span class="line">      rev = <span class="hljs-number">0</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span>(add) &#123;</span><br><span class="line">      <span class="hljs-keyword">if</span>(ch[<span class="hljs-number">0</span>]) ch[<span class="hljs-number">0</span>]-&gt;seta(add);</span><br><span class="line">      <span class="hljs-keyword">if</span>(ch[<span class="hljs-number">1</span>]) ch[<span class="hljs-number">1</span>]-&gt;seta(add); </span><br><span class="line">      add = <span class="hljs-number">0</span>; </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125; pool[N * <span class="hljs-number">2</span>], *P[N], *cur = pool;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function">node *<span class="hljs-title">New</span><span class="hljs-params">(ll d)</span> </span>&#123; </span><br><span class="line">  node *p = cur++; </span><br><span class="line">  p-&gt;d = d, p-&gt;ls = p-&gt;rs = d; </span><br><span class="line">  p-&gt;s = p-&gt;s1 = d; </span><br><span class="line">  p-&gt;prt = p-&gt;ch[<span class="hljs-number">0</span>] = p-&gt;ch[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>; </span><br><span class="line">  p-&gt;siz = <span class="hljs-number">1</span>; </span><br><span class="line">  <span class="hljs-keyword">return</span> p; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">rotate</span><span class="hljs-params">(node *p)</span> </span>&#123;</span><br><span class="line">  node *prt = p-&gt;prt; <span class="hljs-keyword">int</span> k = p-&gt;dir(); </span><br><span class="line">  <span class="hljs-keyword">if</span>(!prt-&gt;isr()) prt-&gt;prt-&gt;setc(p, prt-&gt;dir()); </span><br><span class="line">  <span class="hljs-keyword">else</span> p-&gt;prt = prt-&gt;prt; prt-&gt;setc(p-&gt;ch[!k], k); </span><br><span class="line">  p-&gt;setc(prt, !k); prt-&gt;upd(); p-&gt;upd();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">node *sta[N]; <span class="hljs-keyword">int</span> top; </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">splay</span><span class="hljs-params">(node *p)</span> </span>&#123;</span><br><span class="line">  node *q = p;</span><br><span class="line">  <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) &#123; </span><br><span class="line">    sta[++top] = q; </span><br><span class="line">    <span class="hljs-keyword">if</span>(q-&gt;isr()) <span class="hljs-keyword">break</span> ;  </span><br><span class="line">    q = q-&gt;prt; </span><br><span class="line">  &#125; </span><br><span class="line">  <span class="hljs-keyword">while</span>(top) </span><br><span class="line">    (sta[top--])-&gt;push(); </span><br><span class="line">  <span class="hljs-keyword">while</span>(!p-&gt;isr()) &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(p-&gt;prt-&gt;isr()) rotate(p); </span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(p-&gt;dir() == p-&gt;prt-&gt;dir()) rotate(p-&gt;prt), rotate(p); </span><br><span class="line">    <span class="hljs-keyword">else</span> rotate(p), rotate(p); </span><br><span class="line">  &#125; p-&gt;upd(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function">node *<span class="hljs-title">access</span><span class="hljs-params">(node *p)</span> </span>&#123;</span><br><span class="line">  node *q = <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-keyword">for</span>(; p; p = p-&gt;prt) &#123;</span><br><span class="line">    splay(p); </span><br><span class="line">    p-&gt;ch[<span class="hljs-number">1</span>] = q; </span><br><span class="line">    (q = p)-&gt;upd(); </span><br><span class="line">  &#125; <span class="hljs-keyword">return</span> q; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mkroot</span><span class="hljs-params">(node *p)</span> </span>&#123; access(p); splay(p); p-&gt;setr(); p-&gt;push(); &#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">split</span> <span class="hljs-params">(node *p, node *q)</span> </span>&#123; mkroot(p); access(q); splay(p); &#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">link</span>  <span class="hljs-params">(node *p, node *q)</span> </span>&#123; mkroot(p); mkroot(q); q-&gt;prt = p; &#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">cut</span>   <span class="hljs-params">(node *p, node *q)</span> </span>&#123; split(p, q); p-&gt;ch[<span class="hljs-number">1</span>] = q-&gt;prt = <span class="hljs-number">0</span>; &#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> node *<span class="hljs-title">find</span><span class="hljs-params">(node *p)</span> </span>&#123; access(p); splay(p); <span class="hljs-keyword">while</span>(p-&gt;ch[<span class="hljs-number">0</span>]) p = p-&gt;ch[<span class="hljs-number">0</span>]; <span class="hljs-keyword">return</span> p; &#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">gcd</span><span class="hljs-params">(ll a, ll b)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> !b ? a : gcd(b, a % b); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lld"</span>, &amp;a[i]); </span><br><span class="line">    P[i] = New(a[i]); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> u, v; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>, &amp;u, &amp;v);</span><br><span class="line">    link(P[u], P[v]); </span><br><span class="line">  &#125; </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> op, u, v; ll d;  </span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d %d"</span>, &amp;op, &amp;u, &amp;v); </span><br><span class="line">    <span class="hljs-keyword">if</span>(op == <span class="hljs-number">1</span>) <span class="hljs-keyword">if</span>(find(P[u]) == find(P[v])) cut(P[u], P[v]);</span><br><span class="line">    <span class="hljs-keyword">if</span>(op == <span class="hljs-number">2</span>) <span class="hljs-keyword">if</span>(find(P[u]) != find(P[v])) link(P[u], P[v]); </span><br><span class="line">    <span class="hljs-keyword">if</span>(op == <span class="hljs-number">3</span>) &#123;</span><br><span class="line">      <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lld"</span>, &amp;d); </span><br><span class="line">      <span class="hljs-keyword">if</span>(find(P[u]) != find(P[v])) <span class="hljs-keyword">continue</span> ; <span class="hljs-comment">// important!</span></span><br><span class="line">      split(P[u], P[v]), P[u]-&gt;seta(d); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span>(op == <span class="hljs-number">4</span>) &#123;</span><br><span class="line">      <span class="hljs-keyword">if</span>(find(P[u]) != find(P[v])) &#123;</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"-1\n"</span>); </span><br><span class="line">        <span class="hljs-keyword">continue</span> ; </span><br><span class="line">      &#125;</span><br><span class="line">      split(P[u], P[v]); </span><br><span class="line">      ll ans = P[u]-&gt;s1; </span><br><span class="line">      ll t = P[u]-&gt;siz * (P[u]-&gt;siz + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>; </span><br><span class="line">      ll g = gcd(ans, t); </span><br><span class="line">      <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld/%lld\n"</span>, ans / g, t / g); </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h1&gt;&lt;p&gt;给一颗以 $1$ 为根的有根树，维护以下操作&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;连接 $(u,v)$ 这条边&lt;/li&gt;
&lt;li&gt;删除 $(u,v)$ 这条边&lt;/li&gt;
&lt;li&gt;给 $u$ 到 $v$ 的链上每个点加上一个数&lt;/li&gt;
&lt;li&gt;求在 $(u,v)$ 上任意选两个点它们之间的权值和的期望&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;$n, m \leq 50000, a_i \leq 10^6$&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="LCT" scheme="http://yoursite.com/tags/LCT/"/>
    
  </entry>
  
  <entry>
    <title>CF1110E Magic Stones</title>
    <link href="http://yoursite.com/2019/02/09/CF1110E/"/>
    <id>http://yoursite.com/2019/02/09/CF1110E/</id>
    <published>2019-02-09T01:52:27.000Z</published>
    <updated>2019-02-09T02:00:53.168Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>给出一个初始序列 $a$ 和一个目标序列 $b$，你可以对 $a$ 中的除去第一个和最后一个点之外的任意一个点 $i$ ，让 $a_i$ 变成 $a_{i-1}+a_{i+1}-a_i$ 。问是否能够通过若干次操作使得 a 变成 b</p><p>序列长度 $n \leq 10^5$ </p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p><del>我觉得这个题应该放在 A</del> </p><p>考虑一个序列 : a|b|c</p><p>对 b 进行操作：a|a+c-b|c</p><p>他的差分序列原来是：a-b | b-c</p><p>现在变成了：b-c | a-b</p><p>所以一次操作相当于是把差分数组里的相邻两个数给交换了位置</p><p>所以只用判断目标序列的差分数组排序后是否等于初始序列的差分数组</p><p>还有第一个数相不相等（比赛的时候没考虑这个 wa 了一发…）</p><p>时间复杂度瓶颈在排序（或者说判断相同）</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100100</span>; </span><br><span class="line"><span class="hljs-keyword">int</span> n, a[N], b[N]; </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;n); </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;a[i]);</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;b[i]);</span><br><span class="line">  <span class="hljs-keyword">if</span>(a[<span class="hljs-number">1</span>] != b[<span class="hljs-number">1</span>]) &#123; <span class="hljs-built_in">printf</span>(<span class="hljs-string">"No\n"</span>); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; &#125;</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) a[i] = a[i + <span class="hljs-number">1</span>] - a[i];</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) b[i] = b[i + <span class="hljs-number">1</span>] - b[i];</span><br><span class="line">  sort(a + <span class="hljs-number">1</span>, a + n), sort(b + <span class="hljs-number">1</span>, b + n);</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)</span><br><span class="line">    <span class="hljs-keyword">if</span>(a[i] != b[i]) &#123;</span><br><span class="line">      <span class="hljs-built_in">printf</span>(<span class="hljs-string">"No\n"</span>);</span><br><span class="line">      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">    &#125;</span><br><span class="line">  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Yes\n"</span>);</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h1&gt;&lt;p&gt;给出一个初始序列 $a$ 和一个目标序列 $b$，你可以对 $a$ 中的除去第一个和最后一个点之外的任意一个点 $i$ ，让 $a_i$ 变成 $a_{i-1}+a_{i+1}-a_i$ 。问是否能够通过若干次操作使得 a 变成 b&lt;/p&gt;
&lt;p&gt;序列长度 $n \leq 10^5$ &lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>CF1110F Nearest Leaf</title>
    <link href="http://yoursite.com/2019/02/09/CF1110F/"/>
    <id>http://yoursite.com/2019/02/09/CF1110F/</id>
    <published>2019-02-09T00:59:23.000Z</published>
    <updated>2019-02-09T01:42:55.597Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>给你一颗满足编号 = dfs 序的带边权的有根树。$m$ 次询问，每次给出 $v,l,r$ 求编号在 $[l,r]$ 中的叶子到 $v$ 节点的最短距离</p><p>$n,m \leq 5\times10^5,w \leq 10^9$ </p><a id="more"></a> <h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>如果我们知道 $u$ 节点到所有叶子的最短路，如何求出他的某一个儿子 $v$ 到所有叶子的最短路呢？</p><p>不妨设 $(u,v)$ 的边权是 $w$ 。那么在 $v$ 这颗子树内的叶子到 $v$ 的距离较 $u$ 要减少 $w$ ； $v$ 这颗子树外的叶子到 $v$ 的距离较 $u$ 要增加 $w$ 。</p><p>又良心出题人给的树是满足那个性质的，所以子树内的编号是连续的。</p><p>所以最开始 dfs 一遍。求出每个点到根的距离。把询问离线，进行一次先序遍历。</p><p>每次进入到一颗子树，就用线段树把该子树内的叶子减少 w 外面的增加 w</p><p>当回溯的父亲的时候，就用线段树把该子树内的叶子增加 w 外面的减少 w</p><p>然后遍历到一个节点就把和他有关的询问全都用线段树里的信息处理掉就行了</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><p>我的实现貌似有点麻烦…我直接用线段树维护叶子，所以每次给出的左右端点还要在叶子序列里二分一下</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI pair</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Fi first</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Se second</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 1000000000000000000</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">500500</span>; </span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> n, m, siz[N]; ll dis[N], ans[N];</span><br><span class="line"><span class="hljs-built_in">vector</span> &lt;<span class="hljs-keyword">int</span>&gt; lea;  </span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span> &#123;</span></span><br><span class="line">  <span class="hljs-keyword">int</span> v; ll w; </span><br><span class="line">  edge *next; </span><br><span class="line">&#125; pol[N * <span class="hljs-number">2</span>], *head[N], *cu = pol;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, ll w)</span> </span>&#123;</span><br><span class="line">  edge *p = cu++, *q = cu++;</span><br><span class="line">  p-&gt;v = v, p-&gt;w = w, p-&gt;next = head[u], head[u] = p;</span><br><span class="line">  q-&gt;v = u, q-&gt;w = w, q-&gt;next = head[v], head[v] = q; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> pre)</span> </span>&#123;</span><br><span class="line">  siz[u] = <span class="hljs-number">1</span>; <span class="hljs-keyword">bool</span> fla = <span class="hljs-number">1</span>; </span><br><span class="line">  <span class="hljs-keyword">for</span>(edge *p = head[u]; p; p = p-&gt;next) &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> v = p-&gt;v; <span class="hljs-keyword">if</span>(v == pre) <span class="hljs-keyword">continue</span> ; </span><br><span class="line">    fla = <span class="hljs-number">0</span>; dis[v] = dis[u] + p-&gt;w;  </span><br><span class="line">    dfs(v, u); siz[u] += siz[v]; </span><br><span class="line">  &#125; <span class="hljs-keyword">if</span>(fla) lea.push_back(u); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ST</span> &#123;</span></span><br><span class="line">  <span class="hljs-keyword">int</span> l, r; </span><br><span class="line">  ll tag, mn; </span><br><span class="line">  ST *ch[<span class="hljs-number">2</span>]; </span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">seta</span><span class="hljs-params">(ll d)</span> </span>&#123;</span><br><span class="line">    tag += d; mn += d; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    mn = min(ch[<span class="hljs-number">0</span>]-&gt;mn, ch[<span class="hljs-number">1</span>]-&gt;mn); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(tag) &#123;</span><br><span class="line">      <span class="hljs-keyword">if</span>(ch[<span class="hljs-number">0</span>]) ch[<span class="hljs-number">0</span>]-&gt;seta(tag);</span><br><span class="line">      <span class="hljs-keyword">if</span>(ch[<span class="hljs-number">1</span>]) ch[<span class="hljs-number">1</span>]-&gt;seta(tag); </span><br><span class="line">      tag = <span class="hljs-number">0</span>; </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; pool[N * <span class="hljs-number">2</span>], *cur = pool, *rt; </span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(ST *p, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">  p-&gt;l = l, p-&gt;r = r; </span><br><span class="line">  <span class="hljs-keyword">if</span>(l == r) &#123;</span><br><span class="line">    p-&gt;mn = dis[lea[l - <span class="hljs-number">1</span>]]; </span><br><span class="line">    <span class="hljs-keyword">return</span> ; </span><br><span class="line">  &#125;</span><br><span class="line">  ST *ls = cur++, *rs = cur++;</span><br><span class="line">  p-&gt;ch[<span class="hljs-number">0</span>] = ls, p-&gt;ch[<span class="hljs-number">1</span>] = rs;</span><br><span class="line">  <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;  </span><br><span class="line">  build(ls, l, mid);</span><br><span class="line">  build(rs, mid + <span class="hljs-number">1</span>, r); </span><br><span class="line">  p-&gt;upd(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(ST *p, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, ll d)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">if</span>(l &gt; r) <span class="hljs-keyword">return</span> ; </span><br><span class="line">  <span class="hljs-keyword">if</span>(p-&gt;l == l &amp;&amp; p-&gt;r == r) </span><br><span class="line">    <span class="hljs-keyword">return</span> p-&gt;seta(d); </span><br><span class="line">  p-&gt;push(); </span><br><span class="line">  <span class="hljs-keyword">if</span>(p-&gt;ch[<span class="hljs-number">0</span>]-&gt;r &gt;= r) modify(p-&gt;ch[<span class="hljs-number">0</span>], l, r, d);</span><br><span class="line">  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(p-&gt;ch[<span class="hljs-number">1</span>]-&gt;l &lt;= l) modify(p-&gt;ch[<span class="hljs-number">1</span>], l, r, d); </span><br><span class="line">  <span class="hljs-keyword">else</span> modify(p-&gt;ch[<span class="hljs-number">0</span>], l, p-&gt;ch[<span class="hljs-number">0</span>]-&gt;r, d), </span><br><span class="line">       modify(p-&gt;ch[<span class="hljs-number">1</span>], p-&gt;ch[<span class="hljs-number">1</span>]-&gt;l, r, d);</span><br><span class="line">  p-&gt;upd(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">Qmin</span><span class="hljs-params">(ST *p, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">if</span>(l &gt; r) <span class="hljs-keyword">return</span> INF; p-&gt;push(); </span><br><span class="line">  <span class="hljs-keyword">if</span>(p-&gt;l == l &amp;&amp; p-&gt;r == r) </span><br><span class="line">    <span class="hljs-keyword">return</span> p-&gt;mn; </span><br><span class="line">  <span class="hljs-keyword">if</span>(p-&gt;ch[<span class="hljs-number">0</span>]-&gt;r &gt;= r) <span class="hljs-keyword">return</span> Qmin(p-&gt;ch[<span class="hljs-number">0</span>], l, r); </span><br><span class="line">  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(p-&gt;ch[<span class="hljs-number">1</span>]-&gt;l &lt;= l) <span class="hljs-keyword">return</span> Qmin(p-&gt;ch[<span class="hljs-number">1</span>], l, r);</span><br><span class="line">  <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> min(Qmin(p-&gt;ch[<span class="hljs-number">0</span>], l, p-&gt;ch[<span class="hljs-number">0</span>]-&gt;r), </span><br><span class="line">                  Qmin(p-&gt;ch[<span class="hljs-number">1</span>], p-&gt;ch[<span class="hljs-number">1</span>]-&gt;l, r)); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">vector</span> &lt; PI &lt;<span class="hljs-keyword">int</span>, PI &lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; &gt; &gt; Q[N]; </span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// emm 我还不太会用  lower_bound / upper_bound  所以就只能手写了..</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">up</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>, r = n - <span class="hljs-number">1</span>, ret = <span class="hljs-number">0</span>; </span><br><span class="line">  <span class="hljs-keyword">while</span>(l &lt;= r) &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span>(lea[mid] &lt;= x) </span><br><span class="line">      l = mid + <span class="hljs-number">1</span>, ret = mid;</span><br><span class="line">    <span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>; </span><br><span class="line">  &#125; <span class="hljs-keyword">return</span> ret + <span class="hljs-number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lw</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>, r = n - <span class="hljs-number">1</span>, ret = n - <span class="hljs-number">1</span>; </span><br><span class="line">  <span class="hljs-keyword">while</span>(l &lt;= r) &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>; </span><br><span class="line">    <span class="hljs-keyword">if</span>(lea[mid] &gt;= x)</span><br><span class="line">      r = mid - <span class="hljs-number">1</span>, ret = mid; </span><br><span class="line">    <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>; </span><br><span class="line">  &#125; <span class="hljs-keyword">return</span> ret + <span class="hljs-number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> pre)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; Q[u].size(); i++) &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> id = Q[u][i].Fi; </span><br><span class="line">    <span class="hljs-keyword">int</span> l = Q[u][i].Se.Fi;</span><br><span class="line">    <span class="hljs-keyword">int</span> r = Q[u][i].Se.Se; </span><br><span class="line">    <span class="hljs-comment">// printf("***%d %d %d\n", id, up(l), lw(r)); </span></span><br><span class="line">    ans[id] = Qmin(rt, lw(l), up(r));  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">for</span>(edge *p = head[u]; p; p = p-&gt;next) &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> v = p-&gt;v; <span class="hljs-keyword">if</span>(v == pre) <span class="hljs-keyword">continue</span> ; </span><br><span class="line">    <span class="hljs-keyword">int</span> L = lw(v), R = up(v + siz[v] - <span class="hljs-number">1</span>); </span><br><span class="line">    ll w = p-&gt;w; </span><br><span class="line">    <span class="hljs-comment">// printf("%d %d %d\n", v, L, R);</span></span><br><span class="line">    modify(rt, L, R, -w);</span><br><span class="line">    modify(rt, <span class="hljs-number">1</span>, L - <span class="hljs-number">1</span>, w);</span><br><span class="line">    modify(rt, R + <span class="hljs-number">1</span>, n, w); </span><br><span class="line">    solve(v, u); </span><br><span class="line">    modify(rt, L, R, w);</span><br><span class="line">    modify(rt, <span class="hljs-number">1</span>, L - <span class="hljs-number">1</span>, -w); </span><br><span class="line">    modify(rt, R + <span class="hljs-number">1</span>, n, -w); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> p; ll w; </span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %lld"</span>, &amp;p, &amp;w);</span><br><span class="line">    addedge(p, i, w); </span><br><span class="line">  &#125; dfs(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>); n = lea.size(); </span><br><span class="line">  sort(lea.begin(), lea.end()); </span><br><span class="line">  build(rt = cur++, <span class="hljs-number">1</span>, n);</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> v, l, r; </span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d %d"</span>, &amp;v, &amp;l, &amp;r);</span><br><span class="line">    Q[v].push_back(MP(i, MP(l, r))); </span><br><span class="line">  &#125; solve(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>, ans[i]); </span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h1&gt;&lt;p&gt;给你一颗满足编号 = dfs 序的带边权的有根树。$m$ 次询问，每次给出 $v,l,r$ 求编号在 $[l,r]$ 中的叶子到 $v$ 节点的最短距离&lt;/p&gt;
&lt;p&gt;$n,m \leq 5\times10^5,w \leq 10^9$ &lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="dfs序" scheme="http://yoursite.com/tags/dfs%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>「云玩家拯救计划」小题单</title>
    <link href="http://yoursite.com/2019/02/02/Cloud-Player-Rescue-Plan/"/>
    <id>http://yoursite.com/2019/02/02/Cloud-Player-Rescue-Plan/</id>
    <published>2019-02-02T06:20:23.000Z</published>
    <updated>2019-02-09T01:14:32.656Z</updated>
    
    <content type="html"><![CDATA[<p>云玩家拯救计划（雾</p><a id="more"></a><hr><h1 id="网络流"><a href="#网络流" class="headerlink" title="网络流"></a>网络流</h1><p><strong>A(CF1009G)</strong>：直接贪心，用二分图里的一个霍尔定理来判断合法性。实现上可以简单一点。</p><p><strong>B(CF808F)</strong>：先二分答案，观察到除了 2 以外所有质数由偶数+奇数得来。于是 check 就可以特判 1 + 1 的情况，建图最小割即可。</p><p><strong>C(CF164C)</strong>：把任务按照开始时间排序，S -&gt; 最小的开始时间 -&gt;  第二个 -&gt; .. -&gt; 第 n 个 -&gt; T 连流量 m 费用 0 ，再对于每个任务连一条从起点到终点加 1，流量 1 费用 -c 的边。然后最小费用最大流就好了。<del>我还是不会输出方案（捂脸</del> </p><p><strong>D(CF277E)</strong>：以前做过…写过<a href="https://acfcacfca.blog.luogu.org/solution-cf277e" target="_blank" rel="noopener">题解</a>…</p><p><strong>E(CF1082G)</strong>：把每个点和每条边算成一个点，边的权值是负的，然后最大权闭合子图</p><p><strong>F(BZOJ3158)</strong>： 考虑 % 4 可以证明奇数方+奇数方不等于完全平方，同时偶数的最大公约数 &gt; 1 所以奇数一边偶数一边建二分图然后就是套路的最小割了<br><strong>G(CF863F)</strong>：可以求出每个点的可行区间，然后那个平方的条件就可以拆边。就是 (1,1), (3,1), (5,1), (7,1) …. 然后最小费用最大流</p><p><strong>H(CF498C)</strong>：显然除质因子答案最大 &amp;&amp; 质因子之间相互独立。对于每一个出现过的质因子跑最大流就行了</p><hr><h1 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h1><p><strong>A(BZOJ2154)</strong> ：不妨设 $n \leq m$ </p><p>$\sum\limits_{i=1}^{n}\sum\limits_{j=1}^{m} lcm(i, j)$</p><p>$=\sum\limits_{i=1}^{n}\sum\limits_{j=1}^{m} \frac{ij}{\gcd(i,j)}$</p><p>$=\sum\limits_{d=1}^{n}\sum\limits_{i’=1}^{\lfloor \frac{n}{d} \rfloor}\sum\limits_{j’=1}^{\lfloor \frac{m}{d} \rfloor} i’j’d [\gcd(i’,j’)=1]$  </p><p>$=\sum\limits_{d=1}^{n}d \sum\limits_{i’=1}^{\lfloor \frac{n}{d} \rfloor} i’ \sum\limits_{j’=1}^{\lfloor \frac{m}{d} \rfloor} j’ [gcd(i’,j’)=1]$  </p><p>$ =\sum\limits_{d=1}^{n} d \sum\limits_{i’=1}^{\lfloor \frac{n}{d} \rfloor} i’ \sum\limits_{j’=1}^{\lfloor \frac{m}{d} \rfloor} j’ \sum\limits_{d’|i’,d’|j’}\mu(d’)$  </p><p>$=\sum\limits_{d=1}^{n}\sum\limits_{d’=1}^{n}\mu(d’)d \sum\limits_{i’=1}^{\lfloor \frac{n}{d’d} \rfloor} i’ \sum\limits_{j’=1}^{\lfloor \frac{m}{d’d} \rfloor} j’ $ </p><p>令 $dd’=T, F(T)=\sum\limits_{d | T}\mu(d)\frac{T}{d}$ 。F 可以线性筛出来，就做完了 ）</p><p>然后这个题连分块都不用（</p><p>好像有需要分块的加强版被权限了（</p><p><strong>B(BZOJ2440)</strong>：<a href="https://acfcacfca.blog.luogu.org/solution-p4318" target="_blank" rel="noopener">题解</a> </p><p><strong>C(BZOJ3529)</strong>：<a href="https://acfunction.github.io/2019/01/14/bzoj3529/" target="_blank" rel="noopener">题解</a></p><p><strong>D(HDU6053)：</strong> 待填坑</p><p><strong>E(BZOJ2956)</strong>：</p><p>$\sum\limits_{i=1}^{n} \sum\limits_{j=1}^{m} <a href="n\%i">i\not= j</a>(m\%j)$</p><p>$=\sum\limits_{i=1}^{n}n\%i\sum\limits_{j=1}^{m}m\%j-\sum\limits_{i=1}^{n}(n\%i)(m\%i)$</p><p>然后把 $n\%i$ 搞成 $n -i \lfloor\frac{n}{i}\rfloor $ ，$m\%i$ 同理，然后推推式子分个块就做完了</p><p><strong>F(HDU4947)</strong>：待填坑</p><p><strong>G(BZOJ2005)</strong>：有点简单懒得写hhh</p><p><strong>H(HDU4473)</strong>：把题目要求转化为有多少个有序对 (a,b,c) 满足 abc = n。然后分三类 a,b,c;a,a,b;a,a,a 讨论下就行了（优秀的暴力…</p><p><strong>I(HDU5942)</strong>：有点难啊…看的 <a href="https://www.cnblogs.com/clrs97/p/6012285.html" target="_blank" rel="noopener">这个题解</a> </p><hr><h1 id="线段树主席树"><a href="#线段树主席树" class="headerlink" title="线段树主席树"></a>线段树主席树</h1><p><strong>A(HDU4578)</strong>：线段树维护加标记乘标记以及三个值分别表示和，平方的和，立方的和。加标记更新就用二项式展开一下倒序更新；乘标记就是和乘上d，平方乘上d^2，立方同理…然后覆盖操作拆成先乘 0 再加 。</p><p><strong>B(BZOJ1818)</strong>：先把题目条件转化成所有由这些点组成的平行于坐标轴的线段之间有几个交点（端点也算）。然后就直接把坐标离散化一下然后扫描线扫过去中间用树状数组维护一下就行了。</p><p><strong>C(COT)</strong>：板子再见</p><p><strong>D(BZOJ3261)</strong>：搞个可持久化 0/1 trie 维护前缀异或和然后就做完了（板子）</p><p><strong>E(CF484E)</strong>：二分答案下，然后对于一个值是否合法只需要把 &gt; 该数的变成 1 ，小于该数的变成 0 然后用线段树维护这个区间内的最长的 1 序列。由于不能开一堆线段树，所以用主席数的思想就行了（我都觉得我说的不清楚…）</p><p><strong>F()</strong>：</p><p>G：线段树合并裸题</p><p>H：kruskal 重构树上主席树</p><p>I：对每一位维护线段树就行了</p><p>J：压个位然后维护区间或就行了</p><p>K：模板题再见</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;云玩家拯救计划（雾&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
